<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth=room_height-1
seeAll=0
turboEnemy=0//speeds up ai turn
//speach
globalvar speach,fullSpeach;
speach="";
fullSpeach="";
printing=0;
//start BGM
global.Music=audio_play_sound(TempBGM1,1,true)
//graphics
globalvar flavorText;
flavorText=""
globalvar textOther;
textOther=""
globalvar imageText;
imageText=-4
image_speed=0.1
tempRange=0
tempSkillType=0
buffer=100
selfPath=path_add()
globalvar gridAlpha;
gridAlpha=0.1
globalvar errAlpha;
errAlpha=0
globalvar err;
err=""
globalvar infoText;
infoText=""
globalvar infoAlpha;
infoAlpha=0
globalvar surf;
surf = surface_create(view_wview, view_hview);
instance_create(x,y,hpDrawer)
display_set_gui_size(960, 600);
globalvar message;
message[10]=0
globalvar messAlpha;
messAlpha=0
unitX=x
unitY=y
effectText=""
flavorText=""
//unit controls
auto=0
nextTurn=0
turbo=0
cruserSpd=5
selected=noone;
lastSelected=noone
globalvar currentGroup;
currentGroup=0;
selectedAction=0;
menu=0
menuSelection=0
//units
groupName[0]="Player 1"
groupName[1]="Player 2"
groupName[2]="Player 3"
groupName[9]=""
groupName[10]="Other"
unitNum=0
//ds_list
unit[10,0]=noone;
unitLeft=0
//movement
temp1=0;
globalvar grid;
grid = mp_grid_create(0,0,(room_width)/20,(room_height)/20,20,20);
globalvar contx;
globalvar conty;
contx=x
conty=y
globalvar overUnit;
overUnit=instance_place(contx,conty,oUnit)
globalvar pathSpd;
pathSpd=2
//buttons
press1=0
press2=0
//movement
canMove=1
var r1,r2;
for (var i=0;i&lt;10;i++)
{
if playerS[i]&gt;0
    {
    r1=irandom((room_width-pixel)/pixel)*pixel
    r2=irandom((room_height-pixel)/pixel)*pixel
        while collision_rectangle(r1,r2,r1+pixel,r2+pixel*2,oSolid,true,false)
            {
            r1=irandom((room_width-pixel)/pixel)*pixel
            r2=irandom((room_height-pixel)/pixel)*pixel
            }
    unit[i,0]=instance_create(r1,r2,oUnit)
    with unit[i,0]
        getUnitVersonStats(i,playerS[i],typeS[i])
    unit[i,0].group=i
    unit[i,0].team=0
    }
}
view_xview=unit[0,0].x-view_wview/2
view_yview=unit[0,0].y-view_hview/2
contx=unit[0,0].x
conty=unit[0,0].y
x=unit[0,0].x
y=unit[0,0].y
//shop keeper
r1=irandom((room_width-pixel)/pixel)*pixel
r2=irandom((room_height-pixel)/pixel)*pixel
while collision_rectangle(r1,r2-pixel,r1+pixel,r2+2*pixel,oUnit,true,false)||collision_rectangle(r1,r2,r1+pixel,r2+pixel*2,oSolid,true,false)
{
r1=irandom((room_width-pixel)/pixel)*pixel
r2=irandom((room_height-pixel)/pixel)*pixel
}
    unit[10,array_length_2d(unit,10)]=instance_create(r1,r2,oUnit)
    with unit[10,array_length_2d(unit,10)-1]
    {
        shopKeeperStats()
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///get sprite and action
if selected!=noone
with selected
{
    switch(action)
    {
        case 1:get_sprite_unit_walk() break;
    }
    if action&gt;=2
        get_sprite_attack();
} 
with oUnit
{
    //xp++
//unit total xp
    totalXp=0
    for (var i=0;i&lt;11;i++)
        totalXp+=stats[0,i]
    totalXp*=ceil(lv/10)
    totalXp=ceil(totalXp*xpMulti)
    totalXp=floor(totalXp/10)
    maxMove=maxMoven+maxMoved
    //lv up
    if xp&gt;=mxp
        {
        var lvInst;
        lvInst=instance_create(x+10,y-height-15,oSfx)
        lvInst.sprite_index=levelUpSprite
        get_sound_play(-3)
        lvUp()
        add_message(string(name)+" leveled up to lv "+string(lv))
        }
        //stats
        //total stats
        for (var i=0;i&lt;11;i++)
        {
            for (var j=0;j&lt;5;j++)
            {
            if j=0
                stats[7,i]=0
            stats[7,i]+=stats[j,i]
            }
            stats[7,i]=floor(stats[7,i])
            if stats[7,i]&lt;=1
                stats[7,i]=1
        }
    //check dead
    if hp&lt;=0
        {
        var inste;
        inste=instance_create(x,y,oDeadUnit)
        inste.sprite_index=sprite_index
        inste.image_index=image_index
        instance_destroy()
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///turbo modexx
var tc=0
if turbo=1
{
    with(oUnit)
    {
        image_speed=1
        path_speed=20
        tc++
    }
}
else if turbo=-1
{
    turbo=0
        with(oUnit)
    {
        image_speed=0.1
        path_speed=pathSpd
    }
}
else if turbo=0
{
    var ser=selected
    with oUnit
    {
    if image_speed&gt;=1
        image_speed=0.1
    if id=ser
    if x&lt;view_xview-20||x&gt;view_xview+view_wview+20||y&lt;view_yview-20||y&gt;view_yview+view_hview+20
        {
        image_speed=1
        path_speed=20
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///add objects to path finding
mp_grid_clear_all(grid)
var k=selected
with oSolid
    {
        mp_grid_add_instances(grid,id,false)
        if k!=noone
        if team=k.team
            mp_grid_clear_cell(grid,floor(x/pixel),floor(y/pixel))
    }
if selected!=noone
    {
        mp_grid_clear_cell(grid,floor(selected.x/pixel),floor(selected.y/pixel))
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///unit controler
//get global variable
pixel2=pixel
overUnit=instance_place(contx,conty,oUnit)
if currentGroup!=10
if auto=0
{
//move cruser
if canMove=1
if temp1=0
{
    if keyboard_check(keys[currentGroup,0])
        {
        conty-=pixel2;
        temp1=cruserSpd;
        get_sound_play(-2)
        }
    else if keyboard_check(keys[currentGroup,1])
        {
        contx-=pixel2;
        temp1=cruserSpd;
        get_sound_play(-2)
        }
    else if keyboard_check(keys[currentGroup,2])
        {
        conty+=pixel2;
        temp1=cruserSpd;
        get_sound_play(-2)
        }
    else if keyboard_check(keys[currentGroup,3])
        {
        contx+=pixel2;
        temp1=cruserSpd;
        get_sound_play(-2)
        }
}
if menu=1//move cruser to follow the area to move/attack
if selectedAction&gt;0
    {
    unitX=x
    unitY=y
    if view_xview-view_wview/2!=unitX
        view_xview+=sign(unitX-view_xview-view_wview/2)*(pixel2/4)
    if view_yview-view_hview/2!=unitY
        view_yview+=sign(unitY-view_yview-view_hview/2)*(pixel2/4)
    }
inst=instance_place(x,y,oUnit)
//set cruser range
if inst!=noone&amp;&amp;(inst.group=currentGroup)&amp;&amp;inst.action=0&amp;&amp;selectedAction=0
    {
    lastSelected=inst
    unitX=inst.x
    unitY=inst.y
    //just to check for errors when moving the screen
    if abs(view_xview+view_wview/2-unitX)&gt;(pixel2/2)+1
    {
        if view_xview+view_wview/2!=unitX
            view_xview+=sign(unitX-view_xview-view_wview/2)*(pixel2/2)
    }
    else
        view_xview=unitX-view_wview/2
    if abs(view_yview+view_hview/2-unitY)&gt;(pixel2/2)+1
        {
        if view_yview-view_hview/2!=unitY
            view_yview+=sign(unitY-view_yview-view_hview/2)*(pixel2/2)
        }
    else
        view_yview=unitY-view_hview/2
    }
//select unit
if (keyboard_check(keys[currentGroup,4]))
{
    if press1=0
    {
    if canMove=1
        get_sound_play(-5)
        if menu=0
        {
            press1=1
            //check if over a unit
            if (inst!=noone)
            {
                if (inst.group=currentGroup)
                if selected=noone
                if inst.ended=0
                {
                //selected a unit
                    menu=1;
                    menuSelection=0
                    selected=inst;
                    canMove=0
                    show_debug_message("selected:"+string(inst.name))
                }
            }
            if menu=0
            {
                menu=2
                show_debug_message("Confirm end")
                canMove=0
            }
        }
    }
}
else
{
    press1=0
}
//deselect
if (keyboard_check(keys[currentGroup,5]))
{
    if press2=0
    {
    get_sound_play(-6)
        //move menu
        if menu=1
        {
            if selected.action=0
            {
            press2=1
                if selectedAction=0
                {
                    if selected.move!=selected.maxMove
                    {
                    canMove=1
                    menu=0
                    selectedAction=0
                    menuSelection=0
                    if selected!=noone
                        selected=noone
                    show_debug_message("Deselected unit")
                    }
                    else if selected.move&lt;=selected.maxMove
                    {
                    selected.x=selected.lastx
                    selected.y=selected.lasty
                    contx=selected.lastx
                    conty=selected.lasty
                    if selected.x&lt;=view_xview[0]||selected.x&gt;=view_xview[0]+view_wview[0]||selected.y&lt;=view_yview[0]||selected.y&gt;=view_yview[0]+view_hview[0]
                    {
                    view_xview=contx-view_wview/2
                    view_yview=conty-view_hview/2
                    }
                    selected.move=selected.status[0]
                    selected.move=sign(selected.status[1])*selected.maxMove
                    }
                }
                else
                {
                    selectedAction=0
                    contx=selected.x
                    conty=selected.y
                    canMove=0
                    if selected.x&lt;=view_xview[0]||selected.x&gt;=view_xview[0]+view_wview[0]||selected.y&lt;=view_yview[0]||selected.y&gt;=view_yview[0]+view_hview[0]
                    {
                    view_xview=contx-view_wview/2
                    view_yview=conty-view_hview/2
                    }
                    show_debug_message("Deselected Action")
                    with selected
                        path_assign(path,path0)
                }
            }//end menu 1
        }
        else if menu=2//end menu
        {
            press2=1
            canMove=1
            menu=0
            selectedAction=0
            menuSelection=0
        }//end menu2
        else if menu=3
        {
            press2=1
            menu=1
            menuSelection=5
        }//end menu 3
        else if menu=4
        {
            if selectedAction=0
                {
                press2=1
                menu=1
                menuSelection=3
                }
            else
                {
                press2=1
                selectedAction=0
                contx=selected.x
                conty=selected.y
                canMove=0
                show_debug_message("Deselected Action")
                with selected
                    path_assign(path,path0)
                }
        }//end menu 4
        else if menu=5
        {
            if selectedAction=0
                {
                press2=1
                menu=1
                menuSelection=4
                }
            else
                {
                press2=1
                selectedAction=0
                contx=selected.x
                conty=selected.y
                canMove=0
                show_debug_message("Deselected Action")
                with selected
                    path_assign(path,path0)
                }
        }//end menu 5
        else if menu=6
        {
            if selectedAction&lt;=1
                {
                press2=1
                menu=5
                selectedAction=0
                }
            else
                {
                press2=1
                selectedAction-=2
                contx=selected.x
                conty=selected.y
                canMove=0
                show_debug_message("Deselected Action")
                with selected
                    path_assign(path,path0)
                }
        }//end menu 6
        else if menu=7.1
        {
            show_debug_message("Deselected Shop")
            press2=1
            menu=7.3
            canMove=0
            speach=""
            fullSpeach=string(overUnit.name)+": HAVE A NICE DAY.            "
        }
        else if menu=7.2
        {
            show_debug_message("Deselected BUy")
            press2=1
            menu=7.1
            canMove=0
            speach=""
            fullSpeach=string(overUnit.name)+": WHAT CAN I DO FOR YOU?"
        }
        else if menu=7.5
        {
        show_debug_message("Deselected Sell")
            press2=1
            menu=7.1
            canMove=0
            speach=""
            fullSpeach=string(overUnit.name)+": WHAT CAN I DO FOR YOU?"
        }
        //move to next unit
        if selected=noone
        if canMove=1
        if press2=0
        {
            
        press2=1
            if lastSelected!=inst
            {
            contx=lastSelected.x
            conty=lastSelected.y
            x=contx
            y=conty
            }
            else
                {
                show_debug_message("Next unit")
                if inst!=noone&amp;&amp;inst.group=currentGroup
                {
                unitNum++
                if unitNum&gt;=array_length_2d(unit,currentGroup)
                    unitNum=0
                }
                var counter=0
                //check if selected nothing
                while unit[currentGroup,unitNum]=noone&amp;&amp;counter&lt;12
                {
                    counter++
                    unitNum++
                    if unitNum&gt;=array_length_2d(unit,currentGroup)
                        unitNum=0
                }
                while unit[currentGroup,unitNum].ended=1&amp;&amp;counter&lt;12&amp;&amp;lastSelected=unit[currentGroup,unitNum]
                    {
                    counter++
                    unitNum++
                    if unitNum&gt;=array_length_2d(unit,currentGroup)
                        unitNum=0
                        //check if selected nothing
                        while unit[currentGroup,unitNum]=noone&amp;&amp;counter&lt;12
                        {
                            counter++
                            unitNum++
                            if unitNum&gt;=array_length_2d(unit,currentGroup)
                                unitNum=0
                        }
                    }
                if unit[currentGroup,unitNum]!=noone
                {
                contx=unit[currentGroup,unitNum].x
                conty=unit[currentGroup,unitNum].y
                x=contx
                y=conty
                //check if it is out side your screen then move screen
                if x&lt;=view_xview||x&gt;=view_xview+view_wview|| y&lt;=view_yview||y&gt;=view_yview+view_hview
                    {
                    view_xview=x-view_wview/2
                    view_yview=y-view_hview/2
                    }
                lastSelected=noone
                }
            }
        }//end unit switcher
        press2=1
    }
}
else
{
press2=0
}
//showMovement 
if selected!=noone
{
if menu=1
    {
    if selectedAction=1
        {
        with selected
            {
                if mp_grid_path(grid,path,x+10,y+10,contx+10,conty+10,false)
                {
                    if path_get_number(path)&gt;maxMove-move//set cruser to atkRange
                        {
                        mp_grid_path(grid,path,x+10,y+10,path_get_point_x(path,maxMove-move),path_get_point_y(path,maxMove-move),false)
                        contx=path_get_point_x(path,maxMove-move)-10
                        conty=path_get_point_y(path,maxMove-move)-10
                        }
                }
                else
                    {
                    contx=path_get_x(path,1)-10
                    conty=path_get_y(path,1)-10
                    }
            }
        }
        //action range
        else if selectedAction=2
        {
        with selected
            {
            mp_grid_clear_all(grid)//cell(grid,floor(x/pixel),floor(y/pixel))
            mp_grid_path(grid,path,x+10,y+10,contx+10,conty+10,false)
            if path_get_number(path)&gt;2//set cruser to atkRange
                {
                mp_grid_path(grid,path,x+10,y+10,path_get_point_x(path,1),path_get_point_y(path,1),false)
                contx=path_get_point_x(path,1)-10
                conty=path_get_point_y(path,1)-10
                }
            }
        }
        //attack range
        else if selectedAction=3
        {
        with selected
            {
            mp_grid_clear_all(grid)//cell(grid,floor(x/pixel),floor(y/pixel))
            mp_grid_path(grid,path,x+10,y+10,contx+10,conty+10,false)
            if path_get_number(path)&gt;atkRange//set cruser to atkRange
                {
                mp_grid_path(grid,path,x+10,y+10,path_get_point_x(path,atkRange),path_get_point_y(path,atkRange),false)
                contx=path_get_point_x(path,atkRange)-10
                conty=path_get_point_y(path,atkRange)-10
                }
            }
        }
    }//end menu 1
else if menu=4//skills
{
    if selectedAction=2
    {
    var range1=tempRange
    var rangeType=tempSkillType
            with selected
            {
            mp_grid_clear_all(grid)//cell(grid,floor(x/pixel),floor(y/pixel))
            mp_grid_path(grid,path,x+10,y+10,contx+10,conty+10,false)
            if path_get_number(path)&gt;range1//set cruser to atkRange
                {
                mp_grid_path(grid,path,x+10,y+10,path_get_point_x(path,range1),path_get_point_y(path,range1),false)
                contx=path_get_point_x(path,range1)-10
                conty=path_get_point_y(path,range1)-10
                }
            }
        }
    }//end menu 4
else if menu=6//Items
{
    if selectedAction&gt;1
    {
    var range1=tempRange
    var rangeType=tempSkillType
            with selected
            {
            mp_grid_clear_all(grid)//cell(grid,floor(x/pixel),floor(y/pixel))
            mp_grid_path(grid,path,x+10,y+10,contx+10,conty+10,false)
            if path_get_number(path)&gt;range1//set cruser to atkRange
                {
                mp_grid_path(grid,path,x+10,y+10,path_get_point_x(path,range1),path_get_point_y(path,range1),false)
                contx=path_get_point_x(path,range1)-10
                conty=path_get_point_y(path,range1)-10
                }
            }
        }
    }//end menu 6
}
//make sure cruser is in range
if contx&gt;view_xview+view_wview-20
    contx=view_xview+view_wview-20
else if contx&lt;view_xview
    contx=view_xview
if conty&gt;view_yview+view_hview-20
    conty=view_yview+view_hview-20
else if conty&lt;view_yview
    conty=view_yview
//make sure cruser is in bounds
if contx&gt;room_width-20
    contx=room_width-20
else if contx&lt;0
    contx=0
if conty&gt;room_height-20
    conty=room_height-20
else if conty&lt;0
    conty=0
contx=floor(contx/20)*20
conty=floor(conty/20)*20
//animate cruser
if x!=contx
    x+=sign(contx-x)*(pixel2/4)
if y!=conty
    y+=sign(conty-y)*(pixel2/4)
if temp1&gt;0
    temp1--;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///unit controler ai
if seeAll=1{
    view_xview=contx-view_wview/2
    view_yview=conty-view_hview/2}
unitGot=0
if currentGroup=10
{
if turboEnemy=1
    turbo=1
canMove=0
    {//cycle through all units
        for (var i=0;i&lt;array_length_2d(unit,10);i++)
        {
        if unitGot=0
            if instance_exists(unit[10,i])
            if (unit[10,i]!=noone)
                {
                    if unit[10,i].ended=0
                    {
                        if unit[10,i].action=0
                        {
                        var k=unit[10,i]
                        with oUnit
                            {
                                if k!=noone
                                if team=k.team
                                    mp_grid_clear_cell(grid,floor(x/pixel),floor(y/pixel))
                            }
                            switch unit[10,i].ai
                            {
                            case 0:unit[10,i].ended=0 break;
                            case 1:aiLv1(i)break;
                            case 1.1:aiLv1_1_shopkeeper(i)break;
                            case 2:aiLv2(i)break;
                            case 3:aiLv3(i)break;
                            case 4:ai4SpiderBase(i)break;
                            }
                        }//end check action
                        else 
                            unitGot=1
                    }
                }//end unit check
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///unit controler Mouse
//get global variable
pixel2=pixel
if mouseMove&gt;=1
if currentGroup!=10
if auto=0
if mouseTurn=currentGroup
{
//move cruser
if canMove=1
if temp1=0
{
    conty=floor(mouse_y/20)*20
    contx=floor(mouse_x/20)*20
   // temp1=5
}
//select unit
if (mouse_check_button_pressed(mb_left))
{
    if press1=0
    {
        if menu=0
        {
            press1=1
            //check if over a unit
            if (inst!=noone)
            {
                if (inst.group=currentGroup)
                if selected=noone
                if inst.ended=0
                {
                //selected a unit
                    menu=1;
                    menuSelection=0
                    selected=inst;
                    canMove=0
                    show_debug_message("selected:"+string(inst.name))
                }
            }
            if menu=0
            {
                menu=2
                show_debug_message("Confirm end")
                canMove=0
            }
        }
    }
}
//deselect
if (mouse_check_button_pressed(mb_right))
{
    if press2=0
    {
        //move menu
        if menu=1
        {
            if selected.action=0
            {
            press2=1
                if selectedAction=0
                {
                    if selected.move!=selected.maxMove
                    {
                    canMove=1
                    menu=0
                    selectedAction=0
                    if selected!=noone
                        selected=noone
                    show_debug_message("Deselected unit")
                    }
                    else if selected.move&lt;=selected.maxMove
                    {
                    selected.x=selected.lastx
                    selected.y=selected.lasty
                    contx=selected.lastx
                    conty=selected.lasty
                    if selected.x&lt;=view_xview[0]||selected.x&gt;=view_xview[0]+view_wview[0]||selected.y&lt;=view_yview[0]||selected.y&gt;=view_yview[0]+view_hview[0]
                    {
                    view_xview=contx-view_wview/2
                    view_yview=conty-view_hview/2
                    }
                    selected.move=0
                    }
                }
                else
                {
                    selectedAction=0
                    contx=selected.x
                    conty=selected.y
                    canMove=0
                    if selected.x&lt;=view_xview[0]||selected.x&gt;=view_xview[0]+view_wview[0]||selected.y&lt;=view_yview[0]||selected.y&gt;=view_yview[0]+view_hview[0]
                    {
                    view_xview=contx-view_wview/2
                    view_yview=conty-view_hview/2
                    }
                    show_debug_message("Deselected Action")
                    with selected
                        path_assign(path,path0)
                }
            }//end menu 1
        }
        else if menu=2//end menu
        {
            press2=1
            canMove=1
            menu=0
            selectedAction=0
            menuSelection=0
        }//end menu2
        else if menu=3
        {
            press2=1
            menu=1
            menuSelection=5
        }//end menu 3
        else if menu=4
        {
            if selectedAction=0
                {
                press2=1
                menu=1
                menuSelection=3
                }
            else
                {
                press2=1
                selectedAction=0
                contx=selected.x
                conty=selected.y
                canMove=0
                show_debug_message("Deselected Action")
                with selected
                    path_assign(path,path0)
                }
        }//end menu 4
        //move to next unit
        if selected=noone
        if canMove=1
        if press2=0
        {
            
        press2=1
            if lastSelected!=inst
            {
            contx=lastSelected.x
            conty=lastSelected.y
            x=contx
            y=conty
            }
            else
                {
                show_debug_message("Next unit")
                if inst!=noone&amp;&amp;inst.group=currentGroup
                {
                unitNum++
                if unitNum&gt;=array_length_2d(unit,currentGroup)
                    unitNum=0
                }
                var counter=0
                //check if selected nothing
                while unit[currentGroup,unitNum]=noone&amp;&amp;counter&lt;12
                {
                    counter++
                    unitNum++
                    if unitNum&gt;=array_length_2d(unit,currentGroup)
                        unitNum=0
                }
                while unit[currentGroup,unitNum].ended=1&amp;&amp;counter&lt;12&amp;&amp;lastSelected=unit[currentGroup,unitNum]
                    {
                    counter++
                    unitNum++
                    if unitNum&gt;=array_length_2d(unit,currentGroup)
                        unitNum=0
                        //check if selected nothing
                        while unit[currentGroup,unitNum]=noone&amp;&amp;counter&lt;12
                        {
                            counter++
                            unitNum++
                            if unitNum&gt;=array_length_2d(unit,currentGroup)
                                unitNum=0
                        }
                    }
                if unit[currentGroup,unitNum]!=noone
                {
                contx=unit[currentGroup,unitNum].x
                conty=unit[currentGroup,unitNum].y
                x=contx
                y=conty
                //check if it is out side your screen then move screen
                if x&lt;=view_xview||x&gt;=view_xview+view_wview|| y&lt;=view_yview||y&gt;=view_yview+view_hview
                    {
                    view_xview=x-view_wview/2
                    view_yview=y-view_hview/2
                    }
                lastSelected=noone
                }
            }
        }//end unit switcher
    }
}
//showMovement 
if selected!=noone
{
if menu=1
    {
    if selectedAction=1
        {
        with selected
            {
                if mp_grid_path(grid,path,x+10,y+10,contx+10,conty+10,false)
                {
                    if path_get_number(path)&gt;maxMove-move//set cruser to atkRange
                        {
                        mp_grid_path(grid,path,x+10,y+10,path_get_point_x(path,maxMove-move),path_get_point_y(path,maxMove-move),false)
                        contx=path_get_point_x(path,maxMove-move)-10
                        conty=path_get_point_y(path,maxMove-move)-10
                        }
                }
                else
                    {
                    contx=path_get_x(path,1)-10
                    conty=path_get_y(path,1)-10
                    }
            }
        }
        //action range
        else if selectedAction=2
        {
        with selected
            {
            mp_grid_clear_all(grid)//cell(grid,floor(x/pixel),floor(y/pixel))
            mp_grid_path(grid,path,x+10,y+10,contx+10,conty+10,false)
            if path_get_number(path)&gt;2//set cruser to atkRange
                {
                mp_grid_path(grid,path,x+10,y+10,path_get_point_x(path,1),path_get_point_y(path,1),false)
                contx=path_get_point_x(path,1)-10
                conty=path_get_point_y(path,1)-10
                }
            }
        }
        //attack range
        else if selectedAction=3
        {
        with selected
            {
            mp_grid_clear_all(grid)//cell(grid,floor(x/pixel),floor(y/pixel))
            mp_grid_path(grid,path,x+10,y+10,contx+10,conty+10,false)
            if path_get_number(path)&gt;atkRange//set cruser to atkRange
                {
                mp_grid_path(grid,path,x+10,y+10,path_get_point_x(path,atkRange),path_get_point_y(path,atkRange),false)
                contx=path_get_point_x(path,atkRange)-10
                conty=path_get_point_y(path,atkRange)-10
                }
            }
        }
    }//end menu 1
else if menu=4//skills
{
    if selectedAction=2
    {
    var range1=tempRange
    var rangeType=tempSkillType
            with selected
            {
            mp_grid_clear_all(grid)//cell(grid,floor(x/pixel),floor(y/pixel))
            mp_grid_path(grid,path,x+10,y+10,contx+10,conty+10,false)
            if path_get_number(path)&gt;range1//set cruser to atkRange
                {
                mp_grid_path(grid,path,x+10,y+10,path_get_point_x(path,range1),path_get_point_y(path,range1),false)
                contx=path_get_point_x(path,range1)-10
                conty=path_get_point_y(path,range1)-10
                }
            }
        }
    }//end menu 4
}
//make sure cruser is in range
if contx&gt;view_xview+view_wview-20
    contx=view_xview+view_wview-20
else if contx&lt;view_xview
    contx=view_xview
if conty&gt;view_yview+view_hview-20
    conty=view_yview+view_hview-20
else if conty&lt;view_yview
    conty=view_yview
//make sure cruser is in bounds
if contx&gt;room_width-20
    contx=room_width-20
else if contx&lt;0
    contx=0
if conty&gt;room_height-20
    conty=room_height-20
else if conty&lt;0
    conty=0
contx=floor(contx/20)*20
conty=floor(conty/20)*20
//animate cruser
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///unit controler GC
//get global variable
pixel2=pixel
overUnit=instance_place(contx,conty,oUnit)

if currentGroup!=10
if auto=0
if gameCont&gt;0
{
//move cruser
if canMove=1
if temp1=0
{
    if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,0])
        {
        conty-=pixel2;
        temp1=cruserSpd;
        get_sound_play(-2)
        }
    else if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,1])
        {
        contx-=pixel2;
        temp1=cruserSpd;
        get_sound_play(-2)
        }
    else if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,2])
        {
        conty+=pixel2;
        temp1=cruserSpd;
        get_sound_play(-2)
        }
    else if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,3])
        {
        contx+=pixel2;
        temp1=cruserSpd;
        get_sound_play(-2)
        }
}
if menu=1//move cruser to follow the area to move/attack
if selectedAction&gt;0
    {
    unitX=x
    unitY=y
    if view_xview-view_wview/2!=unitX
        view_xview+=sign(unitX-view_xview-view_wview/2)*(pixel2/4)
    if view_yview-view_hview/2!=unitY
        view_yview+=sign(unitY-view_yview-view_hview/2)*(pixel2/4)
    }
inst=instance_place(x,y,oUnit)
//set cruser range
if inst!=noone&amp;&amp;(inst.group=currentGroup)&amp;&amp;inst.action=0&amp;&amp;selectedAction=0
    {
    lastSelected=inst
    unitX=inst.x
    unitY=inst.y
    //just to check for errors when moving the screen
    if abs(view_xview+view_wview/2-unitX)&gt;(pixel2/2)+1
    {
        if view_xview+view_wview/2!=unitX
            view_xview+=sign(unitX-view_xview-view_wview/2)*(pixel2/2)
    }
    else
        view_xview=unitX-view_wview/2
    if abs(view_yview+view_hview/2-unitY)&gt;(pixel2/2)+1
        {
        if view_yview-view_hview/2!=unitY
            view_yview+=sign(unitY-view_yview-view_hview/2)*(pixel2/2)
        }
    else
        view_yview=unitY-view_hview/2
    }
//select unit
if (gamepad_button_check_pressed(cTurn[currentGroup],ckeys[currentGroup,4]))
{
    if press1=0
    {
        if menu=0
        {
            press1=1
            //check if over a unit
            if (inst!=noone)
            {
                if (inst.group=currentGroup)
                if selected=noone
                if inst.ended=0
                {
                //selected a unit
                    menu=1;
                    menuSelection=0
                    selected=inst;
                    canMove=0
                    show_debug_message("selected:"+string(inst.name))
                }
            }
            if menu=0
            {
                menu=2
                show_debug_message("Confirm end")
                canMove=0
            }
        }
    }
}
//deselect
if (gamepad_button_check_pressed(cTurn[currentGroup],ckeys[currentGroup,5]))
{
    if press2=0
    {
        //move menu
        if menu=1
        {
            if selected.action=0
            {
            press2=1
                if selectedAction=0
                {
                    if selected.move!=selected.maxMove
                    {
                    canMove=1
                    menu=0
                    selectedAction=0
                    if selected!=noone
                        selected=noone
                    show_debug_message("Deselected unit")
                    }
                    else if selected.move&lt;=selected.maxMove
                    {
                    selected.x=selected.lastx
                    selected.y=selected.lasty
                    contx=selected.lastx
                    conty=selected.lasty
                    if selected.x&lt;=view_xview[0]||selected.x&gt;=view_xview[0]+view_wview[0]||selected.y&lt;=view_yview[0]||selected.y&gt;=view_yview[0]+view_hview[0]
                    {
                    view_xview=contx-view_wview/2
                    view_yview=conty-view_hview/2
                    }
                    selected.move=0
                    }
                }
                else
                {
                    selectedAction=0
                    contx=selected.x
                    conty=selected.y
                    canMove=0
                    if selected.x&lt;=view_xview[0]||selected.x&gt;=view_xview[0]+view_wview[0]||selected.y&lt;=view_yview[0]||selected.y&gt;=view_yview[0]+view_hview[0]
                    {
                    view_xview=contx-view_wview/2
                    view_yview=conty-view_hview/2
                    }
                    show_debug_message("Deselected Action")
                    with selected
                        path_assign(path,path0)
                }
            }//end menu 1
        }
        else if menu=2//end menu
        {
            press2=1
            canMove=1
            menu=0
            selectedAction=0
            menuSelection=0
        }//end menu2
        else if menu=3
        {
            press2=1
            menu=1
            menuSelection=5
        }//end menu 3
        else if menu=4
        {
            if selectedAction=0
                {
                press2=1
                menu=1
                menuSelection=3
                }
            else
                {
                press2=1
                selectedAction=0
                contx=selected.x
                conty=selected.y
                canMove=0
                show_debug_message("Deselected Action")
                with selected
                    path_assign(path,path0)
                }
        }//end menu 4
        else if menu=5
        {
            if selectedAction=0
                {
                press2=1
                menu=1
                menuSelection=4
                }
            else
                {
                press2=1
                selectedAction=0
                contx=selected.x
                conty=selected.y
                canMove=0
                show_debug_message("Deselected Action")
                with selected
                    path_assign(path,path0)
                }
        }//end menu 5
        else if menu=6
        {
            if selectedAction&lt;=1
                {
                press2=1
                menu=5
                selectedAction=0
                }
            else
                {
                press2=1
                selectedAction=0
                contx=selected.x
                conty=selected.y
                canMove=0
                show_debug_message("Deselected Action")
                with selected
                    path_assign(path,path0)
                }
        }//end menu 6
        //move to next unit
        if selected=noone
        if canMove=1
        if press2=0
        {
            
        press2=1
            if lastSelected!=inst
            {
            contx=lastSelected.x
            conty=lastSelected.y
            x=contx
            y=conty
            }
            else
                {
                show_debug_message("Next unit")
                if inst!=noone&amp;&amp;inst.group=currentGroup
                {
                unitNum++
                if unitNum&gt;=array_length_2d(unit,currentGroup)
                    unitNum=0
                }
                var counter=0
                //check if selected nothing
                while unit[currentGroup,unitNum]=noone&amp;&amp;counter&lt;12
                {
                    counter++
                    unitNum++
                    if unitNum&gt;=array_length_2d(unit,currentGroup)
                        unitNum=0
                }
                while unit[currentGroup,unitNum].ended=1&amp;&amp;counter&lt;12&amp;&amp;lastSelected=unit[currentGroup,unitNum]
                    {
                    counter++
                    unitNum++
                    if unitNum&gt;=array_length_2d(unit,currentGroup)
                        unitNum=0
                        //check if selected nothing
                        while unit[currentGroup,unitNum]=noone&amp;&amp;counter&lt;12
                        {
                            counter++
                            unitNum++
                            if unitNum&gt;=array_length_2d(unit,currentGroup)
                                unitNum=0
                        }
                    }
                if unit[currentGroup,unitNum]!=noone
                {
                contx=unit[currentGroup,unitNum].x
                conty=unit[currentGroup,unitNum].y
                x=contx
                y=conty
                //check if it is out side your screen then move screen
                if x&lt;=view_xview||x&gt;=view_xview+view_wview|| y&lt;=view_yview||y&gt;=view_yview+view_hview
                    {
                    view_xview=x-view_wview/2
                    view_yview=y-view_hview/2
                    }
                lastSelected=noone
                }
            }
        }//end unit switcher
    }
}
//make sure cruser is in range
if contx&gt;view_xview+view_wview-20
    contx=view_xview+view_wview-20
else if contx&lt;view_xview
    contx=view_xview
if conty&gt;view_yview+view_hview-20
    conty=view_yview+view_hview-20
else if conty&lt;view_yview
    conty=view_yview
//make sure cruser is in bounds
if contx&gt;room_width-20
    contx=room_width-20
else if contx&lt;0
    contx=0
if conty&gt;room_height-20
    conty=room_height-20
else if conty&lt;0
    conty=0
contx=floor(contx/20)*20
conty=floor(conty/20)*20
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change menu selection
if menu&gt;0
if currentGroup!=10
if auto=0
{
if selected!=noone
if selected.action=0
{
    if menu=1
    {
        if temp1=0
        if selectedAction=0
        {
            if keyboard_check(keys[currentGroup,0])
            {
            menuSelection--
            temp1=cruserSpd;
            get_sound_play(-4)
            }
            else if keyboard_check(keys[currentGroup,2])
            {
            menuSelection++
            temp1=cruserSpd;
            get_sound_play(-4)
            }
            if menuSelection&lt;0
                menuSelection=6
            else if menuSelection&gt;6
                menuSelection=0
        }
        //select move
        if (keyboard_check(keys[currentGroup,4]))
        if press1=0
        {
        get_sound_play(-5)
            //check if not selected an action and still in menu
            if selectedAction=0
            {
            press1=1
            if menuSelection=0//move
                {
                if selected.move&lt;selected.maxMove
                    {
                    show_debug_message("Selected Move")
                    selectedAction=1
                    canMove=1
                    contx=selected.x
                    conty=selected.y
                    }
                }
            else if menuSelection=1//action
                {
                    {
                    show_debug_message("Selected Action")
                    selectedAction=2
                    canMove=1
                    contx=selected.x
                    conty=selected.y
                    }
                }
            else if menuSelection=2//attack
                {
                    show_debug_message("Selected Attack")
                    selectedAction=3
                    canMove=1
                    contx=selected.x
                    conty=selected.y
                }
            else if menuSelection=3//skills
                {
                    show_debug_message("Selected skills")
                    menuSelection=0
                    menu=4
                }
            else if menuSelection=4//Items
                {
                    show_debug_message("Selected Items")
                    menuSelection=0
                    menu=5
                }
            else if menuSelection=5//stats
                {
                    show_debug_message("Selected Stats")
                    menu=3
                    menuSelection=0
                }
            else if menuSelection=6//end
                {
                show_debug_message("Selected End")
                canMove=1
                menu=0
                selectedAction=0
                selected.ended=1    
                selected=noone
                }
            }
            else if selectedAction=1//go to move range
            {press1=1
                if selected.move&lt;selected.maxMove
                if selected.action=0
                if inst!=selected
                {
                press1=1
                //get the instance the cruser is over (from unit controler)
                if overUnit=noone
                    {
                    press1=1
                        with(selected)
                        {
                            //set to moving
                            action=1
                            path_start(path,pathSpd+ceil(maxMove/2),path_action_stop,false)
                        }
                        selectedAction=0;
                        canMove=0
                    }
                else
                    {
                    errorMess("CAN'T MOVE THERE")
                    press1=1
                    }
                }
            }
            else if selectedAction=2//actions
            {
                 press1=1
                //get the instance the cruser is over (from unit controler)
                var instev=instance_place(contx,conty,oItem)
                    if instev=noone
                instev=instance_place(contx,conty,oAll)
                if instev!=noone
                {
                get_event(instev,selected)
                }
            }
            else if selectedAction=3//go to atk range
            {
            press1=1
                if selected.action=0
                {
                    if overUnit!=selected&amp;&amp;overUnit!=noone&amp;&amp;overUnit.team!=selected.team
                    {
                    
                        with(selected)
                        {
                            //set to attack
                            dir=point_direction(x,y,contx,conty)
                            action=2
                            create=1
                        }
                        selectedAction=0;
                        canMove=0
                    }
                    else
                    {
                        press1=1
                        errorMess("NO TARGET")
                    }
                }
            }
        }//end press action key
    }//end menu 1
    else if menu=3
        {
            if selectedAction=0
            if temp1=0
            {
                if keyboard_check(keys[currentGroup,0])
                {
                menuSelection--
                temp1=cruserSpd;
                get_sound_play(-4)
                }
                else if keyboard_check(keys[currentGroup,2])
                {
                menuSelection++
                temp1=cruserSpd;
                get_sound_play(-4)
                }
                if menuSelection&lt;0
                    menuSelection=14
                else if menuSelection&gt;=15
                    menuSelection=0
                //seelcted skill if possible
                if keyboard_check(keys[currentGroup,4])
                if press1=0
                    {
                    press1=1
                    //selectedAction=1
                    if selected.skillPoint&gt;0
                        {
                            get_sound_play(-5)
                            get_skills_unit(menuSelection,selected,-2)
                        }
                    else
                        errorMess("NO MORE SKILL POINTS")
                    }
            }
        }
    else if menu=4//stats choose menu
         {
            if selectedAction=0
            {
                if temp1=0
                {
                    if keyboard_check(keys[currentGroup,0])
                    {
                    menuSelection--
                    temp1=cruserSpd;
                    get_sound_play(-4)
                    }
                    else if keyboard_check(keys[currentGroup,2])
                    {
                    menuSelection++
                    temp1=cruserSpd;
                    get_sound_play(-4)
                    }
                    if menuSelection&lt;0
                        menuSelection=14
                    else if menuSelection&gt;=15
                        menuSelection=0
                    //seelcted skill if possible
                    if keyboard_check(keys[currentGroup,4])
                    if press1=0
                        {
                        press1=1
                        get_sound_play(-5)
                        //selectedAction=1
                        get_skills_unit(menuSelection,selected,1)
                        }
                }
            }//end selected action=0
            else if selectedAction=2
            {
                if keyboard_check(keys[currentGroup,4])
                if press1=0
                    {
                    get_sound_play(-5)
                    press1=1
                    //selectedAction=1
                    get_skills_unit(menuSelection,selected,2)
                    }
            }
         }
         else if menu=5//item menu
         {
            if selectedAction=0
            {
                if temp1=0
                {
                    if keyboard_check(keys[currentGroup,0])
                    {
                    menuSelection--
                    temp1=cruserSpd;
                    get_sound_play(-4)
                    }
                    else if keyboard_check(keys[currentGroup,2])
                    {
                    menuSelection++
                    temp1=cruserSpd;
                    get_sound_play(-4)
                    }
                    if menuSelection&lt;0
                        menuSelection=selected.maxItem-1
                    else if menuSelection&gt;=selected.maxItem
                        menuSelection=0
                    //seelcted skill if possible
                    if keyboard_check(keys[currentGroup,4])
                    if press1=0
                        {
                        get_sound_play(-5)
                        press1=1
                        if selected.item[menuSelection]!=0
                            menu=6
                        //selectedAction=1
                        //get_skills_unit(menuSelection,selected,1)
                        }
                    }
                }//end selected action=0
            }//end item menu
         else if menu=6//item menu select choice
         {
            if selectedAction&lt;=1
            {
                if temp1=0
                {
                    if keyboard_check(keys[currentGroup,0])
                    {
                    selectedAction--
                    temp1=cruserSpd;
                    get_sound_play(-4)
                    }
                    else if keyboard_check(keys[currentGroup,2])
                    {
                    selectedAction++
                    temp1=cruserSpd;
                    get_sound_play(-4)
                    }
                    if selectedAction&lt;0
                        selectedAction=1
                    else if selectedAction&gt;1
                        selectedAction=0
                    //seelcted skill if possible
                    if keyboard_check(keys[currentGroup,4])
                    if press1=0
                        {
                        get_sound_play(-5)
                        press1=1
                        if selectedAction=0//choose to use item
                            {
                            selectedAction=2
                            canMove=1
                            contx=selected.x
                            conty=selected.y 
                            tempRange=1
                            tempSkillType=0
                            }
                        else if selectedAction=1//choose to drope item
                            {
                            selectedAction=3
                            canMove=1
                            contx=selected.x
                            conty=selected.y 
                            tempRange=1
                            tempSkillType=0
                            }
                        }
                    }
                }//end selected action=0
                else if selectedAction=2
                {                   
                    if keyboard_check(keys[currentGroup,4])
                    if press1=0
                        {
                        get_sound_play(-5)
                        press1=1
                        var ll=menuSelection
                        with selected
                            itemList(ll,1)
                        }
                }
                else if selectedAction=3
                {                   
                    if keyboard_check(keys[currentGroup,4])
                    if press1=0
                        {
                        get_sound_play(-5)
                        press1=1
                        var ll=menuSelection
                        with selected
                            itemList(ll,2)
                        }
                }
            }//end item menu
            else if floor(menu)=7//shop menu
            {
                switch menu
                {
                    case 7:
                        if speach=fullSpeach
                            menu=7.1
                        else
                        {
                            speach+=string_char_at(fullSpeach,string_length(speach)+1)
                            if keyboard_check(keys[currentGroup,4])
                            if press1=0
                            {
                            get_sound_play(-5)
                            press1=1
                            speach=fullSpeach
                            }
                        }
                        menuSelection=0
                    break
                    case 7.4:
                        if speach=fullSpeach
                        {
                            menu=7.2
                            fullSpeach=""
                            speach=""
                            }
                        else
                        {
                            speach+=string_char_at(fullSpeach,string_length(speach)+1)
                            if keyboard_check(keys[currentGroup,4])
                            if press1=0
                            {
                            get_sound_play(-5)
                            press1=1
                            speach=fullSpeach
                            }
                        }
                        menuSelection=0
                    break
                    case 7.6:
                        if speach=fullSpeach
                        {
                            menu=7.5
                            fullSpeach=""
                            speach=""
                            }
                        else
                        {
                            speach+=string_char_at(fullSpeach,string_length(speach)+1)
                            if keyboard_check(keys[currentGroup,4])
                            if press1=0
                            {
                            get_sound_play(-5)
                            press1=1
                            speach=fullSpeach
                            }
                        }
                        menuSelection=0
                    break
                    case 7.1://choice
                    if speach!=fullSpeach
                    {
                        speach+=string_char_at(fullSpeach,string_length(speach)+1)
                        show_debug_message(speach)
                    }
                    if temp1=0
                    {
                        if keyboard_check(keys[currentGroup,0])
                        {
                        menuSelection--
                        temp1=cruserSpd;
                        get_sound_play(-4)
                        }
                        else if keyboard_check(keys[currentGroup,2])
                        {
                        menuSelection++
                        temp1=cruserSpd;
                        get_sound_play(-4)
                        }
                        if menuSelection&lt;0
                            menuSelection=1
                        else if menuSelection&gt;1
                            menuSelection=0
                        if keyboard_check(keys[currentGroup,4])
                        if press1=0
                        {
                        get_sound_play(-5)
                        press1=1
                        if menuSelection=0
                            {
                            menu=7.2
                            speach=""
                            }
                        else
                            {
                            menu=7.5
                            menuSelection=0
                            speach=""
                            }
                        }
                    }
                    break;
                    case 7.2://buy items
                    if speach!=fullSpeach
                    {
                        speach+=string_char_at(fullSpeach,string_length(speach)+1)
                        show_debug_message(speach)
                    }
                    if temp1=0
                    {
                        if keyboard_check(keys[currentGroup,0])
                        {
                        menuSelection--
                        temp1=cruserSpd;
                        get_sound_play(-4)
                        speach=""
                        }
                        else if keyboard_check(keys[currentGroup,2])
                        {
                        menuSelection++
                        temp1=cruserSpd;
                        get_sound_play(-4)
                        speach=""
                        }
                        if menuSelection&lt;0
                            menuSelection=9
                        else if menuSelection&gt;9
                            menuSelection=0
                        if keyboard_check(keys[currentGroup,4])
                        if press1=0
                        {
                        get_sound_play(-5)
                        press1=1
                        speach=""
                        var ll=menuSelection
                        with selected
                            itemList(ll,-1.1)
                        }
                    }
                    break;
                    case 7.5://Sell items
                    if speach!=fullSpeach
                    {
                        speach+=string_char_at(fullSpeach,string_length(speach)+1)
                        show_debug_message(speach)
                    }
                    if temp1=0
                    {
                        if keyboard_check(keys[currentGroup,0])
                        {
                        menuSelection--
                        temp1=cruserSpd;
                        get_sound_play(-4)
                        speach=""
                        }
                        else if keyboard_check(keys[currentGroup,2])
                        {
                        menuSelection++
                        temp1=cruserSpd;
                        get_sound_play(-4)
                        speach=""
                        }
                        if menuSelection&lt;0
                            menuSelection=9
                        else if menuSelection&gt;9
                            menuSelection=0
                        if keyboard_check(keys[currentGroup,4])
                        if press1=0
                        {
                        get_sound_play(-5)
                        press1=1
                        speach=""
                        var ll=menuSelection
                        with selected
                            itemList(ll,-2.1)
                        }
                    }
                    break;
                    case 7.3:
                        if speach=fullSpeach
                        {
                            menu=1
                            selectedAction=0
                            menuSelection=1
                            contx=selected.x
                            conty=selected.y
                        }
                        else
                        {
                            speach+=string_char_at(fullSpeach,string_length(speach)+1)
                            if keyboard_check(keys[currentGroup,4])
                            if press1=0
                            {
                            get_sound_play(-5)
                            press1=1
                            speach=fullSpeach
                            }
                        }
                    break
                }
            }//end shop menu
    }//end sleceted unit menu
    
    if menu=2//end menu
    {
    if temp1=0
    if selectedAction=0
    {
        if keyboard_check(keys[currentGroup,0])
            {
            menuSelection--
            temp1=cruserSpd;
            get_sound_play(-4)
            }
        else if keyboard_check(keys[currentGroup,2])
            {
            menuSelection++
            temp1=cruserSpd;
            get_sound_play(-4)
            }
            if menuSelection&lt;0
                menuSelection=1
            else if menuSelection&gt;1
                menuSelection=0
    }
    if (keyboard_check(keys[currentGroup,4]))
        if press1=0
        {
        get_sound_play(-5)
            //check if not selected an action and still in menu
            if selectedAction=0
            {
            press1=1
            if menuSelection=0//end
                {
                nextTurn=1
                menu=0
                }
            else if menuSelection=1
                {
                if !place_meeting(contx,conty,oSolid)
                    {
                    auto=1
                    menuSelection=0
                    menu=0
                    }
                }
            }
        }
    }//end menu 2
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change menu selection GC
if menu&gt;0
if currentGroup!=10
if gameCont=1
if auto=0
{
if selected!=noone
if selected.action=0
{
    if menu=1
    {
        if temp1=0
        if selectedAction=0
        {
            if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,0])
            {
            menuSelection--
            temp1=cruserSpd;
            }
            else if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,2])
            {
            menuSelection++
            temp1=cruserSpd;
            }
            if menuSelection&lt;0
                menuSelection=6
            else if menuSelection&gt;6
                menuSelection=0
        }
        //select move
        if (gamepad_button_check_pressed(cTurn[currentGroup],ckeys[currentGroup,4]))
        if press1=0
        {
            //check if not selected an action and still in menu
            if selectedAction=0
            {
            press1=1
            if menuSelection=0//move
                {
                if selected.move&lt;selected.maxMove
                    {
                    show_debug_message("Selected Move")
                    selectedAction=1
                    canMove=1
                    contx=selected.x
                    conty=selected.y
                    }
                }
            else if menuSelection=1//action
                {
                    {
                    show_debug_message("Selected Action")
                    selectedAction=2
                    canMove=1
                    contx=selected.x
                    conty=selected.y
                    }
                }
            else if menuSelection=2//attack
                {
                    show_debug_message("Selected Attack")
                    selectedAction=3
                    canMove=1
                    contx=selected.x
                    conty=selected.y
                }
            else if menuSelection=3//skills
                {
                    show_debug_message("Selected skills")
                    menuSelection=0
                    menu=4
                }
            else if menuSelection=4//Items
                {
                    show_debug_message("Selected Items")
                    menuSelection=0
                    menu=5
                }
            else if menuSelection=5//stats
                {
                    show_debug_message("Selected Stats")
                    menu=3
                    menuSelection=0
                }
            else if menuSelection=6//end
                {
                show_debug_message("Selected End")
                canMove=1
                menu=0
                selectedAction=0
                selected.ended=1    
                selected=noone
                }
            }
            else if selectedAction=1//go to move range
            {
                if selected.move&lt;selected.maxMove
                if selected.action=0
                if inst!=selected
                //get the instance the cruser is over (from unit controler)
                {
                press1=1
                    with(selected)
                    {
                        //set to moving
                        action=1
                        path_start(path,pathSpd+ceil(maxMove/2),path_action_stop,false)
                    }
                    selectedAction=0;
                    canMove=0
                }
            }
            else if selectedAction=2//actions
            {
                //get the instance the cruser is over (from unit controler)
                var instev=instance_place(x,y,oAll)
                if instev!=noone
                {
                press1=1
                get_event(instev.event,selected)
                }
            }
            else if selectedAction=3//go to atk range
            {
                if selected.action=0
                if inst!=selected
                if inst!=noone
                {
                press1=1
                    with(selected)
                    {
                        //set to attack
                        dir=point_direction(x,y,contx,conty)
                        action=2
                        create=1
                    }
                    selectedAction=0;
                    canMove=0
                }
            }
        }//end press action key
    }//end menu 1
    else if menu=3
        {
            if selectedAction=0
            if temp1=0
            {
                if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,0])
                {
                menuSelection--
                temp1=cruserSpd;
                }
                else if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,2])
                {
                menuSelection++
                temp1=cruserSpd;
                }
                else if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,1])
                {
                menuSelection-=15
                temp1=cruserSpd;
                }
                else if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,3])
                {
                menuSelection+=15
                temp1=cruserSpd;
                }
                if menuSelection&lt;0
                    menuSelection+=30
                else if menuSelection&gt;=30
                    menuSelection-=30
                //seelcted skill if possible
                if gamepad_button_check_pressed(cTurn[currentGroup],ckeys[currentGroup,4])
                if press1=0
                    {
                    press1=1
                    //selectedAction=1
                    if selected.skillPoint&gt;0
                        {
                            get_skills_unit(menuSelection,selected,-2)
                        }
                    }
            }
        }
    else if menu=4//stats choose menu
         {
            if selectedAction=0
            {
                if temp1=0
                {
                    if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,0])
                    {
                    menuSelection--
                    temp1=cruserSpd;
                    }
                    else if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,2])
                    {
                    menuSelection++
                    temp1=cruserSpd;
                    }
                    else if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,1])
                    {
                    menuSelection-=15
                    temp1=cruserSpd;
                    }
                    else if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,3])
                    {
                    menuSelection+=15
                    temp1=cruserSpd;
                    }
                    if menuSelection&lt;0
                        menuSelection+=30
                    else if menuSelection&gt;=30
                        menuSelection-=30
                    //seelcted skill if possible
                    if gamepad_button_check_pressed(cTurn[currentGroup],ckeys[currentGroup,4])
                    if press1=0
                        {
                        press1=1
                        //selectedAction=1
                        get_skills_unit(menuSelection,selected,1)
                        }
                }
            }//end selected action=0
            else if selectedAction=2
            {
                if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,4])
                if press1=0
                    {
                    press1=1
                    //selectedAction=1
                    get_skills_unit(menuSelection,selected,2)
                    }
            }
         }
         else if menu=5//item menu
         {
            if selectedAction=0
            {
                if temp1=0
                {
                    if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,0])
                    {
                    menuSelection--
                    temp1=cruserSpd;
                    }
                    else if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,2])
                    {
                    menuSelection++
                    temp1=cruserSpd;
                    }
                    if menuSelection&lt;0
                        menuSelection=selected.maxItem-1
                    else if menuSelection&gt;=selected.maxItem
                        menuSelection=0
                    //seelcted skill if possible
                    if gamepad_button_check_pressed(cTurn[currentGroup],ckeys[currentGroup,4])
                    if press1=0
                        {
                        press1=1
                        if selected.item[menuSelection]!=0
                            menu=6
                        //selectedAction=1
                        //get_skills_unit(menuSelection,selected,1)
                        }
                    }
                }//end selected action=0
            }//end item menu
         else if menu=6//item menu select choice
         {
            if selectedAction&lt;=1
            {
                if temp1=0
                {
                    if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,0])
                    {
                    selectedAction--
                    temp1=cruserSpd;
                    }
                    else if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,2])
                    {
                    selectedAction++
                    temp1=cruserSpd;
                    }
                    if selectedAction&lt;0
                        selectedAction=1
                    else if selectedAction&gt;1
                        selectedAction=0
                    //seelcted skill if possible
                    if gamepad_button_check_pressed(cTurn[currentGroup],ckeys[currentGroup,4])
                    if press1=0
                        {
                        press1=1
                        if selectedAction=0//choose to use item
                            {
                            selectedAction=2
                            canMove=1
                            contx=selected.x
                            conty=selected.y 
                            tempRange=1
                            tempSkillType=0
                            }
                        }
                    }
                }//end selected action=0
                else if selectedAction=2
                {                   
                    if gamepad_button_check_pressed(cTurn[currentGroup],ckeys[currentGroup,4])
                    if press1=0
                        {
                        press1=1
                        var ll=menuSelection
                        with selected
                            itemList(ll,1)
                        }
                }
                
            }//end item menu
    }//end sleceted unit menu
    
    if menu=2//end menu
    {
    if temp1=0
    if selectedAction=0
    {
        if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,0])
            {
            menuSelection--
            temp1=cruserSpd;
            }
        else if gamepad_button_check(cTurn[currentGroup],ckeys[currentGroup,2])
            {
            menuSelection++
            temp1=cruserSpd;
            }
            if menuSelection&lt;0
                menuSelection=1
            else if menuSelection&gt;1
                menuSelection=0
    }
    if (gamepad_button_check_pressed(cTurn[currentGroup],ckeys[currentGroup,4]))
        if press1=0
        {
            //check if not selected an action and still in menu
            if selectedAction=0
            {
            press1=1
            if menuSelection=0//end
                {
                nextTurn=1
                menu=0
                }
            else if menuSelection=1
                {
                if !place_meeting(contx,conty,oSolid)
                    {
                    auto=1
                    menuSelection=0
                    menu=0
                    }
                }
            }
        }
    }//end menu 2
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///auto movement
if auto=1
{
var unitgot=0
canMove=0
if turboEnemy=1
    turbo=1
    for (var i=0;i&lt;array_length_2d(unit,currentGroup);i++)
        {
        if unitgot=0
            if (unit[currentGroup,i]!=noone)
                {
                    if unit[currentGroup,i].ended=0
                    {
                        if unit[currentGroup,i].action=0
                        {
                            if unit[currentGroup,i].move&lt;unit[currentGroup,i].maxMove
                            {
                            selected=unit[currentGroup,i]
                            with unit[currentGroup,i]
                                {
                                    mp_grid_clear_cell(grid,floor(x/pixel),floor(y/pixel))
                                    if mp_grid_path(grid,path,x+10,y+10,contx+10,conty+10,false)
                                    {
                                        unitgot=1
                                        if path_get_number(path)&gt;maxMove+1-move
                                        {
                                        mp_grid_path(grid,path,x+10,y+10,path_get_point_x(path,maxMove-move),path_get_point_y(path,maxMove-move),false)
                                        }
                                         action=1
                                         path_start(path,pathSpd+ceil(maxMove/2),path_action_stop,false)
                                         
                                    }
                                }
                            }
                            else
                            {
                                unit[currentGroup,i].ended=1
                                //mp_grid_add_cell(grid,floor(unit[currentGroup,i].x/pixel),floor(unit[currentGroup,i].y/pixel))
                            }
                        }
                        else
                            unitgot=1
                    }
                }
        }
    if unitgot=0
    {//moved all units
        auto=0
        canMove=1
        //selected.ended=1
        selected=noone
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check if there are no more units to move
unitLeft=0
for (var i=0;i&lt;array_length_2d(unit,currentGroup);i++)
{
    if unit[currentGroup,i]!=noone
    if instance_exists(unit[currentGroup,i])
        {
        if unit[currentGroup,i].ended=0
            unitLeft+=1
        /*else
            {
            with unit[currentGroup,i]
                {
                lastx=x
                lasty=y
                }
            }*/
        }
}
if unitLeft=0||nextTurn=1
{
    //current group end turn
    for (var i=0;i&lt;array_length_2d(unit,currentGroup);i++)
    {
        if unit[currentGroup,i]!=noone
        if instance_exists(unit[currentGroup,i])
            {
            if unit[currentGroup,i].aggro&gt;0
            unit[currentGroup,i].aggro--
            temp1=0
            //if did not move
            with unit[currentGroup,i]
            {
                if lastx=x
                if lasty=y
                    ep++
                lastx=x
                lasty=y
            }
            //reset status
            for (var kk=0;kk&lt;11;kk++)
                {
                if unit[currentGroup,i].status[kk]&gt;0
                    unit[currentGroup,i].status[kk]-=1
                else if unit[currentGroup,i].status[kk]&lt;0
                    unit[currentGroup,i].status[kk]+=1
                }
            //lower stats boost/debuff timer
                for (var tt=0;tt&lt;11;tt++)
                {
                    if frac(unit[currentGroup,i].stats[1,tt])&gt;0.01
                        unit[currentGroup,i].stats[1,tt]-=0.01
                    else
                        unit[currentGroup,i].stats[1,tt]=0
                    if abs(frac(unit[currentGroup,i].stats[4,tt]))&gt;0.01
                        unit[currentGroup,i].stats[4,tt]+=0.01
                    else
                        unit[currentGroup,i].stats[4,tt]=0
                }
            }
        }
    errAlpha=0
    nextTurn=0
    menu=0
    menuSelection=0
    unitNum=0
    canMove=-1
    currentGroup++
    if currentGroup&gt;=array_height_2d(unit)
    {
        currentGroup=0
        //one cycle passed
        tMin+=10 
        //spawn enemies
        spawnEnemies()
    }
    show_debug_message("Next player turn "+string(currentGroup))
    //check if group is larger than 0
    var nextints
    if array_length_2d(unit,currentGroup)&gt;0
    {
        with(oSfxNextTurn)
            instance_destroy()
        nextints=instance_create(x,y,oSfxNextTurn)
        nextints.text=string(groupName[currentGroup])+" TURN"
    }
    //new group
    for (var i=0;i&lt;array_length_2d(unit,currentGroup);i++)
    {
        if unit[currentGroup,i]!=noone
        if instance_exists(unit[currentGroup,i])
        if unit[currentGroup,i]!=id
            {//re sets stats
            with unit[currentGroup,i]
            {
            onHit2=0
            ended=0
            move=0
            action=0
            hp+=hpr
            ep+=epr
            //if full energy
           /*if stats[7,1]=ep
            if group!=10
                hp++*/
            }
            //reset temp stats
            for (var tt=0;tt&lt;11;tt++)
            {
                unit[currentGroup,i].stats[3,tt]=0
            }
            with unit[currentGroup,i]
            {
                path_assign(path,path0)
            //check status effects
                if status[0]&gt;0//slow
                {
                    move=status[0]
                }
                if status[1]&gt;0//bind
                {
                    move=maxMove
                }
                if status[2]&gt;0//poison
                {
                    hp-=ceil(lv/3)
                }
                if hp&lt;=0   
                    {
                    var inste;
                    inste=instance_create(x,y,oDeadUnit)
                    inste.sprite_index=sprite_index
                    inste.image_index=image_index
                    instance_destroy()
                    add_message(string(name)+" DIED FROM POISON.")
                    } 
                if status[3]&gt;0//burn
                {
                    hp-=floor(hp*0.10)+1
                }
                //check if dead
                if hp&lt;=0   
                    {
                    var inste;
                    inste=instance_create(x,y,oDeadUnit)
                    inste.sprite_index=sprite_index
                    inste.image_index=image_index
                    instance_destroy()
                    add_message(string(name)+" DIED FROM BURN.")
                    } 
                }
            }
        }
    contx=x
    conty=y
    var k=0
    while (k&lt;array_length_2d(unit,currentGroup))
    {
        if instance_exists(unit[currentGroup,k])&amp;&amp;unit[currentGroup,k]!=noone
        {
        contx=unit[currentGroup,k].x
        conty=unit[currentGroup,k].y
        if currentGroup!=10
            {
            x=contx
            y=conty
            view_xview=contx-view_wview/2
            view_yview=conty-view_hview/2
            lastSelected=noone
            }
        k=array_length_2d(unit,currentGroup)
        }
        else k++
    }
    selected=noone
    if currentGroup!=10
        if turboEnemy=1
            turbo=-1
    //time count
    if tMin&gt;59
    {
        tHour++
        tMin=0
    }
    if tHour&gt;24
    {  
        tDay++
        tHour=1
    }
    if tDay&gt;10
    {
        tDay=1
        tMonth++
    }
    if tMonth&gt;4
    {
        tMonth=0
        tYear++
    }
        
}
else if canMove=-1
    canMove=1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///damage calculation
var instt, instw;
var weakNess=1;
var buffe=buffer
if instance_number(oDmg)&gt;0
{
audio_listener_position(x,y,1)
with (oDmg)
if instance_exists(source)
{
    instt=instance_place(x,y,oUnit)
    if instt!=noone&amp;&amp;(instt.team!=source.team||instt.team=0.1)
    {
        if instt.aggro&lt;=1
        {
        instt.aggroTarg=source
        instt.aggro=aG
        }
        show_debug_message("CHANCE to hit "+string(floor(hit*(source.stats[7,7]/instt.stats[7,7])-instt.stats[7,9])))        
        show_debug_message("CHANCE TO CRIT "+string(floor(crit*(source.stats[7,6]/instt.stats[7,6]))))
        if atkType=0&amp;&amp;hit*clamp(source.stats[7,7]/instt.stats[7,7],0.75,2)-instt.stats[7,9]&gt;=irandom(99)+1
        {
            var d2=wep+dmg;
            //crit chance
            if crit*(source.stats[7,6]/instt.stats[7,6])&gt;=irandom(99)
                dmgMulti+=0.5
            //instt.damage=ceil((wep*(dmg/instt.stats[7,4])*(irandom_range(85,110)/100)*dmgMulti)/3)
            if wepType&gt;=0
                weakNess=instt.ReWe[wepType];
            instt.damage=max(d2-instt.stats[7,4]*(irandom_range(85,110)/100)*dmgMulti*weakNess)
            getWepType(instt,wepType)
            get_unit_hit_effect(instt)
            get_unit_statusOnhit(onHit,instt)
            instt.hp-=instt.damage
            instw=instance_create(x+10,y-20-instt.height,oDmgWord)
            instw.text=instt.damage
            if weakNess&gt;1
                instw.colour=make_color_rgb(255, 120, 0)
            else if weakNess&lt;1
                instw.colour=make_color_rgb(200, 0, 20)
            if dmgMulti&gt;=1.5
            {
                instw.colour=c_orange
                instw.text=string(instw.text)+"!"
            }
        }
        else if atkType=1&amp;&amp;hit*(source.stats[7,7]/instt.stats[7,7])-instt.stats[7,9]&gt;=irandom(99)+1
        {
            var d2=wep+dmg;
            //crit chance
            if crit*(source.stats[7,6]/instt.stats[7,6])&gt;=irandom(99)
                dmgMulti+=0.5
            //instt.damage=ceil((wep*(dmg/instt.stats[7,4])*(irandom_range(85,110)/100)*dmgMulti)/3)
            if wepType&gt;=0
                weakNess=instt.ReWe[wepType];
            instt.damage=ceil(sqrt(wep*d2*(d2/instt.stats[7,5]))*(irandom_range(85,110)/100)*dmgMulti*weakNess)
            getWepType(instt,wepType)
            get_unit_hit_effect(instt)
            get_unit_statusOnhit(onHit,instt)
            instt.hp-=instt.damage
            instw=instance_create(x+10,y-20-instt.height,oDmgWord)
            instw.text=instt.damage
            if weakNess&gt;1
                instw.colour=make_color_rgb(255, 120, 0)
            else if weakNess&lt;1
                instw.colour=make_color_rgb(200, 0, 20)
            if dmgMulti&gt;=1.5
            {
                instw.colour=c_orange
                instw.text=string(instw.text)+"!"
            }
        }
        else
        {
            instt.damage=-1
            get_unit_hit_effect(instt)
            instw=instance_create(x+10,y-20-instt.height,oDmgWord)
            instw.text="Miss"
        }
        //show_debug_message(string(source.name)+" dealt "+string(instt.damage)+" to "+string(instt.name))
        instance_destroy()
        //get xp
        if instt.damage&gt;0
        if instt!=source
        if instt.damage&lt;instt.stats[7,0]
            source.xp+=ceil(instt.totalXp*(instt.damage/instt.stats[7,0]))
        else
            source.xp+=instt.totalXp
        //message
        if x&gt;view_xview[0]-20&amp;&amp;x&lt;view_xview[0]+view_wview[0]+20
        if y&gt;view_yview[0]-30&amp;&amp;y&lt;view_yview[0]+view_hview[0]+20
            {
            if instt.damage&gt;0
                {
                add_message(string(source.name)+" dealt "+string(instt.damage)+" damage to "+string(instt.name))
                if playSound=1
                    get_sound_play(wepType+0.1)
                }
            else
                {
                add_message(string(instt.name)+" avoided "+string(source.name)+"'s attack")
                get_sound_play((-1))
                }
            }
    }
    //check if target died
    if instt!=noone&amp;&amp;instt.hp&lt;=0
    {
    //show message
    if x&gt;view_xview[0]-buffe&amp;&amp;x&lt;view_xview[0]+view_wview[0]+buffe
    if y&gt;view_yview[0]-buffe&amp;&amp;y&lt;view_yview[0]+view_hview[0]+buffe
        {
        add_message(string(source.name)+" has slain "+string(instt.name))
        }
        if instt.unit=5
        show_message("You Win!")
       //get xp
        if instt!=source
        source.xp+=instt.totalXp
        source.gold+=instt.gold
        with instt
            {
            var inste;
            inste=instance_create(x,y,oDeadUnit)
            inste.sprite_index=sprite_index
            inste.image_index=image_index
            instance_destroy()
            }
    }
}
else
    instance_destroy()
    //remove unexisting instances
for (var j=0;j&lt;array_height_2d(unit)j++)
    for (var i=0;i&lt;array_length_2d(unit,j);i++)
    {
        if !instance_exists(unit[j,i])
            unit[j,i]=noone
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sound control BGM
if audio_sound_get_track_position(global.Music) &gt;=38
   {
   audio_sound_set_track_position(global.Music, 0);
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*with(oUnit)
{
    if group=10
    hp--
    xp+=1000
    gold+=1000
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var buffe=buffer
with(oAll)
{
    if x&gt;view_xview[0]-buffe&amp;&amp;x&lt;view_xview[0]+view_wview[0]+buffe&amp;&amp;y&gt;view_yview[0]-buffe&amp;&amp;y&lt;view_yview[0]+view_hview[0]+buffe
        visible=true
    else
        visible=false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw stats the instance that the cruser is over
var posx=-5//10
var posy=-400+display_get_gui_height()-410//450
if inst!=noone
if instance_exists(inst)
if canMove&gt;=0
{
    //inst.alpha=1
    draw_sprite_ext(hpBarStats,0,posx+10,posy+690,4,4,0,-1,1)
    draw_set_font(pixelFont)
    draw_set_colour(c_white)
    draw_sprite_ext(xpBar,0,posx+126,posy+772,(inst.xp/inst.mxp)*225,20,0,-1,1)
    draw_text_transformed(posx+130,posy+757,string(inst.name)+" LV:"+string(inst.lv),3,3,0)
    draw_sprite_ext(inst.sprite_index,inst.image_index,posx+30,posy+708,4,4,0,-1,1)
    draw_sprite_ext(hpBarGui,0,posx+126,posy+710,(inst.hp/inst.stats[7,0])*225,28,0,-1,1)
    draw_sprite_ext(energyBar,0,posx+126,posy+741,(inst.ep/inst.stats[7,1])*225,28,0,-1,1)
    if inst.hide_hp=0||seeAll=1
    {
        draw_text_transformed(posx+115,posy+691," HP:"+string(inst.hp)+"/"+string(inst.stats[7,0]),4,4,0)
        draw_text_transformed(posx+115,posy+722," EP:"+string(inst.ep)+"/"+string(inst.stats[7,1]),4,4,0)
    }
    else
    {
        draw_text_transformed(posx+115,posy+691," HP:???/???",4,4,0)
        draw_text_transformed(posx+115,posy+722," EP:???/???",4,4,0)
    }
    draw_set_colour(c_yellow)
    if inst.group=currentGroup
    if inst.group!=10
    draw_text_transformed(posx+136,posy+658,"Gold:"+string(inst.gold),4,4,0)
    draw_text_transformed(posx+150,posy+635,string(inst.totalXp)+" B:"+string(inst.boost),4,4,0)
    if selected!=noone{
    draw_text_transformed(posx+150,posy+612,"CRIT:"+string(floor(selected.stats[7,10]*(selected.stats[7,6]/inst.stats[7,6]))),4,4,0)
    draw_text_transformed(posx+150,posy+589,"HIT:"+string(floor(selected.stats[7,8]*(selected.stats[7,7]/inst.stats[7,7])-inst.stats[7,9])),4,4,0)}
}
draw_set_colour(c_black)
draw_text_transformed(20,-5,"FPS:"+string(fps),4,4,0)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw Current Action
if currentGroup!=10
{
var posx=display_get_gui_width()-40
var posy=display_get_gui_height()-80
var key1=get_keyboard_letter(keys[0,4])
var key2=get_keyboard_letter(keys[0,5])
var text1=""
var text2=""
draw_set_colour(c_black)
draw_set_font(pixelFont)
draw_set_halign(fa_right)
draw_set_alpha(1)
switch menu
{
    case 1:
        if selectedAction=0
            {
            switch menuSelection
                {
                case 0:if selected.move&lt;selected.maxMove text1="MOVE UNIT ["+string(key1)+"]" break;
                case 1:text1="ACTION ["+string(key1)+"]" break;
                case 2:text1="ATTACK ["+string(key1)+"]" break;
                case 3:text1="USE SKILLS ["+string(key1)+"]" break;
                case 4:text1="USE ITEMS ["+string(key1)+"]" break;
                case 5:text1="CHECK STATS ["+string(key1)+"]" break;
                case 6:text1="END UNIT TURN ["+string(key1)+"]" break;
                }
            if selected.move=selected.maxMove
                text2="MOVE BACK ["+string(key2)+"]"
            else
                text2="DESELECT UNIT ["+string(key2)+"]"
            }
        else
            {switch selectedAction
                {
                case 1:text1="MOVE TO LOCATION ["+string(key1)+"]" break;
                case 2:
                    var instev=instance_place(contx,conty,oItem)
                    if instev=noone
                        instev=instance_place(x,y,oAll)
                    if instev!=noone&amp;&amp;instev.event&gt;0
                    {
                        switch floor(instev.event)
                        {
                            case 1:text1="HEAL ["+string(key1)+"]" break; 
                            case 2:text1="PICK UP ["+string(key1)+"]" break; 
                            case 3:text1="SHOP ["+string(key1)+"]" break; 
                        }
                    }
                    break;
                case 3:text1="ATTACK ["+string(key1)+"]" break;
                }//end selected action
            text2="CANCEL ACTION ["+string(key2)+"]"
            }
        break
    case 2:
        switch menuSelection
        {
            case 0:text1="END TURN ["+string(key1)+"]" 
            if unitLeft&gt;=1
                showAbilityText("YOU STILL HAVE UNITS LEFT TO MOVE")
            break;
            case 1:if !place_meeting(contx,conty,oSolid)text1="MOVE ALL TO LOCATION ["+string(key1)+"]" break;
        }
        text2="BACK ["+string(key2)+"]"
        break
    case 3:
        if selected.skillPoint&gt;0
            text1="UPGRADE SKILL ["+string(key1)+"]"
        text2="BACK ["+string(key2)+"]"
        break
    case 4:
        if selectedAction=0
        {
            text1="SELECT SKILL ["+string(key1)+"]"
            text2="BACK ["+string(key2)+"]"
        }
        else if selectedAction&gt;0
        {
            text1="USE SKILL ["+string(key1)+"]"
            text2="CANCEL ACTION ["+string(key2)+"]"
        }
        break;
    case 5:
        if selectedAction=0
        {
            text1="SELECT ITEM ["+string(key1)+"]"
            text2="BACK ["+string(key2)+"]"
        }
        else if selectedAction&gt;0
        {
            text1="USE SKILL ["+string(key1)+"]"
            text2="CANCEL ACTION ["+string(key2)+"]"
        }
        break;
    case 6:
        if selectedAction=0
        {
            text1="USE ITEM ["+string(key1)+"]"
            text2="BACK ["+string(key2)+"]"
        }
        else if selectedAction=1
        {
            text1="DROP ITEM ["+string(key1)+"]"
            text2="BACK ["+string(key2)+"]"
        }
        else if selectedAction=2
        {
            text1="USE ITEM ["+string(key1)+"]"
            text2="CANCEL ACTION ["+string(key2)+"]"
        }
        else if selectedAction=3
        {
            text1="DROP ITEM ["+string(key1)+"]"
            text2="CANCEL ACTION ["+string(key2)+"]"
        }
        break;
    case 7:
        text1="SKIP TEXT ["+string(key1)+"]"
        //text2="CANCEL ACTION ["+string(key2)+"]"
    break
    case 7.4:
        text1="SKIP TEXT ["+string(key1)+"]"
        //text2="CANCEL ACTION ["+string(key2)+"]"
    break
    case 7.6:
        text1="SKIP TEXT ["+string(key1)+"]"
        //text2="CANCEL ACTION ["+string(key2)+"]"
    break
    case 7.3:
        text1="SKIP TEXT ["+string(key1)+"]"
        //text2="CANCEL ACTION ["+string(key2)+"]"
    break
    case 7.1:
        if menuSelection=0
            text1="SELECT BUY ["+string(key1)+"]"
        else if menuSelection=1
            text1="SELECT SELL ["+string(key1)+"]"
        text2="LEAVE SHOP ["+string(key2)+"]"
    break
    case 7.2:
        if overUnit.item[menuSelection]&gt;0
            text1="PURCHACE ITEM ["+string(key1)+"]"
        text2="GO BACK ["+string(key2)+"]"
    break
    case 7.5:
        if selected.item[menuSelection]&gt;0
            text1="SELL ITEM ["+string(key1)+"]"
        text2="GO BACK ["+string(key2)+"]"
    break
}
if menu=0
{
    if instance_exists(overUnit)&amp;&amp;overUnit!=noone&amp;&amp;overUnit.group=currentGroup&amp;&amp;overUnit.ended=0
    {
    text1="SELECT UNIT ["+string(key1)+"]"
    }
    else
    {
    text1="OPEN MENU ["+string(key1)+"]"
    }
    text2="NEXT UNIT ["+string(key2)+"]"
}
draw_sprite_ext(TextBox12,0,display_get_gui_width(),posy+20,display_get_gui_width()-posx-string_width(text2)*4-100,4,0,-1,1)
draw_sprite_ext(TextBox12,0,display_get_gui_width(),posy-25,display_get_gui_width()-posx-string_width(text1)*4-100,4,0,-1,1)
draw_text_transformed(posx,posy-45.0,text1,4,4,0)
draw_text_transformed(posx,posy,text2,4,4,0)
draw_set_halign(fa_left)
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw Message
var posx=display_get_gui_width()-50
var posy=305+display_get_gui_height()-450
draw_set_colour(c_black)
draw_set_halign(fa_right)
draw_set_alpha(messAlpha)
for (var i=0;i&lt;10;i++)
{
draw_set_alpha((messAlpha)/6-i)
if messAlpha&gt;2+i||(messAlpha&gt;1&amp;&amp;i=0)
    draw_set_colour(c_black)
else
    draw_set_colour(c_dkgray)
if message[i]!=0
    draw_text_transformed(posx,posy-i*20,message[i],3,3,0)
}
if messAlpha&gt;0
    messAlpha-=0.1
draw_set_halign(fa_left)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw menu
var posx=5//10
var posy=50//450
draw_set_alpha(1)
draw_set_font(pixelFont)
switch menu
{  
    case 1:
    if selectedAction=0
    if selected.action=0
    {
        draw_sprite_ext(menuGui,menuSelection,posx,posy,4,4,0,-1,1)
        if selected.move&lt;selected.maxMove
            draw_set_colour(c_black)
        else
            draw_set_colour(c_red)
        draw_text_transformed(posx+7,posy-15,"MOVE",4,4,0)
        draw_set_colour(c_black)
        draw_text_transformed(posx+7,posy+17,"ACTION",4,4,0)
        draw_text_transformed(posx+7,posy+49,"ATTACK",4,4,0)
        draw_text_transformed(posx+7,posy+81,"SKILL",4,4,0)
        draw_text_transformed(posx+7,posy+113,"ITEM",4,4,0)
        if selected.skillPoint&gt;0
            draw_set_colour(c_lime)
        else
            draw_set_color(c_black)
        draw_text_transformed(posx+7,posy+145,"STATS",4,4,0)
        draw_set_colour(c_black)
        draw_text_transformed(posx+7,posy+174,"WAIT",4,4,0)
    }
    break;
    case 2:
    draw_sprite_ext(menuEnd,menuSelection,posx,posy,4,4,0,-1,1)
    draw_set_color(c_black)
    draw_text_transformed(posx+7,posy-15,"END",4,4,0)
    if place_meeting(contx,conty,oSolid)
    draw_set_colour(c_red)
    draw_text_transformed(posx+7,posy+12,"ALLMOVE",4,4,0)
    break;
    case 3://stats
    draw_set_colour(c_black)
    draw_sprite_ext(statsGUi,0,posx,posy,4,4,0,-1,1)
    draw_text_transformed(posx+75,posy+11,string(selected.lv),4,4,0)
    draw_text_transformed(posx+75,posy+35,string(selected.xp)+"/"+string(selected.mxp),4,4,0)
    draw_text_transformed(posx+75,posy+59,string(selected.hp)+"/"+string(selected.stats[7,0]),4,4,0)
    draw_text_transformed(posx+75,posy+84,string(selected.ep)+"/"+string(selected.stats[7,1]),4,4,0)
    for (var i=2;i&lt;11;i++)
        {
        draw_set_colour(c_black)
        if selected.stats[1,i]+selected.stats[4,i]&gt;0
            draw_set_colour(c_lime)
        else if selected.stats[1,i]+selected.stats[4,i]&lt;0
            draw_set_colour(c_red)
        draw_text_transformed(posx+75,posy+59+i*24,string(selected.stats[7,i]),4,4,0)
        }
    draw_set_colour(c_black)
    draw_text_transformed(posx+75,posy+59+24*11,string(selected.maxMove),4,4,0)
    draw_set_colour(c_yellow)
    draw_text_transformed(posx+75,posy+60+24*12,string(selected.gold),4,4,0)
    //skills
        draw_sprite_ext(skillUpgrade1,0,posx+240,posy,4,4,0,-1,1)
        draw_set_colour(c_white)
        draw_text_transformed(posx+250,posy-16,"Skill Points:"+string(selected.skillPoint),4,4,0)
        draw_sprite_ext(skillMarker2,0,posx+245,posy+32+menuSelection*24,4,4,0,-1,1)
        draw_info_text(posx+524,posy+32+menuSelection*24)
        for (var i=0;i&lt;15i++)
            {
            var p=""
            draw_set_colour(c_black)
            p=get_skills_unit(i,selected,-1)
            if p!="0"&amp;&amp;p!=0
            draw_text_transformed(posx+250,posy+11+i*24,p,4,4,0)
            }
    break;
    case 4:
    if selectedAction=0
    {
    draw_sprite_ext(skillListP1,0,posx,posy,4,4,0,-1,1)
    draw_sprite_ext(skillMarker,0,posx+4,posy+32+menuSelection*24,4,4,0,-1,1)
    draw_info_text(posx+244,posy+32+(menuSelection)*24)
        for (var i=0;i&lt;15i++)
            {
            var p=""
            draw_set_colour(c_black)
            p=get_skills_unit(i,selected,0)
            if p!="0"&amp;&amp;p!=0
            draw_text_transformed(posx+7,posy+11+i*24,p,4,4,0)
            }
    }
    break;
    case 5:
        draw_sprite_ext(Items,0,posx,posy,4,4,0,-1,1)
        draw_sprite_ext(itemMarker,0,posx+4,posy+32+(menuSelection)*24,4,4,0,-1,1)
        draw_info_text(posx+300,posy+32+(menuSelection)*24)
        for (var i=0;i&lt;selected.maxItem;i++)
            {
            var p=""
            draw_set_colour(c_black)
            with selected
                p=itemList(i,0)
            if p!="0"
            draw_text_transformed(posx+7,posy+12+i*24,p,4,4,0)
            if imageText!=-4
                draw_sprite_ext(imageText,0,posx+245,posy+24+i*24,2,2,0,-1,1)
            }
        draw_set_colour(c_dkgray)
        draw_rectangle(posx+4,posy+12+(selected.maxItem+1)*24,posx+315,posy+331,false)
    break;
    case 6:
        if selectedAction&lt;=1
        {
        draw_sprite_ext(Items,0,posx,posy,4,4,0,-1,1)
        draw_sprite_ext(itemMarker,0,posx+4,posy+32+(menuSelection)*24,4,4,0,-1,1)
        for (var i=0;i&lt;selected.maxItem;i++)
            {
            var p=""
            draw_set_colour(c_black)
            with selected
                p=itemList(i,0)
            if p!="0"
            draw_text_transformed(posx+7,posy+12+i*24,p,4,4,0)
            if imageText!=-4
                draw_sprite_ext(imageText,0,posx+245,posy+24+i*24,2,2,0,-1,1)
            }
        draw_set_colour(c_dkgray)
        draw_rectangle(posx+4,posy+12+(selected.maxItem+1)*24,posx+315,posy+331,false)
        draw_sprite_ext(ItemChoice,selectedAction,posx+310,posy+32+(menuSelection)*24,4,4,0,-1,1)
        draw_set_colour(c_black)
        draw_text_transformed(posx+320,posy+17+(menuSelection)*24,"USE",4,4,0)
        draw_text_transformed(posx+320,posy+47+(menuSelection)*24,"DROP",4,4,0)
        }
    break;
    case 7:
    {
    draw_set_colour(c_ltgray)
    draw_roundrect(posx,posy+10,posx+280,posy+100,false)
    draw_set_colour(c_black)
    draw_text_ext_transformed(posx+5,posy,speach,6,90,3,3,0)
    }
    break;
    case 7.4:
    {
    draw_set_colour(c_ltgray)
    draw_roundrect(posx,posy+10,posx+280,posy+100,false)
    draw_set_colour(c_black)
    draw_text_ext_transformed(posx+5,posy,speach,6,90,3,3,0)
    }
    break;
    case 7.6:
    {
    draw_set_colour(c_ltgray)
    draw_roundrect(posx,posy+10,posx+280,posy+100,false)
    draw_set_colour(c_black)
    draw_text_ext_transformed(posx+5,posy,speach,6,90,3,3,0)
    }
    break;
    case 7.1:
    {
    draw_set_colour(c_ltgray)
    draw_roundrect(posx,posy+10,posx+280,posy+100,false)
    draw_set_colour(c_black)
    draw_text_ext_transformed(posx+5,posy,speach,6,90,3,3,0)
    draw_sprite_ext(ItemChoice,menuSelection,posx+1,posy+105,4,4,0,-1,1)
    draw_set_colour(c_black)
    draw_text_transformed(posx+10,posy+88,"BUY",4,4,0)
    draw_text_transformed(posx+10,posy+117,"SELL",4,4,0)
    }
    break;
    case 7.2:
    draw_set_colour(c_ltgray)
    draw_roundrect(posx,posy+10,posx+280,posy+100,false)
    draw_set_colour(c_black)
    draw_text_ext_transformed(posx+5,posy,speach,6,90,3,3,0)
    draw_sprite_ext(shopBuy,0,posx+1,posy+105,4,4,0,-1,1)
    draw_sprite_ext(itemMarker,0,posx+5,posy+137+(menuSelection)*24,4,4,0,-1,1)
    draw_info_text(posx+300,posy+138+(menuSelection)*24)
    for (var i=0;i&lt;overUnit.maxItem;i++)
    {
    var p=""
    draw_set_colour(c_black)
    with overUnit
        p=itemList(i,-1)
    if p!="0"
        draw_text_transformed(posx+7,posy+117+i*24,p,4,4,0)
    if imageText!=-4
        draw_sprite_ext(imageText,0,posx+245,posy+133+i*24,2,2,0,-1,1)
    }
    break
    case 7.5:
    draw_set_colour(c_ltgray)
    draw_roundrect(posx,posy+10,posx+280,posy+100,false)
    draw_set_colour(c_black)
    draw_text_ext_transformed(posx+5,posy,speach,6,90,3,3,0)
    draw_sprite_ext(shopSell,0,posx+1,posy+105,4,4,0,-1,1)
    draw_sprite_ext(itemMarker,0,posx+5,posy+137+(menuSelection)*24,4,4,0,-1,1)
    draw_info_text(posx+300,posy+138+(menuSelection)*24)
    for (var i=0;i&lt;10;i++)
    {
    var p=""
    draw_set_colour(c_black)
    with selected
        p=itemList(i,-2)
    if p!="0"
        draw_text_transformed(posx+7,posy+117+i*24,p,4,4,0)
    if imageText!=-4
        draw_sprite_ext(imageText,0,posx+245,posy+133+i*24,2,2,0,-1,1)
    }
    break
    case 7.3:
    {
    draw_set_colour(c_ltgray)
    draw_roundrect(posx,posy+10,posx+280,posy+100,false)
    draw_set_colour(c_black)
    draw_text_ext_transformed(posx+5,posy,speach,6,90,3,3,0)
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// time
var posx=display_get_gui_width()-50
var posy=-5
var sMin=tMin
var sHour=tHour
draw_set_colour(c_black)
draw_rectangle(posx-355,posy+17,posx+50,posy+50,false)
draw_set_colour(c_ltgray)
draw_rectangle(posx-350,posy+17,posx+50,posy+50,false)
draw_set_colour(c_black)
draw_set_font(pixelFont)
draw_set_halign(fa_right)
//time strings
if tMin&lt;10
    {
    sMin="0"+string(tMin)
    }
if tHour=0
    sHour="12"
draw_text_transformed(posx+10,posy,string(sHour)+":"+string(sMin)+" Day:"+string(tDay)+
    " Month:"+string(tMonth),4,4,0)
draw_set_halign(fa_left)
if currentGroup!=10
    draw_text_transformed(posx-550,posy,"Unit Left:"+string(unitLeft),4,4,0)
draw_set_halign(fa_center)
if currentGroup!=10
{
    if errAlpha&gt;0
    {
        if canMove=1
        {
        draw_set_colour(c_red)
        draw_set_alpha(errAlpha)
        draw_sprite_ext(ErrorBox,0,posx-490-string_width(err)*2,posy+60,string_width(err)*4+30,4,0,0,errAlpha)
        draw_sprite_ext(ErrorBox,0,posx-485-string_width(err)*2,posy+60,string_width(err)*4+20,4,0,-1,errAlpha)
        draw_text_transformed(posx-470,posy+40,err,4,4,0)
        }
        errAlpha-=0.1
        draw_set_alpha(1)
    }
}
if infoAlpha&gt;0
{
    draw_set_colour(c_black)
    draw_set_alpha(infoAlpha)
    draw_sprite_ext(ErrorBox,0,posx-490-string_width(infoText)*2,posy+60,string_width(infoText)*4+30,4,0,0,infoAlpha)
    draw_sprite_ext(ErrorBox,0,posx-485-string_width(infoText)*2,posy+60,string_width(infoText)*4+20,4,0,-1,infoAlpha)
    draw_text_transformed(posx-470,posy+40,infoText,4,4,0)
    infoAlpha-=0.1
    draw_set_alpha(1)
}
draw_set_halign(fa_left)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///gui looks
draw_set_alpha(gridAlpha)
draw_set_colour(c_black)
for (var i=floor(view_yview/20)*20-1;i&lt;floor(view_yview/20)*20+view_hview-1;i+=20)
    draw_line(0,i,room_width,i)
for (var i=floor(view_xview/20)*20-1;i&lt;floor(view_xview/20)*20+view_wview-1;i+=20)
    draw_line(i,0,i,room_height)
draw_set_alpha(1)
if !surface_exists(surf)
   {
   surf = surface_create(view_wview, view_hview);
   }
surface_set_target(surf);
draw_clear_alpha(c_white,0)
surface_reset_target();
//draw selected unit path
if selected!=noone
{
    if menu=1
    {
        //draw movement range
        if selectedAction=1
        {
        surface_set_target(surf);
        var buffe=buffer
            with selected
                {
                floodFill_movement(x,y,maxMove-move)//,x,y,maxMove)
                }
        surface_reset_target();
        }
        //draw action range
        else if selectedAction=2
        {
        surface_set_target(surf);
        var buffe=buffer
            with selected
                {
                floodFillAction(x,y,1)//,x,y,maxMove)
                }
        surface_reset_target();
        }
        //draw attack range
        else if selectedAction=3
        {
        surface_set_target(surf);
            with selected
                {
                floodFill_atk(x,y,atkRange)
                }
        surface_reset_target();
        }
    }//end menu 1
    else if menu=4
    {
        if selectedAction=2
        {
        var temprange=tempRange
            surface_set_target(surf);
            with selected
                {
                floodFill_range(x,y,temprange)
                }
            switch tempSkillType
            {
                case 0:draw_sprite(effectTile,0,contx-view_xview,conty-view_yview)break
                case 1:
                for(var xk=-1;xk&lt;=1;xk++)
                for(var yk=-1;yk&lt;=1;yk++)
                {
                if abs(xk)+abs(yk)&lt;=1
                    {
                    draw_sprite(effectTile,0,contx+xk*20-view_xview,conty+yk*20-view_yview)
                    }
                }
                break
                case 2:
                var die=point_direction(selected.x,selected.y,contx,conty)
                for(var xk=-1;xk&lt;=1;xk++)
                for(var yk=-1;yk&lt;=1;yk++)
                {
                if abs(angle_difference(point_direction(contx,conty,contx+xk*20,conty+yk*20),die))&lt;10
                ||abs(angle_difference(point_direction(contx,conty,contx+xk*20,conty+yk*20),die))&gt;=170
                ||abs(xk)+abs(yk)=0
                    {
                    draw_sprite(effectTile,0,contx+xk*20-view_xview,conty+yk*20-view_yview)
                    }
                }
                break
                case 3:
                var die=point_direction(selected.x,selected.y,contx,conty)+90
                for(var xk=-1;xk&lt;=1;xk++)
                for(var yk=-1;yk&lt;=1;yk++)
                {
                if abs(angle_difference(point_direction(contx,conty,contx+xk*20,conty+yk*20),die))&lt;10
                ||abs(angle_difference(point_direction(contx,conty,contx+xk*20,conty+yk*20),die))&gt;=170
                ||abs(xk)+abs(yk)=0    
                    {
                    draw_sprite(effectTile,0,contx+xk*20-view_xview,conty+yk*20-view_yview)
                    }
                }
                break
            }
        surface_reset_target();
        }
    }
    else if menu=5
    {
        if selectedAction=2
        {
        var temprange=tempRange
            surface_set_target(surf);
            with selected
                {
                floodFill_range(x,y,temprange)
                }
            switch tempSkillType
            {
                case 0:draw_sprite(effectTile,0,contx-view_xview,conty-view_yview)break
            }
        surface_reset_target();
        }
    }
    else if menu=6
    {
        if selectedAction&gt;1
        {
        var temprange=tempRange
            surface_set_target(surf);
            with selected
                {
                floodFill_range(x,y,temprange)
                }
            if tempSkillType=0
                {
                draw_sprite(effectTile,0,contx-view_xview,conty-view_yview)
                }
        surface_reset_target();
        }
    }
}

/*else if menu=0&amp;&amp;currentGroup!=10
{
    surface_set_target(surf);
    draw_sprite_ext(moveableTile,0,unitX-view_xview,unitY-view_yview,1,1,0,-1,0.8)
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw units
//mp_grid_draw(grid)
var buffe=buffer
//if selectedAction=0
if currentGroup!=10
with(oUnit)
{
    if x&gt;view_xview[0]-buffe&amp;&amp;x&lt;view_xview[0]+view_wview[0]+buffe
    if y&gt;view_yview[0]-buffe&amp;&amp;y&lt;view_yview[0]+view_hview[0]+buffe
    {    
        if ended=0&amp;&amp;group=currentGroup&amp;&amp;action=0
        {
            surface_set_target(surf);
            draw_sprite(movableTile,0,x-view_xview,y-view_yview)
            surface_reset_target();
        }
    }
}
draw_surface_ext(surf, view_xview, view_yview,1,1,0,-1,0.6);
if selected!=noone
{
    if selectedAction=1
    if menu=1
    with(selected)
    {
    draw_set_colour(c_black)
    path_drawer(path)
   // draw_path(path,x,y,true)
    //draw_self()
    }
}
with oSolid
    depth=-y
draw_self()
show_debug_overlay(true)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw event that cruser is over
if menu=1
if selectedAction=2
{
    var inste=instance_place(contx,conty,oItem)
    if inste=noone
        inste=instance_place(contx,conty,oAll)
        with inste
        {
            switch floor(event)
            {
                case 1:var in=instance_create(x,y,oSfx);
                    in.sprite_index=sign_healFoutain1
                    //draw_sprite(sign_healFoutain1,-1,x,y)
                break;
                case 2:var in=instance_create(x,y,oSfx);
                    in.sprite_index=signPickup
                break
                case 3:var in=instance_create(x,y,oSfx);
                    in.sprite_index=signShop
                break
            }
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>turbo=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>turbo=-1
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
