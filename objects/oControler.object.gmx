<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>cruser</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed=0.1
playerColour[0]=c_red
playerColour[1]=c_blue
playerColour[10]=c_white
window_set_size(360*3,240*3+3)
hit=0
gridAlpha=0.1
miss=0
cur=0
hold=0
delay=0
viewTurn=0
turnTime=0
timePhase0=0
timePhase1=0
timePhase2=0
timePhase3=0
timePhase4=0
timePhase5=0
currentNumber=0
globalvar pixelFont,pixelBlock;
pixelFont=font_add_sprite_ext(letters,"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.?![]()/\&lt;&gt;:-+'%",true,1)
pixelBlock=font_add_sprite_ext(lettersBlock,"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.?![]()/\&lt;&gt;:-+'%",true,1)
unitList=ds_list_create()
allUnits=ds_list_create()
xx=x
yy=y
controler=0
camTurnDir=0
selected=noone
keys[0]=ord('W')
keys[1]=ord('A')
keys[2]=ord('S')
keys[3]=ord('D')
keys[4]=ord('F')
keys[5]=ord('G')
keys[6]=ord('Q')
keys[7]=ord('E')
display_set_gui_size(360,240);
globalvar grid;
grid = mp_grid_create(0,0,(room_width)/15+2,(room_height)/15+1,15,15);
//used to determain what actions you can take
phase=0
menuSel=0
menuSel2=-1
loop=0
currentTurn=0
turnsSurvive=0
gridF1= ds_grid_create((room_width)/15+1,(room_height)/15+1);
ds_grid_clear(gridF1,-1)
message=""
messTimer=0
infoTime=0
target=noone
globalvar hour,minu;//1 turn = 10 min
hour=7
minu=0

globalvar randNum,randPos;
randPos=0;
for (var i=0;i&lt;1000;i++){
    randNum[i]=irandom(99)
}
//for sprite idle
globalvar udg,ch;
udg=1
ch=0
var inst,inst2;
repeat(1){
inst=instance_create(x,y,oFighter);
ds_list_add(unitList,inst)
//inst=instance_create(x+15,y,oFighter);
//ds_list_add(unitList,inst)
xx=inst.xx
yy=inst.yy
view_xview=inst.xx-view_wview/2
view_yview=inst.yy-view_hview/2
}
inst=instance_create(x+15,y,oArcher);
ds_list_add(unitList,inst)
var temp=instance_create(xx,yy,oEff);
temp.sprite_index=spawn_eff   
inst=instance_create(x+15*15,y+15*15,oDragon1)
inst.team=-1
inst.ai=0
inst.marker=1

inst=instance_create(x-10*15,y-10*15,oWurm)
inst.team=-1
inst.ai=-1
for(var i=1;i&lt;10;i++){
inst2=instance_create(x-(10-i)*15,y-10*15,oWurm)
inst2.team=-1
inst2.ai=-1
inst.link=inst2
inst=inst2
}
inst.ai=0
inst.marker=1
add_all_to_map()
show_debug_overlay(true)
generate_map()
for (var i=0;i&lt;ds_list_size(unitList);i++){
    selected=ds_list_find_value(unitList,i)
    update_fog()
}selected=noone
alarm[9]=1//activation cycle
//update_view_zone()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///random stuff
//buildings
/*repeat(500){
var rx=irandom(room_width/15)//room_width/15);
var ry=irandom(room_height/15)//room_height/15);
if !place_meeting(rx*15,ry*15,oUnit)
    {
    instance_create(rx*15,ry*15,choose(oBuilding,oLamppost,oRecyclingBin,
    oBenchr,oBenchu,oBenchl,oBenchd))
    }    
}*/
//enemies
repeat(10){
rx=irandom(room_width/15)//room_width/15);
ry=irandom(room_height/15)//room_height/15);
if !place_meeting(rx*15,ry*15,oUnit)
if ds_grid_get(gridF1,rx,ry)&lt;1
    {
    var inst=instance_create(rx*15,ry*15,
    choose(oSlime,oBoar,oFrog,oTurt));
    inst.team=-1
    inst.draw=0
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///menu stuff
menu=0
menuSelect=0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debugging
globalvar debugging;
debugging=0
debugObj=0
debug1=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    phase=0
    selected=noone
    update_fog()
    check_turn_end()
    add_all_to_map()
    alarm[10]=30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_deactivate_all(true)
instance_activate_region(view_xview,view_yview,view_wview,view_hview,true)
instance_activate_region(xx-view_wview/2,yy-view_hview/2,xx+view_wview,yy+view_hview,true)
if selected!=noone
    instance_activate_region(selected.x-view_wview/2,selected.y-view_hview/2,selected.x+view_wview,selected.y+view_hview,true)

alarm[9]=2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check turn end
with selected{
    wait=1
    hpg+=(abs(xx-x)+abs(yy-y))*0.05
    spg+=(abs(xx-x)+abs(yy-y))*0.05
    //xp+=ceil((abs(xx-x)+abs(yy-y))/10)
    xx=x
    yy=y
    if xp&gt;=mxp
        levelup()
    }
    phase=0
    selected=noone
    update_fog()
    check_turn_end()
    add_all_to_map()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///end normal
/*instance_activate_all()
    alarm[9]=3
    alarm[4]=2*/
//instance_activate_all()
with selected{
wait=1
hpg+=(abs(xx-x)+abs(yy-y))*0.05
spg+=(abs(xx-x)+abs(yy-y))*0.05
xx=x
yy=y
if xp&gt;=mxp
    levelup()
}
phase=0
update_fog()
selected=noone
check_turn_end()
add_all_to_map()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//end turn pick up item
if selected!=noone{
var inst=instance_place(selected.x,selected.y,oItem)
if inst!=noone
{
    var space=0
    while space&lt;10{
        if selected.item[space]=0{
        with selected{
                item[space]=inst.item
                item[space]+=inst.use
            }
            message_create("obtaiN "+return_item_name(inst.item+inst.use))
            alarm[2]=15
            with inst
                instance_destroy()
            break;
        }
        else space++
    }
    if space=10
        alarm[3]=10

}
else{
    with selected{
    wait=1
    xx=x
    yy=y
    if xp&gt;=mxp
        levelup()
    }
    phase=0
    selected=noone
    update_fog()
    check_turn_end()
    add_all_to_map()
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//end item throw
with selected{
wait=1
tecg+=1
//hpg+=0.05
//spg+=0.05
//xp+=1
xx=x
yy=y
if xp&gt;=mxp
    levelup()
}
phase=0
selected=noone
update_fog()
check_turn_end()
add_all_to_map()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///end turn
if phase=5{
loop--
if loop&gt;0
    phase=4
}
if phase!=4
if selected!=noone{
    var inst=instance_place(selected.x,selected.y,oItem)
    if inst!=noone
    {
    var space=0
    while space&lt;10{
        if selected.item[space]=0{
        with selected{
                item[space]=inst.item
                item[space]+=inst.use
            }
            if currentTurn&gt;=0
            message_create("obtaiN "+return_item_name(inst.item+inst.use))
            alarm[2]=15
            with inst
                instance_destroy()
            break;
        }
        else space++
    }
    if space=10
        alarm[3]=10

    }
    else{
    //instance_activate_all()
    //alarm[9]=3
    //alarm[4]=2
    with selected{
    wait=1
    hpg+=(abs(xx-x)+abs(yy-y))*0.05
    spg+=(abs(xx-x)+abs(yy-y))*0.05
    //xp+=ceil((abs(xx-x)+abs(yy-y))/10)
    xx=x
    yy=y
    if xp&gt;=mxp
        levelup()
    }
    phase=0
    //instance_activate_all()
    update_fog()
    selected=noone
    check_turn_end()
    add_all_to_map()
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#1 when a unit is selected
if selected!=noone
if menu=-1
{
if currentTurn&gt;=0{
    //instance_deactivate_all(true)
    //instance_activate_region(view_xview,view_yview,view_wview,view_hview,true)
    //instance_activate_region(selected.x-view_wview/2,selected.y-view_hview/2,view_wview,view_hview,true)
    var c=selected
    //movement
    if mouse_check_button_pressed(mb_left)
    ||keyboard_check_pressed(keys[4])
    if phase=0
    {
    add_all_to_map()
    mp_grid_clear_cell(grid,c.x/15,c.y/15)
        if mp_grid_get_cell(grid,xx/15,yy/15)=0
        {
        if mp_grid_path(grid,c.path,c.x+7.5,c.y+7.5,xx+7.5,yy+7.5,false)
        &amp;&amp;ds_grid_get(gridF1,xx/15,yy/15)&gt;=0    
            {

            if c.mov&gt;=path_get_number(c.path)-1{
                //check to snap to grid
               with c{
                   path_start(path,3,path_action_stop,false)
                   }
               phase=1
               }else message_create("too far")           
           }
           else message_create("caNNot move there")
        }else message_create("caNNot move there")
    }


    if mouse_check_button_pressed(mb_right)
    ||keyboard_check_pressed(keys[5]){
        if phase!=0{
        view_xview=c.x-view_wview/2
        view_yview=c.y-view_hview/2
        }
        if phase=0{
            phase=0
            add_all_to_map()
            x=selected.xx
            y=selected.yy
            selected=noone
            }
        else if phase=2{
            with selected{
            x=xx
            y=yy
            xprevious=x
            yprevious=y
            view_xview=x-view_wview/2
            view_yview=y-view_hview/2
            }
            phase=0
            xx=selected.xx
            yy=selected.yy
            add_all_to_map()
        }
        else if phase=3{
            phase=2
            xx=c.x
            yy=c.y
            }
        else if phase=6{
            if menuSel2=-1{
                phase=2
                xx=c.x
                yy=c.y
                menuSel=3
                }
            else menuSel2=-1
        }
        else if phase=7{
            xx=c.x
            yy=c.y
            phase=6
        }
        else if phase=9{
            phase=6
            xx=c.x
            yy=c.y
            view_xview=c.x-view_wview/2
            view_yview=c.y-view_hview/2
        }
        else if phase=10{
            if menuSel2=-1{
                phase=2
                xx=c.x
                yy=c.y
                menuSel=2
                }
            else menuSel2=-1
        }else if phase=11{
            menuSel2=-1
            phase=10
            xx=c.x
            yy=c.y
            view_xview=c.x-view_wview/2
            view_yview=c.y-view_hview/2
        }
    }
    
    if phase=1{
    if (c.path_position=1)||path_get_length(c.path)&lt;1
        ||path_get_number(c.path)&lt;1
        {
               phase=2
               menuSel=0
               add_all_to_map()
        }
        menuSel=1
    }
    //unit menu
    else if phase=2{
        view_xview=c.x-view_wview/2
        view_yview=c.y-view_hview/2
        if mouse_wheel_up()
        ||keyboard_check_pressed(keys[0])
            menuSel--
        else if mouse_wheel_down()
        ||keyboard_check_pressed(keys[2])
            menuSel++
        //show_debug_message("mouse") 
        //show_debug_message(window_mouse_get_y()/display_get_height())
        //change base menu selection
        if mouse_x-view_xview&gt;270
        &amp;&amp; mouse_y-view_yview&gt;150
        &amp;&amp; mouse_y-view_yview&lt;165+60
        {
        menuSel=floor((mouse_y-view_yview-150)/20)+1
        }
        //else menuSel=0
        if menuSel&lt;1
            menuSel=4
        else if menuSel&gt;4
            menuSel=1
        //menuSel=min(4,menuSel)
        //menuSel=max(1,menuSel)
        //when chosen a selection
        if mouse_check_button_pressed(mb_left)
        ||keyboard_check_pressed(keys[4])
        if menuSel&gt;0{
            switch menuSel{
                case 1:phase=3 break;
                case 2:phase=10 menuSel=0 break
                case 3:phase=6 menuSel=0 break;
                case 4:
                    phase=2.1
                    alarm[0]=5
                    break;
            }        
        }
    }//end phase 2
    else if phase=3{//attack    
        var inst=instance_place(xx,yy,oUnit)
        if inst!=noone
        if mouse_check_button_pressed(mb_left)
        ||keyboard_check_pressed(keys[4]){
            if (abs(xx-c.x)+abs(yy-c.y))/15&lt;=return_wep_range(c.item[c.wep]){
                if inst!=noone
                if inst!=selected
                {
                    phase=4
                    loop=return_multi_atk(c.item[c.wep])
                    selected.dir=floor(point_direction(selected.x+7,selected.y+7,inst.x+7,inst.y+7)/90)
                    target=inst
                }
            }else message_create("Not in raNge")
        }
    }//end phase 3
    //phase 4 and 5 was here
    else if phase=6{//item
        if menuSel2=-1{//before select item
            if mouse_wheel_up()||
            keyboard_check_pressed(keys[0])
                menuSel++
            else if mouse_wheel_down()||
            keyboard_check_pressed(keys[2])
                menuSel--
            //change item menu selection
            if mouse_x-view_xview&gt;270
            &amp;&amp; mouse_y-view_yview&gt;219-70
            &amp;&amp; mouse_y-view_yview&lt;226
            {
            menuSel=10-floor((mouse_y-view_yview-219+70)/7)
            }
            //else menuSel=0
            menuSel=min(9,menuSel)
            menuSel=max(0,menuSel)
        }else//selecting item action
        {
            if mouse_wheel_up()
            ||keyboard_check_pressed(keys[0])
                menuSel2--
            else if mouse_wheel_down()
            ||keyboard_check_pressed(keys[2])
                menuSel2++
            if mouse_x-view_xview&gt;=230
            &amp;&amp;mouse_x-view_xview&lt;270
            &amp;&amp; mouse_y-view_yview&gt;219-menuSel*7-7
            &amp;&amp; mouse_y-view_yview&lt;226-menuSel*7
            {
            menuSel2=floor((mouse_y-view_yview-219+menuSel*7+7)/7)
            }
            menuSel2=min(1,menuSel2)
            menuSel2=max(0,menuSel2)
        }
        
        if mouse_check_button_pressed(mb_left)
        ||keyboard_check_pressed(keys[4]){
            if menuSel2=-1{
                //select item
                if selected.item[menuSel]!=0{
                    menuSel2=0
                }
            }
            else//use item
            {
                if menuSel2=1{//throw
                    phase=7
                }
                else if frac(selected.item[menuSel])&gt;0{//use
                    phase=9
                }
                else message_create("No more uses")
            }
        }
    }//end phase 6 item
    else if phase=7//throw item
    {
        if mouse_check_button_pressed(mb_left)
        ||keyboard_check_pressed(keys[4])
        if (abs(xx-c.x)+abs(yy-c.y))/15&lt;=ceil((ceil(sqrt(c.stats[2,0])*2)-return_item_wt(c.item[menuSel])/2)/2){
        if !place_meeting(xx,yy,oBlock)
        &amp;&amp;ds_grid_get(gridF1,xx/15,yy/15)&gt;=0{
            var inst=instance_create(c.x,c.y,return_item_obj(c.item[menuSel]));
            inst.xx=xx
            inst.yy=yy
            inst.use=frac(c.item[menuSel])
            inst.source=c
            c.item[menuSel]=0
            c.tecg+=1
            c.xp+=4
            //turn on for no glich
            if c.wep=menuSel
                c.wep=10
            menuSel2=-1
            menuSel=0
            phase=8
            alarm[0]=30
        }else message_create("caNNot throw there")
        }else message_create("Not in raNge")
    }
    else if phase=9{//use/equip item
        var item_range=return_item_range(c.item[menuSel]);
        if item_range=0{
            alarm[0]=30
            return_item_eff(c,c)
            menuSel2=-1
            menuSel=0
            phase=8
        }
        var inst=instance_place(xx,yy,oUnit)
        var targType=return_item_targ_type(c.item[menuSel])
        if mouse_check_button_pressed(mb_left)
        ||keyboard_check_pressed(keys[4])
        if (abs(xx-c.x)+abs(yy-c.y))/15&lt;=item_range
            {
            if return_check_skill_target(c,inst,targType){
                if (targType==0){
                    inst=instance_create(xx,yy,oTempTarg);
                }
                alarm[0]=20
                return_item_eff(c,inst)
                menuSel2=-1
                menuSel=0
                phase=8
                 //skill usage range stuff   
            }else message_create("No valid target")
        }else message_create("Not in raNge")
    }
    else if phase=10{//use skill
        if menuSel2=-1{//before use skill
            if mouse_wheel_up()||
            keyboard_check_pressed(keys[0])
                menuSel++
            else if mouse_wheel_down()||
            keyboard_check_pressed(keys[2])
                menuSel--
            //change item menu selection
            if mouse_x-view_xview&gt;270
            &amp;&amp; mouse_y-view_yview&gt;219-70
            &amp;&amp; mouse_y-view_yview&lt;226
            {
            menuSel=10-floor((mouse_y-view_yview-219+70)/7)
            }
            //else menuSel=0
            menuSel=min(9,menuSel)
            menuSel=max(0,menuSel)
        }else//selecting item action
        {
            //menuSel2 for range
            
        }
        
        if mouse_check_button_pressed(mb_left)
        ||keyboard_check_pressed(keys[4]){
            if return_skill_eff(selected,noone){
            if menuSel2=-1{
                //select skill
                if selected.skill[menuSel]&gt;0{
                    menuSel2=return_skill_range(selected.skill[menuSel])
                phase=11
                }
            }
            }
            else//cant use skill
            {
                message_create("CaN't use skill")
            }
        }
    }//end skill select
    else if phase=11//use skill
    {
        var skill_range=return_skill_range(c.skill[menuSel]);
        if skill_range=0{
            alarm[0]=30
            return_skill_eff(c,c)
            menuSel2=-1
            menuSel=0
            phase=8
        }
        var inst=instance_place(xx,yy,oUnit)
        var targType=return_skill_targ_type(c.skill[menuSel])
        if mouse_check_button_pressed(mb_left)
        ||keyboard_check_pressed(keys[4])
        if (abs(xx-c.x)+abs(yy-c.y))/15&lt;=skill_range
        ||(abs(xx-c.x)/15&lt;=abs(skill_range)&amp;&amp;abs(yy-c.y)==0)
        ||(abs(yy-c.y)/15&lt;=abs(skill_range)&amp;&amp;abs(xx-c.x)==0)
            {
            if return_check_skill_target(c,inst,targType){
                if (targType==0){
                    inst=instance_create(xx,yy,oTempTarg);
                }
                alarm[0]=30
                return_skill_eff(c,inst)
                menuSel2=-1
                menuSel=0
                phase=8
                 //skill usage range stuff   
            }else message_create("No valid target")
        }else message_create("Not in raNge")
    }
}
if phase=4{//damage step
var c=selected
//var inst=instance_place(xx,yy,oUnit);
if (frac(c.item[c.wep])&gt;0
||c.wep=10
)&amp;&amp;instance_exists(target){//check to see if there are uses left
//attacking "animation"
c.ax=cos(degtorad(point_direction(selected.x+7,selected.y+7,target.x+7,target.y+7)))*5
c.ay=-sin(degtorad(point_direction(selected.x+7,selected.y+7,target.x+7,target.y+7)))*5
c.alarm[0]=6
//timer before next action
//var k=return_multi_atk(c.item[c.wep]);
if selected.draw=0
&amp;&amp; ds_grid_get(gridF1,target.x/15,target.y/15)&lt;0.2
alarm[0]=1
else
alarm[0]=max(13)
//calculate dmg
var acc=return_wep_acc(c.item[c.wep],abs(c.x-target.x)+abs(c.y-target.y));
var multi=1;
if (get_random()&lt;100*(sqrt(c.stats[2,3]*0.75+c.stats[2,4]*0.25)/sqrt(250)))
    multi*=2+(c.stats[2,3])*0.02*0.8
var dmg=return_dmg(return_wep_dmg(c.item[c.wep],c),c.stats[2,3],target.stats[2,2]);
var xpgain=3
if calculate_damage(c,target,dmg,acc,0,3,multi)&gt;0{
    //create eff
    if !(c.draw=0
    &amp;&amp; ds_grid_get(gridF1,target.x/15,target.y/15)&lt;0.2){
        var eff=instance_create(target.x+7,target.y+7,oEff);
        eff.sprite_index=return_wep_sprite_eff(c.item[c.wep])
        eff.image_angle=point_direction(c.x,c.y,target.x,target.y)
    }
    return_stat_gain(c.item[c.wep],c)
    return_wep_dur(c,1)
}
phase=5    
}
else{
    alarm[0]=1
    loop=1
    phase=5
}
}//end phase 4
else if phase=5{//before turn ends after attacking
    if loop&lt;=1{
        if selected.xp&gt;=selected.mxp
            with selected
                levelup()
    }
}//end phase 5
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#2 move controler
if menu=-1
{
if phase&lt;=0
||phase=3
||phase=7
||phase=11
||phase=9
if currentTurn&gt;=0{
xx=clamp(xx,0,room_width-15)
yy=clamp(yy,0,room_height-15)
if controler=0{
xx=floor(mouse_x/15)*15
yy=floor(mouse_y/15)*15
}
var del=4
if delay=0
{
        del=max(1,del-hold)
    if keyboard_check(keys[0]){
        yy-=15*round(dcos(-view_angle))
        xx-=15*round(dsin(-view_angle))
        controler=1
        delay=del
        hold++
        }
    else if keyboard_check_released(keys[0]){
        delay=0
    }
    if keyboard_check(keys[1]){
        xx-=15*round(dcos(-view_angle))
        yy+=15*round(dsin(-view_angle))
        controler=1
        delay=del
        hold++
        }
    else if keyboard_check_released(keys[1]){
        delay=0
    }
    if keyboard_check(keys[2]){
        yy+=15*round(dcos(-view_angle))
        xx+=15*round(dsin(-view_angle))
        controler=1
        delay=del
        hold++
        }
    else if keyboard_check_released(keys[2]){
        delay=0
    }
    if keyboard_check(keys[3]){
        xx+=15*round(dcos(-view_angle))
        yy-=15*round(dsin(-view_angle))
        controler=1
        delay=del
        hold++
        }
    else if keyboard_check_released(keys[3]){
        delay=0
    }
    if !keyboard_check(keys[0])
    if !keyboard_check(keys[1])
    if !keyboard_check(keys[2])
    if !keyboard_check(keys[3])
        hold=0
    if keyboard_check(keys[4])
    ||keyboard_check(keys[5]){
        controler=1
    }
}
else if delay&gt;0 delay--
if mouse_check_button_pressed(mb_left)
    controler=0
//view angle
if keyboard_check_pressed(keys[6])
    viewTurn--
else if keyboard_check_pressed(keys[7])
    viewTurn++
if viewTurn&lt;0
    viewTurn=3
else if viewTurn&gt;3
    viewTurn=0
}
/*if view_angle!=viewTurn*90{
if view_angle&gt;=180&amp;&amp;viewTurn=0
    view_angle-=9*sign(view_angle-360)
else
    view_angle-=9*sign(view_angle-viewTurn*90)
}*/
if view_angle&gt;=360
    view_angle=0
else if view_angle&lt;0
    view_angle=360
if abs(xx-x)&gt;1
   x+=(xx-x)/2
else
    x=xx
if abs(yy-y)&gt;1
   y+=(yy-y)/2
else
    y=yy

//select unit
if mouse_check_button_pressed(mb_left)
||keyboard_check_pressed(keys[4])
if phase=0
if selected=noone
{
    var inst=instance_place(x,y,oChar)
    if inst!=noone
    if !object_is_ancestor(inst.object_index,oObj)
    if inst.team=currentTurn
    if inst.wait=0{
        selected=inst
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#3 other things
/*ch+=0.01*udg
if ch&gt;=0.15
    udg=-1
else if ch&lt;=0
    udg=1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#4 ai
if menu=-1
if currentTurn&lt;0
{
    if selected=noone
    {
        //var ct=currentTurn
        //var c=noone
        //show_debug_message(ds_list_size(unitList))
        for (var i=0;i&lt;ds_list_size(unitList);i++){
           var char=ds_list_find_value(unitList,i)
           //show_debug_message(char.wait)
           if char!=noone
           if instance_exists(char)
           if char.wait=0{
                selected=char
                break
           }
        }
        /*with oChar{
            if team=ct
            if wait=0{
                c=id
                break
                }
        }*/
        //selected=c
        if selected!=noone{
            phase=0
            instance_activate_region(selected.x-view_wview/2,selected.y-view_hview/2,selected.x+view_wview,selected.y+view_hview,true)
            }
        else{
            check_turn_end()
            }
    }
    if selected!=noone
    if alarm_get(0)&lt;=0
    if alarm_get(3)&lt;=0
    {
    /*
    phase
    1
    3 attack
    */
    if phase=0{
        var close=noone
        var c=selected
        with (oChar){
            if team!=c.team
            if close=noone||
            abs(close.x-c.x)+abs(close.y-c.y)&gt;abs(x-c.x)+abs(y-c.y){
                close=id
                }
        }
        //following ai
        if c.ai=-1
            if instance_exists(c.link)
                close=c.link
                
        if close!=noone{
            //move towards it
             add_all_to_map()
             mp_grid_clear_cell(grid,c.x/15,c.y/15)
             mp_grid_clear_cell(grid,close.x/15,close.y/15)
            if mp_grid_path(grid,c.path,c.x+7.5,c.y+7.5,close.x+7.5,close.y+7.5,false){//checks if can move there
                //compares mac movement to how much you need to move
                if (abs(close.x-c.x)+abs(close.y-c.y))/15&gt;c.mov{//travels furthest
                    mp_grid_path(grid,c.path,c.x+7.5,c.y+7.5,path_get_point_x(c.path,c.mov),
                    path_get_point_y(c.path,c.mov),false)
                   }
                else {//travels one before target
                mp_grid_path(grid,c.path,c.x+7.5,c.y+7.5,
                    path_get_point_x(c.path,path_get_number(c.path)-2),
                    path_get_point_y(c.path,path_get_number(c.path)-2),false)
                }
                //start the path
                //see if visable or not
                if c.draw=0
                &amp;&amp; ds_grid_get(gridF1,path_get_x(c.path,1)/15,path_get_y(c.path,1)/15)&lt;0.2
                {
                    with c{
                       //path_start(path,999,path_action_stop,false)
                       x=floor(path_get_x(path,1)/15)*15
                       y=floor(path_get_y(path,1)/15)*15
                       }
                       phase=3
                       menuSel=0
                       add_all_to_map()
                   }
                else{
                    with c{
                   path_start(path,3,path_action_stop,false)
                   }
                   phase=1
                }
            }else phase=3
             
        
        }else alarm[0]=1
    }//end phase 0
    if phase=1{
        var c=selected
        if (c.path_position=1)||path_get_length(c.path)&lt;1
            ||path_get_number(c.path)&lt;1
            {
                   phase=3
                   menuSel=0
                   add_all_to_map()
            }
    }
    else if phase=3{
        var c=selected
        if (c.sp&gt;=10)
        &amp;&amp;!instance_exists(c.link)
            phase=11
        else
        {//continue attack
            var range=return_wep_range(c.item[c.wep])
            var close=noone
            //get where you can attack
                for (var i=-range*15;i&lt;=range*15;i+=15){
                    for (var j=-range*15;j&lt;=range*15;j+=15){
                    if abs(i/15)+abs(j/15)&lt;=range
                    if i!=0||j!=0{
                        var inst=instance_place(i+c.x,j+c.y,oUnit)
                        if inst!=noone
                        if !object_is_ancestor(inst.object_index,oObj)
                        if inst.team!=c.team
                        if close=noone||
                        abs(close.x-c.x)+abs(close.y-c.y)&gt;abs(inst.x-c.x)+abs(inst.y-c.y){
                            close=inst
                            }
                        }
                    }
                }//end loop
                if close=noone
                ||selected.ai=-1 {//no target
                    alarm[0]=1
                }
                else{
                    loop=return_multi_atk(selected.item[selected.wep])
                    selected.dir=floor(point_direction(selected.x+7,selected.y+7,close.x+7,close.y+7)/90)
                    target=close
                    phase=4
                }
            }
        }//end phase 3
        /*if phase=5{//before turn ends after attacking
            if loop&lt;=1{
                if selected.xp&gt;=selected.mxp
                    with selected
                        levelup()
            }
        }*/
        if phase=11//use skill
        {
            var c=selected
            menuSel=0
            var inst=instance_place(xx,yy,oUnit)
            var targType=return_skill_targ_type(c.skill[menuSel])
            if (abs(xx-c.x)+abs(yy-c.y))/15&lt;=return_skill_range(c.skill[menuSel])
            ||(abs(xx-c.x)/15&lt;=abs(return_skill_range(c.skill[menuSel]))&amp;&amp;abs(yy-c.y)==0)
            ||(abs(yy-c.y)/15&lt;=abs(return_skill_range(c.skill[menuSel]))&amp;&amp;abs(xx-c.x)==0)
                {
                if return_check_skill_target(c,inst,targType){
                    if (targType==0){
                        inst=instance_create(c.x+dcos(c.dir*90),c.y-dsin(c.dir*90),oTempTarg);
                    }
                    alarm[0]=30
                    return_skill_eff(c,inst)
                    menuSel=0
                    phase=8
                     //skill usage range stuff   
                }else alarm[0]=1//else no valid targ
            }else alarm[0]=1//else not in range
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#5 move to unit on current turn
var i=0
if currentTurn&gt;=0
if selected=noone
if mouse_check_button_pressed(mb_right)
||keyboard_check_pressed(keys[5]){
    if !ds_list_empty(unitList){
        var inst=ds_list_find_value(unitList,currentNumber)
        if xx=inst.x
        &amp;&amp; yy=inst.y{
            currentNumber++
            if currentNumber&gt;=ds_list_size(unitList)
                currentNumber=0
            inst=ds_list_find_value(unitList,currentNumber)
            x=inst.xx
            y=inst.yy
            xx=x
            yy=y
            view_xview=inst.xx-view_wview/2
            view_yview=inst.yy-view_hview/2
        }else{
            x=inst.xx
            y=inst.yy
            xx=x
            yy=y
            view_xview=inst.xx-view_wview/2
            view_yview=inst.yy-view_hview/2
        }
        /*var inst=ds_list_find_value(unitList,0)
        while(i&lt;ds_list_size(unitList)&amp;&amp;inst.wait!=0){
            i++
            inst=ds_list_find_value(unitList,i)
        }
        {
            x=inst.xx
            y=inst.yy
            xx=x
            yy=y
            view_xview=inst.xx-view_wview/2
            view_yview=inst.yy-view_hview/2
        }*/
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#5 ai debug Timer
if currentTurn=-1{
if phase=0
timePhase0++
else if phase=1
timePhase1++
else if phase=3
timePhase3++
else if phase=11
timePhase5++
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///camera movement
if keyboard_check(vk_right)//||keyboard_check(keys[7])
    //camTurnDir=1
    view_angle+=2
if keyboard_check(ord('R')){
    view_angle=0
    view_wview=360
    view_hview=240
    view_xview=xx-view_wview/2
    view_yview=yy-view_hview/2
    }
if keyboard_check(ord('N')){
    view_wview*=1.1
    view_hview*=1.1
}
if keyboard_check(ord('M')){
    view_wview/=1.1
    view_hview/=1.1
}
var io=instance_place(xx-15*dsin(view_angle),yy+15*dcos(view_angle),oObj)
if camTurnDir=0
if 1=0
if io!=noone
if io.sprite_height&gt;=26
if io.draw&gt;0{
    if xx+dsin(view_angle)&lt;x+dsin(view_angle)
    ||yy+dcos(view_angle)&lt;y+dcos(view_angle)
        camTurnDir=-1
    else //if xx&lt;x
        camTurnDir=1
}
if keyboard_check(ord('T')){
//add time
minu+=1;
if minu&gt;=6{
    minu=0;
    hour+=1
    if hour&gt;=24
        hour=0
}
}
if camTurnDir!=0
{
    view_angle+=5*camTurnDir
    if view_angle=0
    ||view_angle=90
    ||view_angle=180
    ||view_angle=270
    ||view_angle=360
    camTurnDir=0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(unitList)
ds_list_destroy(allUnits)
mp_grid_destroy(grid)
ds_grid_destroy(gridF1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw shadow
///draw shadow
/*var px=x/15
var py=y/15
var p=0
var vx=view_xview[p]/15,vy=view_yview[p]/15;
var fx=floor(view_xview[p]/15),fy=floor(view_yview[p]/15);
var vh=view_wview[p]/15,vw=view_wview[p]/15
for (var i=max(vx-3,0);i&lt;min(24+vx+2,room_width/15+1);i++)
for (var j=max(vy-7,0);j&lt;min(24+vy+1,room_height/15+1);j++){
        if ds_grid_get(gridF1,i,j)&lt;1
        {
          draw_sprite_ext(hitbox,0,fx*15+(i-vx)*15,fy*15+(j-vy)*15,1,1,0,0,0.5-ds_grid_get(gridF1,i,j))
        }
        if ds_grid_get(gridF1,i,j)&gt;0
           ds_grid_multiply(gridF1,i,j,0.70)

//ds_grid_multiply_region(gridF1,0,0,100,100,min(-1,0.95))
}
draw_sprite_ext(sprite_index,image_index,x,y,1,1,image_angle,-1,0.5)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw shadow
/*
-1 cant see
0 visited
0&lt; visable
*/
var px=x/15
var py=y/15
var p=0
var vx=view_xview[p]/15,vy=view_yview[p]/15;
var fx=floor(view_xview[p]/15),fy=floor(view_yview[p]/15);
var vh=view_hview[p]/15,vw=view_wview[p]/15-16//0
for (var i=max(vx-3,0);i&lt;min(25+ceil(vw)+vx+2,room_width/15+1);i++)
for (var j=max(vy-7,0);j&lt;min(25+ceil(vw)+vy+1,room_height/15+1);j++){
        if ds_grid_get(gridF1,i,j)&lt;1
        if debugging=0
        {
          draw_sprite_ext(hitbox,0,fx*15+(i-vx)*15,fy*15+(j-vy)*15,1,1,0,0,0.5-ds_grid_get(gridF1,i,j))
        }
        /*if ds_grid_get(gridF1,i,j)&gt;0{
           ds_grid_multiply(gridF1,i,j,0.70)
           }
        else{
            //mp_grid_add_cell(grid,i,j)
        }*/

//ds_grid_multiply_region(gridF1,0,0,100,100,min(-1,0.95))
}
if ds_grid_get(gridF1,round(xx/15),round(yy/15))&lt;=0
    draw_sprite_ext(sprite_index,image_index,x,y,1,1,image_angle,-1,1)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#2 draw info over unit
draw_set_alpha(1)
if selected!=noone
if currentTurn&gt;=0{
if phase=3{
    var c=selected
    var range=return_wep_range(c.item[c.wep])
    var inst=instance_place(xx,yy,oUnit)
    if inst!=noone
    if inst!=c
    if ds_grid_get(gridF1,round(xx)/15,round(yy)/15)&gt;0 {
    if abs(xx-c.x)/15+abs(yy-c.y)/15&lt;=range{
        draw_sprite_ext(atkInfo,0,x+7+10*dsin(view_angle),y+7-10*dcos(view_angle),1,1,-view_angle,-1,1)
        draw_set_colour(c_black)
        draw_set_halign(fa_center)
        draw_text_transformed(x+7-26*dsin(-view_angle),y+7-26*dcos(view_angle),string(floor(return_wep_acc(c.item[c.wep],abs(c.x-inst.x)+abs(c.y-inst.y))))+"%",1,1,-view_angle)
        draw_text_transformed(x+7-20*dsin(-view_angle),y+7-20*dcos(view_angle),
            return_dmg(return_wep_dmg(c.item[c.wep],c),c.stats[2,3],inst.stats[2,2]),1,1,-view_angle)
        draw_set_font(pixelBlock)
        draw_set_halign(fa_center)
        draw_set_colour(c_red)
        draw_text_transformed(x+7-37*dsin(-view_angle),y+7-37*dcos(view_angle),"attack",1,1,-view_angle)
        draw_set_halign(fa_left)
        }
    }
}
if phase=7{
    var c=selected
    var range=ceil((ceil(sqrt(c.stats[2,0])*2)-return_item_wt(c.item[menuSel])/2)/2)
    var inst=instance_place(xx,yy,oUnit)
    if inst!=noone
    if inst!=c
    if ds_grid_get(gridF1,round(xx)/15,round(yy)/15)&gt;0 {
    if abs(xx-c.x)/15+abs(yy-c.y)/15&lt;=range{
        draw_sprite_ext(atkInfo,0,x+7+10*dsin(view_angle),y+7-10*dcos(view_angle),1,1,-view_angle,-1,1)
        draw_set_colour(c_black)
        draw_set_halign(fa_center)
        draw_text_transformed(x+7-26*dsin(-view_angle),y+7-26*dcos(view_angle),string(floor(90-(abs(c.x-inst.x)+abs(c.y-inst.y))/15*5+c.stats[2,3]))+"%",1,1,-view_angle)
        draw_text_transformed(x+7-20*dsin(-view_angle),y+7-20*dcos(view_angle),ceil(return_item_wt(c.item[menuSel])+c.stats[2,0]/2),1,1,-view_angle)
        draw_set_font(pixelBlock)
        draw_set_halign(fa_center)
        draw_set_colour(c_red)
        draw_text_transformed(x+7-37*dsin(-view_angle),y+7-37*dcos(view_angle),"throw",1,1,-view_angle)
        draw_set_halign(fa_left)
        }
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#3 draw menus
///#1 draw menus
/*draw_set_font(pixelFont)
draw_set_alpha(1)
//draw_sprite(sprite_index,image_index,x-view_xview,y-view_yview)
if selected!=noone{
var c=selected
    if phase=2{
        draw_set_colour(c_ltgray)
        draw_triangle(c.x+7.5,c.y+7.5,c.x+7.5+15,c.y+7.5-23+7*menuSel,c.x+7.5+15,c.y+7.5-17+7*menuSel,false)
        for (var i=0;i&lt;4;i++){
            var tx=c.x+7.5+15
            var ty=c.y+7.5-15+7*i
            if i+1=menuSel{
                draw_sprite_ext(miniselectmenu,0,tx,ty,1,1,-view_angle,c_ltgray,1)
            }
            else{
                draw_sprite_ext(miniselectmenu,0,tx,ty,1,1,-view_angle,c_dkgray,1)
                }
            }
        draw_set_colour(c_ltgray)
            draw_set_font(pixelFont)
            switch menuSel{
                case 0:
                    draw_text_transformed(293,152,"ACTION",2,2,0)
                    draw_text_transformed(293,172,"SKILL",2,2,0)
                    draw_text_transformed(293,192,"ITEM",2,2,0)
                    draw_text_transformed(293,212,"WAIT",2,2,0)
                    break;
                case 1:
                    draw_set_colour(c_white)
                    draw_text_transformed(273,152,"ACTION",2,2,0)
                    draw_set_colour(c_ltgray)
                    draw_text_transformed(293,172,"SKILL",2,2,0)
                    draw_text_transformed(293,192,"ITEM",2,2,0)
                    draw_text_transformed(293,212,"WAIT",2,2,0)
                    break;
                case 2:
                    draw_text_transformed(293,152,"ACTION",2,2,0)
                    draw_set_colour(c_white)
                    draw_text_transformed(273,172,"SKILL",2,2,0)
                    draw_set_colour(c_ltgray)
                    draw_text_transformed(293,192,"ITEM",2,2,0)
                    draw_text_transformed(293,212,"WAIT",2,2,0)
                    infoTime=0
                    break;
                case 3:
                    draw_text_transformed(293,152,"ACTION",2,2,0)
                    draw_text_transformed(293,172,"SKILL",2,2,0)
                    draw_set_colour(c_white)
                    draw_text_transformed(273,192,"ITEM",2,2,0)
                    draw_set_colour(c_ltgray)
                    draw_text_transformed(293,212,"WAIT",2,2,0)
                    infoTime=0
                    break;
                case 4:
                    draw_text_transformed(293,152,"ACTION",2,2,0)
                    draw_text_transformed(293,172,"SKILL",2,2,0)
                    draw_text_transformed(293,192,"ITEM",2,2,0)
                    draw_set_colour(c_white)
                    draw_text_transformed(273,212,"WAIT",2,2,0)
                    break;
            }
        }//end phase 2 menu
        else if phase=6//draw item
        {
            for (var i=0;i&lt;10;i++){

                if i=menuSel{
                    draw_set_colour(c_dkgray)
                    draw_rectangle(270,220-i*7,359,226-i*7,false)
                    draw_set_colour(c_orange)
                }
                else{
                    draw_set_colour(c_ltgray)
                    draw_rectangle(270,220-i*7,359,226-i*7,false)
                    draw_set_colour(c_black)
                }
                draw_text_transformed(273,221-i*7,return_item_name(selected.item[i]),1,1,0,)
                if selected.wep=i
                {
                    draw_text(354,221-i*7,"E")
                }
            }
            draw_set_colour(c_dkgray)
            draw_rectangle(270,140,359,153,false)
            draw_set_colour(c_orange)
            draw_text_transformed(273,142,"ITEM",2,2,0)
            infoTime++
            if infoTime&gt;30
            return_item_des(selected.item[menuSel],273,221-menuSel*7)
            if menuSel2&gt;=0
            {
                if menuSel2=0{
                    draw_set_colour(c_ltgray)
                    draw_rectangle(230,219-menuSel*7,266,226-menuSel*7,false)
                    draw_set_colour(c_dkgray)
                    draw_rectangle(230,219-menuSel*7-7,266,226-menuSel*7-7,false)
                    draw_set_colour(c_orange)
                    draw_text(231,220-menuSel*7-7,return_item_usage(selected.item[menuSel],menuSel=selected.wep))
                    draw_set_colour(c_dkgray)
                    draw_text(231,221-menuSel*7,"THROW")
                }
                else{
                    draw_set_colour(c_dkgray)
                    draw_rectangle(230,219-menuSel*7,266,226-menuSel*7,false)
                    draw_set_colour(c_ltgray)
                    draw_rectangle(230,219-menuSel*7-7,266,226-menuSel*7-7,false)
                    draw_set_colour(c_dkgray)
                    draw_text(231,220-menuSel*7-7,return_item_usage(selected.item[menuSel],menuSel=selected.wep))
                    draw_set_colour(c_orange)
                    draw_text(231,221-menuSel*7,"THROW")
                }
            }
        }
        else if phase=10//draw skill
        {
            for (var i=0;i&lt;10;i++){

                if i=menuSel{
                    draw_set_colour(c_dkgray)
                    draw_rectangle(270,220-i*7,359,226-i*7,false)
                    draw_set_colour(c_orange)
                }
                else{
                    draw_set_colour(c_ltgray)
                    draw_rectangle(270,220-i*7,359,226-i*7,false)
                    draw_set_colour(c_black)
                }
                draw_text_transformed(273,221-i*7,return_skill_name(selected.skill[i]),1,1,0,)
            }
            draw_set_colour(c_dkgray)
            draw_rectangle(270,140,359,153,false)
            draw_set_colour(c_orange)
            draw_text_transformed(273,142,"SKILL",2,2,0)
            infoTime++
            if infoTime&gt;30
            return_skill_des(selected.skill[menuSel],273,221-menuSel*7)
            if menuSel2&gt;=0
            {
                
            }
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#1background
draw_background_stretched(greenBackground,0,0,room_width,room_height)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#1 draw menus
draw_set_colour(c_fuchsia)
draw_set_font(pixelFont)
draw_set_alpha(1)
//draw_text(200,10,"loop: "+string(score))
draw_text(2,10,"time: "+string(hour)+":"+string(minu)+"0")
draw_text(2,20,"turNs survived: "+string(turnsSurvive))
draw_text(2,30,string("RNG: "+string(randNum[randPos])))
draw_text(2,40,"FPS: "+string(fps))
turnTime++
draw_text(2,50,"AI Time: "+string((timePhase0+timePhase1+timePhase2
+timePhase3+timePhase4+timePhase5)/30))
draw_text(2,60,"Phase SelectiNg: "+string(timePhase0/30))
draw_text(2,70,"Phase MoviNg: "+string(timePhase1/30))
draw_text(2,80,"Phase AttackiNg: "+string(timePhase3/30))
draw_text(2,90,"Phase skill: "+string(timePhase5/30))
draw_text(2,100,"Phase : "+string(phase))
//draw_sprite(sprite_index,image_index,x-view_xview,y-view_yview)
if selected!=noone{
var c=selected
    if phase=2{
        draw_set_colour(c_dkgray)
        for (var i=0;i&lt;4;i++){
            if i+1=menuSel{
                draw_set_colour(c_dkgray)
                draw_rectangle(270,150+i*20,359,165+i*20,false)
            }
            else{
                draw_rectangle(290,150+i*20,359,165+i*20,false)
                }
            }
        draw_set_colour(c_ltgray)
            draw_set_font(pixelFont)
            switch menuSel{
                case 0:
                    draw_text_transformed(293,152,"ACTION",2,2,0)
                    draw_text_transformed(293,172,"SKILL",2,2,0)
                    draw_text_transformed(293,192,"ITEM",2,2,0)
                    draw_text_transformed(293,212,"WAIT",2,2,0)
                    break;
                case 1:
                    draw_set_colour(c_white)
                    draw_text_transformed(273,152,"ACTION",2,2,0)
                    draw_set_colour(c_ltgray)
                    draw_text_transformed(293,172,"SKILL",2,2,0)
                    draw_text_transformed(293,192,"ITEM",2,2,0)
                    draw_text_transformed(293,212,"WAIT",2,2,0)
                    break;
                case 2:
                    draw_text_transformed(293,152,"ACTION",2,2,0)
                    draw_set_colour(c_white)
                    draw_text_transformed(273,172,"SKILL",2,2,0)
                    draw_set_colour(c_ltgray)
                    draw_text_transformed(293,192,"ITEM",2,2,0)
                    draw_text_transformed(293,212,"WAIT",2,2,0)
                    infoTime=0
                    break;
                case 3:
                    draw_text_transformed(293,152,"ACTION",2,2,0)
                    draw_text_transformed(293,172,"SKILL",2,2,0)
                    draw_set_colour(c_white)
                    draw_text_transformed(273,192,"ITEM",2,2,0)
                    draw_set_colour(c_ltgray)
                    draw_text_transformed(293,212,"WAIT",2,2,0)
                    infoTime=0
                    break;
                case 4:
                    draw_text_transformed(293,152,"ACTION",2,2,0)
                    draw_text_transformed(293,172,"SKILL",2,2,0)
                    draw_text_transformed(293,192,"ITEM",2,2,0)
                    draw_set_colour(c_white)
                    draw_text_transformed(273,212,"WAIT",2,2,0)
                    break;
            }
        }//end phase 2 menu
        else if phase=6//draw item
        {
            for (var i=0;i&lt;10;i++){

                if i=menuSel{
                    draw_set_colour(c_dkgray)
                    draw_rectangle(270,220-i*7,359,226-i*7,false)
                    draw_set_colour(c_orange)
                }
                else{
                    draw_set_colour(c_ltgray)
                    draw_rectangle(270,220-i*7,359,226-i*7,false)
                    draw_set_colour(c_black)
                }
                draw_text_transformed(273,221-i*7,return_item_name(selected.item[i]),1,1,0,)
                if selected.wep=i
                {
                    draw_text(354,221-i*7,"E")
                }
            }
            draw_set_colour(c_dkgray)
            draw_rectangle(270,140,359,153,false)
            draw_set_colour(c_orange)
            draw_text_transformed(273,142,"ITEM",2,2,0)
            infoTime++
            if infoTime&gt;30
            return_item_des(selected.item[menuSel],273,221-menuSel*7)
            if menuSel2&gt;=0
            {
                if menuSel2=0{
                    draw_set_colour(c_ltgray)
                    draw_rectangle(230,219-menuSel*7,266,226-menuSel*7,false)
                    draw_set_colour(c_dkgray)
                    draw_rectangle(230,219-menuSel*7-7,266,226-menuSel*7-7,false)
                    draw_set_colour(c_orange)
                    draw_text(231,220-menuSel*7-7,return_item_usage(selected.item[menuSel],menuSel=selected.wep))
                    draw_set_colour(c_dkgray)
                    draw_text(231,221-menuSel*7,"THROW")
                }
                else{
                    draw_set_colour(c_dkgray)
                    draw_rectangle(230,219-menuSel*7,266,226-menuSel*7,false)
                    draw_set_colour(c_ltgray)
                    draw_rectangle(230,219-menuSel*7-7,266,226-menuSel*7-7,false)
                    draw_set_colour(c_dkgray)
                    draw_text(231,220-menuSel*7-7,return_item_usage(selected.item[menuSel],menuSel=selected.wep))
                    draw_set_colour(c_orange)
                    draw_text(231,221-menuSel*7,"THROW")
                }
            }
        }
        else if phase=10//draw skill
        {
            for (var i=0;i&lt;10;i++){

                if i=menuSel{
                    draw_set_colour(c_dkgray)
                    draw_rectangle(270,220-i*7,359,226-i*7,false)
                    draw_set_colour(c_orange)
                }
                else{
                    draw_set_colour(c_ltgray)
                    draw_rectangle(270,220-i*7,359,226-i*7,false)
                    draw_set_colour(c_black)
                }
                //so that you can show that skill is unusable
                var temp=menuSel
                menuSel=i
                if !return_skill_eff(selected,noone)
                    draw_set_colour(c_red)
                menuSel=temp
                
                draw_text_transformed(273,221-i*7,return_skill_name(selected.skill[i]),1,1,0,)
                draw_set_halign(fa_right)
                draw_text_transformed(356,221-i*7,return_skill_cost(selected.skill[i]),1,1,0,)
                draw_set_halign(fa_left)
                draw_set_colour(c_black)
            }
            draw_set_colour(c_dkgray)
            draw_rectangle(270,140,359,153,false)
            draw_set_colour(c_orange)
            draw_text_transformed(273,142,"SKILL",2,2,0)
            infoTime++
            if infoTime&gt;30
            return_skill_des(selected.skill[menuSel],273,221-menuSel*7)
            if menuSel2&gt;=0
            {
                
            }
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw selected unit
image_blend=c_white
var bx=0,by=0
var over=instance_place(xx,yy,oUnit);
var temp=selected
if ds_grid_get(gridF1,xx/15,yy/15)&gt;0
if selected=noone
||phase=3
||phase=7
||phase=11
if over=noone
||over.draw=1{
    selected=over;
    }
if selected!=noone
if instance_exists(selected)
if currentTurn&gt;=0
{
    var cur=selected
    image_blend=playerColour[cur.team+1];
    if object_is_ancestor(cur.object_index,oObj)
        image_blend=playerColour[10];
   draw_set_colour(c_white)
   draw_rectangle(2+bx,203,75+bx,231,false)
   draw_rectangle(76+bx,197,135+bx,231,false)
   draw_rectangle(136+bx,203,178+bx,231,false)
   draw_set_colour(c_dkgray)
   draw_rectangle(3+bx,204,74+bx,230,false)
   draw_rectangle(77+bx,198,134+bx,230,false)
   draw_rectangle(137+bx,204,177+bx,230,false)
      draw_set_colour(c_ltgray)
   draw_set_font(pixelFont)
   draw_sprite_ext(hpBar,0,5+bx,223,min((cur.xp/cur.mxp)*68,68),2.5,0,c_teal,1)
   var text="LV:"+string(cur.lv)+" "+cur.name
   draw_text(5+bx,223,text)
   draw_sprite_ext(hpBar,0,5+bx,206,68,3.5,0,c_ltgray,1)
   draw_sprite_ext(hpBar,0,5+bx,214,68,3.5,0,c_ltgray,1)
   
    with cur{
       if dmg&gt;=hp{
       draw_sprite_ext(hpBar,0,5+bx,206,(floor(dmg)/floor(mhp))*68,3.5,0,c_red,1)
       draw_sprite_ext(hpBar,0,5+bx,206,(floor(hp)/floor(mhp))*68,3.5,0,c_lime,1)}
       else{
       draw_sprite_ext(hpBar,0,5+bx,206,(floor(hp)/floor(mhp))*68,3.5,0,c_green,1)
        draw_sprite_ext(hpBar,0,5+bx,206,(floor(dmg)/floor(mhp))*68,3.5,0,c_lime,1)}
       draw_set_colour(c_black)
       draw_text(6+bx,207,"HP:"+string(floor(hp))+"/"+string(floor(mhp)));
       draw_sprite_ext(hpBar,0,5+bx,214,(floor(sp)/floor(msp))*68,3.5,0,c_blue,1)
       draw_text(6+bx,215,"SP:"+string(floor(sp))+"/"+string(floor(msp)));
       //draw other stats
       for (var i=0;i&lt;5;i++)
        draw_sprite_ext(hpBar,0,102+bx,200+i*6,(stats[2,i]/250)*26,2,0,c_white,1)
        //draw_sprite_ext(hpBar,0,102+bx,206,(luc/20)*26,2,0,c_white,1)

       draw_set_colour(c_ltgray)
       draw_text(78+bx,200,"atk:"+string(floor(stats[2,0])));
       draw_text(78+bx,206,"int:"+string(floor(stats[2,1])));
       draw_text(78+bx,212,"def:"+string(floor(stats[2,2])));
       draw_text(78+bx,218,"tec:"+string(floor(stats[2,3])));
       draw_text(78+bx,224,"luc:"+string(floor(stats[2,4])));
       //draw_text(78+bx,206,"luc:"+string(ceil(luc)));
       draw_text(138+bx,212,return_item_name(item[wep]));
       draw_text(138+bx,224,return_power());//might be changed with luck or move etc
       draw_set_colour(c_orange)
       draw_text(138+bx,206,"WEAPON");
       draw_text(138+bx,218,"POWER");
       draw_text(138+bx,190,"start "+string(xstart)+" "+string(ystart));
       draw_text(138+bx,180,"cur "+string(x)+" "+string(y));
   }
}
selected=temp
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#3 draw message
if messTimer&gt;0
{
    draw_set_font(pixelFont)
    draw_set_alpha(messTimer)
    draw_set_colour(c_dkgray)
    draw_rectangle(180-string_width(message)-8,10,180+string_width(message)+8,23,false)
    draw_set_colour(c_teal)
    draw_rectangle(180-string_width(message)-6,10,180+string_width(message)+6,23,false)
    draw_set_halign(fa_center)
    draw_set_colour(c_dkgray)
    draw_text_transformed(180,12,message,2,2,0)
    draw_set_halign(fa_left)
    messTimer-=0.1
    draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#4 draw info over unit
/*if selected!=noone
if currentTurn&gt;=0{
if phase=3{
    var c=selected
    var range=return_wep_range(c.item[c.wep])
    var inst=instance_place(xx,yy,oUnit)
    if inst!=noone
    if inst!=c{
    if abs(xx-c.x)/15+abs(yy-c.y)/15&lt;=range{
        draw_sprite(atkInfo,0,x-view_xview+view_wview-view_wport,y-4-view_yview+view_hview-view_hport)
        draw_set_colour(c_black)
        draw_text(x+1-view_xview,y-21-view_yview,string(return_wep_acc(c.item[c.wep],abs(c.x-inst.x)+abs(c.y-inst.y)))+"%")
        draw_text(x+1-view_xview,y-15-view_yview,return_wep_dmg(c.item[c.wep],c))
        draw_set_font(pixelBlock)
        draw_set_halign(fa_center)
        draw_set_colour(c_red)
        draw_text(x+8-view_xview,y-30-view_yview,"attack")
        draw_set_halign(fa_left)
        }
    }
}
if phase=7{
    var c=selected
    var range=ceil(c.str-return_item_wt(c.item[menuSel]))
    var inst=instance_place(xx,yy,oUnit)
    if inst!=noone
    if inst!=c{
    if abs(xx-c.x)/15+abs(yy-c.y)/15&lt;=range{
        draw_sprite(atkInfo,0,x-view_xview,y-4-view_yview)
        draw_set_colour(c_black)
        draw_text(x+1-view_xview,y-21-view_yview,string(90-(abs(c.x-inst.x)+abs(c.y-inst.y))/15*5+c.tec)+"%")
        draw_text(x+1-view_xview,y-15-view_yview,return_item_wt(c.item[menuSel]))
        draw_set_font(pixelBlock)
        draw_set_halign(fa_center)
        draw_set_colour(c_red)
        draw_text(x+8-view_xview,y-30-view_yview,"throw")
        draw_set_halign(fa_left)
        }
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///start menu
if menu=0{
    if keyboard_check_pressed(keys[0])
    ||keyboard_check_pressed(keys[1])
    ||keyboard_check_pressed(keys[2])
    ||keyboard_check_pressed(keys[3])
    ||keyboard_check_pressed(keys[4])
    ||keyboard_check_pressed(keys[5])
        controler=1
    
    draw_set_font(pixelBlock)
    draw_set_halign(fa_center)
    draw_set_color(c_ltgray)
    if mouse_x-view_xview&gt;120
    if mouse_x-view_xview&lt;240
    if mouse_y-view_yview&gt;160
        menuSelect=floor((mouse_y-view_yview-160)/20)
    else menuSelect=-1
    if keyboard_check_pressed(keys[2]){
        menuSelect=min(3,menuSelect+1)
        }
    else if keyboard_check_pressed(keys[0]){
        menuSelect=max(0,menuSelect-1)
        }
    draw_text_transformed(180,160,"New game",2,2,0)
    draw_text_transformed(180,180,"stats",2,2,0)
    draw_text_transformed(180,200,"optioNs",2,2,0)
    draw_text_transformed(180,220,"quit",2,2,0)
    draw_set_colour(c_white)
    switch menuSelect{
        case 0: draw_text_transformed(180,160,"-New game-",2,2,0)
            if mouse_check_button(mb_left)
            ||keyboard_check_pressed(keys[4]){
            menu=-1
            }
            break;
        case 1: draw_text_transformed(180,180,"-stats-",2,2,0)break;
        case 2: draw_text_transformed(180,200,"-optioNs-",2,2,0)break;
        case 3: draw_text_transformed(180,220,"-quit-",2,2,0)
            if mouse_check_button(mb_left)
            ||keyboard_check_pressed(keys[4])
                game_end()
            break;
    }
    draw_set_halign(fa_left)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///unit shadow
draw_set_colour(c_black)
draw_set_alpha(0.5)
with (oUnit)
{
    if draw&gt;0
    if visible
        draw_ellipse(ax+x+7-sprite_get_width(sprite_index)/2,ay+y+7-sprite_get_width(sprite_index)/2,
        ax+x+6.5+sprite_get_width(sprite_index)/2,ay+y+7+sprite_get_width(sprite_index)/2,false)
}
draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#2 draw tile and grid
draw_set_alpha(gridAlpha)
draw_set_colour(c_black)
for (var i=floor(view_yview/15)*15-15*5;i&lt;floor(view_yview/15)*15+view_wview+15;i+=15)
    draw_line(0,i-1,room_width,i-1)
for (var i=floor(view_xview/15)*15-15;i&lt;floor(view_xview/15)*15+view_wview+15;i+=15)
    draw_line(i-1,0,i-1,room_height)
draw_set_alpha(1)
//draw selected
if selected!=noone
if phase=0
if currentTurn&gt;=0{
    /*draw_set_colour(c_yellow)
    draw_set_alpha(0.5)
    draw_rectangle(selected.x,selected.y,selected.x+13,selected.y+13,false)
    draw_set_alpha(1)*/
var c=selected
var path=path_add()
mp_grid_clear_cell(grid,c.x/15,c.y/15)
//show where you can move
    for (var i=-c.mov*15;i&lt;=c.mov*15;i+=15){
        for (var j=-c.mov*15;j&lt;=c.mov*15;j+=15){
        if mp_grid_path(grid,path,c.x+7.5,c.y+7.5,c.x+i+7.5,c.y+j+7.5,false)
        if path_get_number(path)-1&lt;=c.mov{
            draw_set_colour(c_teal)
            draw_set_alpha(0.7)
            draw_rectangle(i+c.x,j+c.y,i+c.x+13,j+c.y+13,false)
            draw_set_alpha(1)
            }
        }
    }

path_delete(path)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw move dist over unit when not selecting any
if menu=-1
if currentTurn&gt;=0
if selected=noone{
    add_all_to_map()
    selected=instance_place(xx,yy,oUnit);
    if selected!=noone
    if selected.draw&gt;0{
        var c=selected
        var path=path_add()
        mp_grid_clear_cell(grid,c.x/15,c.y/15)
        //show where you can move
        //draw_set_colour(c_teal)
        //draw_set_alpha(0.5)
        var range=c.mov
        for (var i=-range*15;i&lt;=range*15;i+=15){
            for (var j=-range*15;j&lt;=range*15;j+=15){
            if mp_grid_path(grid,path,c.x+7.5,c.y+7.5,c.x+i+7.5,c.y+j+7.5,false)
            if path_get_number(path)-1&lt;=c.mov{
                draw_sprite_ext(box14x14,0,i+c.x,j+c.y,1,1,0,c_teal,0.5)
                //draw_rectangle(i+c.x,j+c.y,i+c.x+13,j+c.y+13,false)
                }
            }
        }
        //draw_set_alpha(1)
    
        path_delete(path)
    }
    selected=noone
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw where you can attack
if selected!=noone
if phase=3
if currentTurn&gt;=0{
var c=selected
var range=return_wep_range(c.item[c.wep])
//show where you can attack
    for (var i=-range*15;i&lt;=range*15;i+=15){
        for (var j=-range*15;j&lt;=range*15;j+=15){
        if abs(i/15)+abs(j/15)&lt;=range
        if i!=0||j!=0{
            draw_set_colour(c_orange)
            if place_meeting(i+c.x,j+c.y,oUnit)
                draw_set_colour(c_red)
            draw_set_alpha(0.7)
            draw_rectangle(i+c.x,j+c.y,i+c.x+13,j+c.y+13,false)
            draw_set_alpha(1)
            }
        }
    }

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw where you can throw
if selected!=noone
if phase=7
if currentTurn&gt;=0{
var c=selected
var range=ceil((ceil(sqrt(c.stats[2,0])*2)-return_item_wt(c.item[menuSel])/2)/2)
//show where you can move
    for (var i=-range*15;i&lt;=range*15;i+=15){
        for (var j=-range*15;j&lt;=range*15;j+=15){
        if abs(i/15)+abs(j/15)&lt;=range
        if !place_meeting(i+c.x,j+c.y,oObj)
        if i!=0||j!=0{
            draw_set_colour(c_orange)
            draw_set_alpha(0.7)
            draw_rectangle(i+c.x,j+c.y,i+c.x+13,j+c.y+13,false)
            draw_set_alpha(1)
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw where you can use skill
if selected!=noone
if phase=11
if currentTurn&gt;=0{
var c=selected
var range = return_skill_range(c.skill[menuSel])
var area_type= return_skill_area_type(c.skill[menuSel])
switch area_type{
    case 0: 
            for (var i=-range*15;i&lt;=range*15;i+=15){
                for (var j=-range*15;j&lt;=range*15;j+=15){
                if abs(i/15)+abs(j/15)&lt;=range
                if i!=round(xx/15)*15&amp;&amp;j!=round(yy/15)*15{
                    draw_set_colour(c_orange)
                    draw_set_alpha(0.7)
                    draw_rectangle(i+c.x,j+c.y,i+c.x+13,j+c.y+13,false)
                    draw_set_alpha(1)
                    }
                }
            }break;
    case 1:
        for (var i=range*15;i&lt;=-range*15;i+=15){
            for (var j=range*15;j&lt;=-range*15;j+=15){
            if abs(i/15)+abs(j/15)&lt;=abs(range)
            if (i==0||j==0)
            if i!=round(xx/15)*15&amp;&amp;j!=round(yy/15)*15{
                draw_set_colour(c_orange)
                draw_set_alpha(0.7)
                draw_rectangle(i+c.x,j+c.y,i+c.x+13,j+c.y+13,false)
                draw_set_alpha(1)
                }
            }
        }break;
    case 2:
        for (var i=range*15;i&lt;=-range*15;i+=15){
            for (var j=range*15;j&lt;=-range*15;j+=15){
            if (i&lt;=15&amp;&amp;i&gt;=-15)||(j&lt;=15&amp;&amp;j&gt;=-15)
            if i!=round(xx/15)*15&amp;&amp;j!=round(yy/15)*15{
                draw_set_colour(c_orange)
                draw_set_alpha(0.7)
                draw_rectangle(i+c.x,j+c.y,i+c.x+13,j+c.y+13,false)
                draw_set_alpha(1)
                }
            }
        }break;
    }//end switch
    draw_skill_area_type(c.skill[menuSel],xx,yy,c)
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw where you can use item
if selected!=noone
if phase=9
if currentTurn&gt;=0{
var c=selected
var range = return_item_range(c.item[menuSel])
var area_type= 0
switch area_type{
    case 0: 
            for (var i=-range*15;i&lt;=range*15;i+=15){
                for (var j=-range*15;j&lt;=range*15;j+=15){
                if abs(i/15)+abs(j/15)&lt;=range
                if i!=round(xx/15)*15&amp;&amp;j!=round(yy/15)*15{
                    draw_set_colour(c_orange)
                    draw_set_alpha(0.7)
                    draw_rectangle(i+c.x,j+c.y,i+c.x+13,j+c.y+13,false)
                    draw_set_alpha(1)
                    }
                }
            }break;
    }//end switch
    //draw_skill_area_type(1,xx,yy,c)
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///last
draw_self()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debugging, make objects
debugObj=clamp(debugObj,0,5)
if keyboard_check_pressed(ord('K'))
    randPos++
else if keyboard_check_pressed(ord('L'))
    randPos--
if randPos&gt;999
    randPos=0
if randPos&lt;0
    randPos=999
if keyboard_check_pressed(vk_up)
    debugObj++
if keyboard_check_pressed(vk_down)
    debugObj--
if keyboard_check(vk_left)//||keyboard_check(keys[6])
    view_angle-=2
    //camTurnDir=-1
var obj=noone
switch debugObj{
    case 1:
        obj=oSlime
        break
    case 2:
        obj=oLamppost
        break
    case 3:
        obj=oRecyclingBin
        break
    case 4:
        obj=oTree
        break
    case 5:
        obj=oBench
        break
}
if obj!=noone{
draw_sprite_ext(object_get_sprite(obj),0,x+7,y+7,1,1,-view_angle,-1,0.5)
if keyboard_check_pressed(vk_enter){
    instance_create(x,y,obj)
    var temp=instance_create(x,y,oEff);
    temp.sprite_index=spawn_eff
    }
}
if keyboard_check_pressed(vk_backspace)
{
    var inst=instance_place(x,y,oObj)
    if inst!=noone
        with inst
            instance_destroy()
}

//cnage grid apha
if keyboard_check_pressed(ord('O'))
if gridAlpha&gt;0
    gridAlpha-=0.1
if keyboard_check_pressed(ord('P'))
if gridAlpha&lt;1
    gridAlpha+=0.1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="48">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if debugging=1
    debugging=0
else
    debugging=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
