<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>cruser</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed=0.1
var width=room_width/15;
var height=room_height/15;
map=ds_grid_create(width,height)
level = 1
playerColour[1]=c_lime
playerColour[2]=c_red
playerColour[3]=c_blue
playerColour[0]=c_blue
window_set_size(360*3,240*3+3)
playerMax=2
playerMin=0

logVisable=0
for (var i=0;i&lt;20;i++)
    log[i]=""

window_set_cursor( cr_none)

for (var i=0;i&lt;playerMax;i++){
    unitSelect[i]=0
    unitFace[i]=0
    unitWep[i]=0
    hp[i]=0
    sp[i]=0
    a[i]=0
    int[i]=0
    d[i]=0
    t[i]=0
    l[i]=0
    }

hit=0
gridAlpha=0.1
miss=0
cur=0
hold=0
delay=0
viewTurn=0
turnTime=0
timePhase0=0//selecting
timePhase1=0//moving
timePhase3=0//to attack
timePhase4=0//attacking 1
timePhase5=0//attacking 2
timePhase8=0//using skill
timePhase11=0//skill
currentNumber=0
globalvar pixelFont,pixelBlock;
pixelFont=font_add_sprite_ext(letters,"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.?![]()/\&lt;&gt;:-+'%",true,1)
pixelBlock=font_add_sprite_ext(lettersBlock,"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.?![]()/\&lt;&gt;:-+'%",true,1)
unitList=ds_list_create()
allUnits=ds_list_create()
aiTurns=ds_map_create()
//mapped to -1 is ai
ds_map_add(aiTurns,0,0)
ds_map_add(aiTurns,1,-1)
ds_map_add(aiTurns,2,-1)
allyMatrix=ds_grid_create(3,3)
ds_grid_clear(allyMatrix,0)
// 0 = netrual , -1 = enemy, 1 = ally
//0 = player 1
//1 = enemy
//2 = allies
allyMatrix[# 0,2]=-1
allyMatrix[# 2,0]=-1

allyMatrix[# 1,2]=-1
allyMatrix[# 2,1]=-1
xx=x
yy=y

//info stuff
ix=-1
iy=-1
itext=""

controler=0
camTurnDir=0
eventScene=0
selected=noone
eventOver=noone
keys[0]=ord('W')
keys[1]=ord('A')
keys[2]=ord('S')
keys[3]=ord('D')
keys[4]=ord('F')
keys[5]=ord('G')
keys[6]=ord('Q')
keys[7]=ord('E')
display_set_gui_size(360,240);
globalvar grid;
grid = mp_grid_create(0,0,(room_width)/15+2,(room_height)/15+1,15,15);
//used to determain what actions you can take
phase=0
menuSel=0
menuSel2=-1
loop=0
//ai
priorityLimit=-1
option=0

currentTurn=0
turnsSurvive=0
gridF1= ds_grid_create((room_width)/15+1,(room_height)/15+1);
ds_grid_clear(gridF1,-1)
gridF2= ds_grid_create((room_width)/15+1,(room_height)/15+1);
ds_grid_clear(gridF2,-1)
infoTime=0
target=noone
globalvar hour,minu;//1 turn = 10 min
hour=7
minu=0

globalvar randNum,randPos;
randPos=0;
for (var i=0;i&lt;1000;i++){
    randNum[i]=irandom(99)
}
//for sprite idle
globalvar udg,ch;
udg=1
ch=0
var inst,inst2;
/*
inst=instance_create(x,y,oFighter);
ds_list_add(unitList,inst)
xx=inst.xx
yy=inst.yy
view_xview=inst.xx-view_wview/2
view_yview=inst.yy-view_hview/2
//inst.xp=100
inst=instance_create(x+15,y,oArcher);
ds_list_add(unitList,inst)
inst=instance_create(x+15,y+15,oHealer);
ds_list_add(unitList,inst)
inst=instance_create(x,y+15,oMage);
ds_list_add(unitList,inst)*/
//inst=instance_create(x,y,oCampfire);
//inst.ai=0 
var sx=15;
var sy=15;
/*inst=instance_create(x-15*sx,y+15*sy,oMerchant)
inst.team=1
inst.ai=5
inst.xp=40
inst.marker=2
inst2=instance_create(x-15*(sx+1),y+15*sy,oHealer)
inst2.team=1
inst2.ai=3
inst2.link=inst
inst2.xp=40
inst2=instance_create(x-15*(sx+2),y+15*sy,oFighter)
inst2.team=1
inst2.ai=4
inst2.link=inst
inst2.xp=40
/*
inst=instance_create(x+15*36,y-15*17,oDragon1)
inst.team=2
inst.marker=1

create_boss_area(x-15*20,y-15*15,0,0)
inst=instance_create(x-15*19,y-12*15,oWurm)
inst.team=2
inst.ai=1
inst.marker=1
inst.dir=3
for(var i=1;i&lt;=2;i++){
inst2=instance_create(x-(19)*15,y-(12+1)*15,oWurm)
inst2.team=2
inst2.ai=-1
inst2.link=inst
inst=inst2
}
for(var i=0;i&lt;=6;i++){
inst2=instance_create(x-(19-i)*15,y-(14)*15,oWurm)
inst2.team=2
inst2.ai=-1
inst2.link=inst
inst=inst2
}
create_city_dungeon(x+15*12,y+15*10)
add_all_to_map()
show_debug_overlay(true)*/
/*
for (var i=0;i&lt;ds_list_size(unitList);i++){
    selected=ds_list_find_value(unitList,i)
    update_fog()
}selected=noone*/
alarm[9]=1//activation cycle
//update_view_zone()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///random stuff
//buildings
/*repeat(500){
var rx=irandom(room_width/15)//room_width/15);
var ry=irandom(room_height/15)//room_height/15);
if !place_meeting(rx*15,ry*15,oUnit)
    {
    instance_create(rx*15,ry*15,choose(oBuilding,oLamppost,oRecyclingBin,
    oBenchr,oBenchu,oBenchl,oBenchd))
    }    
}*/
//enemies

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///menu stuff
menu=0
menuSelect=0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debugging
globalvar debugging;
global.production=0
debugging=0
debugObj=0
debug1=0;
if global.production=1
    randomize()
else
    {
    show_debug_overlay(1)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check end turn
if selected=noone{
phase=0
selected=noone
update_fog()
check_turn_end()
add_all_to_map()
}
//alarm[10]=30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///activate things
instance_deactivate_all(true)
instance_activate_region(xx-15-view_wview/2,yy+view_hview/2-view_wview/2-15,view_wview+30,view_wview+30,true)
instance_activate_region(view_xview-15,view_yview+view_hview/2-view_wview/2-15,view_wview+30,view_wview+30,true)
if selected!=noone
    instance_activate_region(selected.x-15-view_wview/2,selected.y+view_hview/2-view_wview/2-15,view_wview+30,view_wview+30,true)

/*
    instance_deactivate_all(true)
instance_activate_region(xx-view_wview,yy-view_wview,view_wview*2,view_wview*2,true)
instance_activate_region(view_xview-view_wview,view_yview-view_wview,view_wview*2,view_wview*2,true)
if selected!=noone
    instance_activate_region(selected.x-view_wview,selected.y-view_wview,view_wview*2,view_wview*2,true)
*/
//alarm[8]=1*/
alarm[9]=2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check turn end
with selected{
    wait=1
    hpg+=(abs(xx-x)+abs(yy-y))*0.05
    spg+=(abs(xx-x)+abs(yy-y))*0.05
    //xp+=ceil((abs(xx-x)+abs(yy-y))/10)
    xx=x
    yy=y
    if xp&gt;=mxp
        levelup()
    }
    phase=0
    selected=noone
    update_fog()
    check_turn_end()
    add_all_to_map()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///end normal
/*instance_activate_all()
    alarm[9]=3
    alarm[4]=2*/
instance_activate_all()
with selected{
wait=1
hpg+=0.01
spg+=0.01
xx=x
yy=y
if xp&gt;=mxp
    levelup()
}
phase=0
update_fog()
selected=noone
check_turn_end()
add_all_to_map()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//end turn pick up item
if selected!=noone{
var inst=instance_place(selected.x,selected.y,oItem)
if inst!=noone
{
    var space=0
    while space&lt;10{
        if selected.item[space]=0{
        with selected{
                item[space]=inst.item
                item[space]+=inst.use
            }
            message_create("obtaiN "+return_item_name(inst.item+inst.use))
            alarm[2]=15
            with inst
                instance_destroy()
            break;
        }
        else space++
    }
    if space=10
        alarm[3]=10

}
else{
    with selected{
    wait=1
    xx=x
    yy=y
    if xp&gt;=mxp
        levelup()
    }
    phase=0
    selected=noone
    update_fog()
    check_turn_end()
    add_all_to_map()
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//end item throw
with selected{
wait=1
tecg+=1
//hpg+=0.05
//spg+=0.05
//xp+=1
xx=x
yy=y
if xp&gt;=mxp
    levelup()
}
phase=0
selected=noone
update_fog()
check_turn_end()
add_all_to_map()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///end turn
if phase=5{
loop--
if frac(selected.item[selected.wep])=0
    loop=0
if loop&gt;0
    phase=4
}
if phase!=4
if selected!=noone{
    var inst=instance_place(selected.x,selected.y,oItem)
    if inst!=noone
    {
    var space=1
    while space&lt;array_length_1d(selected.item){
        if selected.item[space]=0{
        with selected{
                item[space]=inst.item
                item[space]+=inst.use
            }
            if ds_map_find_value(aiTurns, currentTurn)&gt;=0
            message_create(selected.name+" obtain "+return_item_name(inst.item+inst.use))
            alarm[0]=15
            with inst
                instance_destroy()
            break;
        }
        else space++
    }
    //if space=10
    //    alarm[3]=10

    }
    //else
    if inst=noone||space=array_length_1d(selected.item){
    //instance_activate_all()
    //alarm[9]=3
    //alarm[4]=2
    with selected{
    wait=1
    hpg+=0.1
    spg+=0.1
    //xp+=ceil((abs(xx-x)+abs(yy-y))/10)
    xx=x
    yy=y
    if xp&gt;=mxp
        levelup()
    }
    phase=0
    instance_activate_all()
    update_fog()
    selected=noone
    check_turn_end()
    add_all_to_map()
    }
}
//for ai
priorityLimit=-1
option=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#1 move to unit on current turn
var i=0
if !eventScene
if menu=-1
if ds_map_find_value(aiTurns, currentTurn)&gt;=0
if selected=noone
if mouse_check_button_pressed(mb_right)
||keyboard_check_pressed(keys[5]){
    if !ds_list_empty(unitList){
        var inst=ds_list_find_value(unitList,currentNumber)
        instance_activate_object(inst)
        if instance_exists(inst)
        {
            if xx=inst.x
            &amp;&amp; yy=inst.y{
                currentNumber++
                if currentNumber&gt;=ds_list_size(unitList)
                    currentNumber=0
                inst=ds_list_find_value(unitList,currentNumber)
                var lim=0;
                while (lim&lt;ds_list_size(unitList)&amp;&amp;instance_exists(inst)&amp;&amp;inst.wait=1){
                    currentNumber++
                    if currentNumber&gt;=ds_list_size(unitList)
                        currentNumber=0
                    inst=ds_list_find_value(unitList,currentNumber)
                    lim++
                }
                x=inst.xx
                y=inst.yy
                xx=x
                yy=y
                view_xview=inst.xx-view_wview/2
                view_yview=inst.yy-view_hview/2
            }else{
                var lim=0;
                while (lim&lt;ds_list_size(unitList)&amp;&amp;instance_exists(inst)&amp;&amp;inst.wait=1){
                    currentNumber++
                    if currentNumber&gt;=ds_list_size(unitList)
                        currentNumber=0
                    inst=ds_list_find_value(unitList,currentNumber)
                    lim++
                }
                x=inst.xx
                y=inst.yy
                xx=x
                yy=y
                view_xview=inst.xx-view_wview/2
                view_yview=inst.yy-view_hview/2
            }
        }
        /*var inst=ds_list_find_value(unitList,0)
        while(i&lt;ds_list_size(unitList)&amp;&amp;inst.wait!=0){
            i++
            inst=ds_list_find_value(unitList,i)
        }
        {
            x=inst.xx
            y=inst.yy
            xx=x
            yy=y
            view_xview=inst.xx-view_wview/2
            view_yview=inst.yy-view_hview/2
        }*/
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#2 when a unit is selected
if selected!=noone
if menu=-1
{
if ds_map_find_value(aiTurns, currentTurn)&gt;=0{
    //instance_deactivate_all(true)
    instance_activate_region(view_xview,view_yview,view_wview,view_hview,true)
    instance_activate_region(selected.x-view_wview/2,selected.y-view_hview/2,view_wview,view_hview,true)
    var c=selected
    if c.mov&lt;=0
    if phase=0
        phase=2
    //movement
    if mouse_check_button_pressed(mb_left)
    ||keyboard_check_pressed(keys[4])
    if phase=0
    {
    {
        add_all_to_map()
        mp_grid_clear_cell(grid,c.x/15,c.y/15)
            if mp_grid_get_cell(grid,xx/15,yy/15)=0
            {
            if (mp_grid_path(grid,c.path,c.x+7.5,c.y+7.5,xx+7.5,yy+7.5,false)
            &amp;&amp;ds_grid_get(gridF1,xx/15,yy/15)&gt;=0)  
            ||(c.x==xx&amp;&amp;c.y==yy)
                {
    
                if c.mov&gt;=path_get_number(c.path)-1{
                    //check to snap to grid
                   with c{
                       path_start(path,3,path_action_stop,false)
                       }
                   phase=1
                   }else message_create("too far")           
               }
               else message_create("caNNot move there")
            }else message_create("caNNot move there")
        }
    }


    if mouse_check_button_pressed(mb_right)
    ||keyboard_check_pressed(keys[5]){
        if phase!=0{
        view_xview=c.x-view_wview/2
        view_yview=c.y-view_hview/2
        }
        if phase=0{
            phase=0
            add_all_to_map()
            xx=selected.xx
            yy=selected.yy
            selected=noone
            }
        else if phase=2{
            with selected{
            x=xx
            y=yy
            xprevious=x
            yprevious=y
            view_xview=x-view_wview/2
            view_yview=y-view_hview/2
            }
            phase=0
            xx=selected.xx
            yy=selected.yy
            add_all_to_map()
            if selected.mov&lt;=0
                selected=noone
        }
        else if phase=3{
            phase=2
            xx=c.x
            yy=c.y
            }
        else if phase=6{
            if menuSel2=-1{
                phase=2
                xx=c.x
                yy=c.y
                menuSel=3
                }
            else menuSel2=-1
        }
        else if phase=7{
            xx=c.x
            yy=c.y
            phase=6
        }
        else if phase=9{
            phase=6
            xx=c.x
            yy=c.y
            view_xview=c.x-view_wview/2
            view_yview=c.y-view_hview/2
        }
        else if phase=10{
            if menuSel2=-1{
                phase=2
                xx=c.x
                yy=c.y
                menuSel=2
                }
            else menuSel2=-1
        }else if phase=11{
            menuSel2=-1
            phase=10
            xx=c.x
            yy=c.y
            view_xview=c.x-view_wview/2
            view_yview=c.y-view_hview/2
        }else if phase=12{//shop phase
            if menuSel2=-1{  
                phase=8
                alarm[0]=2
                xx=c.x
                yy=c.y
            }
            else menuSel2=-1
        }
    }
    
    if phase=1{
    if (c.path_position=1)||path_get_length(c.path)&lt;1
        ||path_get_number(c.path)&lt;1
        {
               phase=2
               menuSel=0
               add_all_to_map()
        }
        menuSel=0
    }
    //unit menu
    else if phase=2{
        //menuSel=0
        var menuOp;
        menuOp[0]=4
        //add menu options
        //action option
        if check_inventory_space(c)&gt;0{
            menuOp[array_length_1d(menuOp)]=3
            if keyboard_check(keys[1])
                menuSel=3
            }
        if check_skill_space(c)&gt;0{
            menuOp[array_length_1d(menuOp)]=2
            if keyboard_check(keys[3])
                menuSel=2
            }
        if return_unit_in_range(c,return_wep_range(c.item[c.wep]),0)!=noone{
            menuOp[array_length_1d(menuOp)]=1
            if keyboard_check(keys[0])
                menuSel=1
            }
        if keyboard_check(keys[2])
            menuSel=4   
        view_xview=c.x-view_wview/2
        view_yview=c.y-view_hview/2

        //change base menu selection
        if controler=0{
            /*if mouse_wheel_up()
            ||keyboard_check_pressed(keys[0])
                menuSel++
            else if mouse_wheel_down()
            ||keyboard_check_pressed(keys[2])
                menuSel--
                
            if mouse_x-view_xview&gt;270
            &amp;&amp; mouse_y-view_yview&gt;150
            &amp;&amp; mouse_y-view_yview&lt;165+60
            {
            menuSel=4-floor((mouse_y-view_yview-150)/20)//+array_length_1d(menuOp)
            }*/
            if abs(angle_difference(point_direction(c.x+7,c.y+7,mouse_x,mouse_y)+view_angle,90))&lt;45
                menuSel=1
            else if abs(angle_difference(point_direction(c.x+7,c.y+7,mouse_x,mouse_y)+view_angle,0))&lt;45
            ||abs(angle_difference(point_direction(c.x+7,c.y+7,mouse_x,mouse_y)+view_angle,360))&lt;45
                menuSel=2
            else if abs(angle_difference(point_direction(c.x+7,c.y+7,mouse_x,mouse_y)+view_angle,180))&lt;45
                menuSel=3
            else
                menuSel=4
            if point_distance(c.x+7,c.y+7,mouse_x,mouse_y)&lt;15
                menuSel=0
        }
        
        //else menuSel=0
        /*if menuSel&lt;1
            menuSel=array_length_1d(menuOp)
        else if menuSel&gt;array_length_1d(menuOp)
            menuSel=1*/
        //menuSel=min(4,menuSel)
        //menuSel=max(1,menuSel)
        //when chosen a selection
        if mouse_check_button_pressed(mb_left)
        ||keyboard_check_pressed(keys[4])
        if menuSel&gt;0{
            switch menuSel{//menuOp[menuSel-1]{
                case 1:phase=3;delay=4;break;
                case 2:phase=10 menuSel=0 break
                case 3:phase=6 menuSel=1 break;
                case 4:
                    phase=2.1
                    alarm[0]=5
                    break;
            }        
        }
    }//end phase 2
    else if phase=3{//attack    
        var inst=instance_place(xx,yy,oUnit)
        if inst!=noone
        if inst!=selected{
            if mouse_check_button_pressed(mb_left)
            ||keyboard_check_pressed(keys[4]){
                if (abs(xx-c.x)+abs(yy-c.y))/15&lt;=return_wep_range(c.item[c.wep]){
                    {
                        if (inst.marker==2||inst.team=c.team)&amp;&amp;(abs(xx-c.x)+abs(yy-c.y))/15&lt;=1{
                            phase=12
                            menuSel=0
                            menuSel2=-1
                            eventOver=inst;
                        }
                        else if inst.combat&lt;=0&amp;&amp;allyMatrix[# inst.team,c.team]=0&amp;&amp;!object_is_ancestor(inst.object_index,oObj)&amp;&amp;(abs(xx-c.x)+abs(yy-c.y))/15&lt;=1{
                            inst.team=c.team
                            inst.wait=1
                            ds_list_add(unitList,inst)
                            phase=8
                            alarm[0]=2
                            menuSelect=1
                        }
                        else{
                            phase=4
                            loop=return_multi_atk(c.item[c.wep])
                            selected.dir=floor(point_direction(selected.x+7,selected.y+7,inst.x+7,inst.y+7)/90)
                            target=inst
                        }
                    }
                }else message_create("Not iN raNge")
            }
        }
    }//end phase 3
    //phase 4 and 5 was here
    else if phase=6{//item
        var maxItem=array_length_1d(selected.item);
        if menuSel2=-1{//before select item
            if mouse_wheel_up()||
            keyboard_check_pressed(keys[0])
                menuSel++
            else if mouse_wheel_down()||
            keyboard_check_pressed(keys[2])
                menuSel--
            //change item menu selection
            if controler=0
            /*if mouse_x-view_xview&gt;270
            &amp;&amp; mouse_y-view_yview&gt;219-70
            &amp;&amp; mouse_y-view_yview&lt;226*/
            {
            menuSel=floor((180-(point_direction(c.x+7,c.y+7,mouse_x,mouse_y)+view_angle))/(15))
            //maxItem-floor((mouse_y-view_yview-219+70)/7)
            }
            //else menuSel=0
            menuSel=clamp(menuSel,1,maxItem-1)
        }else//selecting item action
        {
            if mouse_wheel_up()
            ||keyboard_check_pressed(keys[0])
                menuSel2--
            else if mouse_wheel_down()
            ||keyboard_check_pressed(keys[2])
                menuSel2++
            if controler=0
            {
            menuSel=floor((180-(point_direction(c.x+7,c.y+7,mouse_x,mouse_y)+view_angle))/(15))
            }
            menuSel2=clamp(menuSel2,1,0)
        }
        
        if mouse_check_button_pressed(mb_left)
        ||keyboard_check_pressed(keys[4]){
            if menuSel2=-1{
                //select item
                if selected.item[menuSel]!=0{
                    menuSel2=0
                }
            }
            else//use item
            {
                if menuSel2=1{//throw
                    phase=7
                }
                else if frac(selected.item[menuSel])&gt;0{//use
                    phase=9
                }
                else message_create("No more uses")
            }
        }
    }//end phase 6 item
    else if phase=7//throw item
    {
        if mouse_check_button_pressed(mb_left)
        ||keyboard_check_pressed(keys[4])
        if (abs(xx-c.x)+abs(yy-c.y))/15&lt;=ceil((ceil(sqrt(c.stats[2,0])*2)-return_item_wt(c.item[menuSel])/2)/2){
        if !place_meeting(xx,yy,oBlock)
        &amp;&amp;ds_grid_get(gridF1,xx/15,yy/15)&gt;=0{
            var inst=instance_create(c.x,c.y,return_item_obj(c.item[menuSel]));
            inst.xx=xx
            inst.yy=yy
            inst.use=frac(c.item[menuSel])
            inst.source=c
            c.item[menuSel]=0
            c.tecg+=1
            c.xp+=4
            //turn on for no glich
            if c.wep=menuSel
                c.wep=0
            menuSel2=-1
            menuSel=0
            phase=8
            alarm[0]=30
        }else message_create("caNNot throw there")
        }else message_create("Not iN raNge")
    }
    else if phase=9{//use/equip item
        var item_range=return_item_range(c.item[menuSel]);
        if item_range=0{
            alarm[0]=30
            return_item_eff(c,c)
            menuSel2=-1
            menuSel=0
            phase=8
        }
        var inst=instance_place(xx,yy,oUnit)
        var targType=return_item_targ_type(c.item[menuSel])
        if mouse_check_button_pressed(mb_left)
        ||keyboard_check_pressed(keys[4])
        if (abs(xx-c.x)+abs(yy-c.y))/15&lt;=item_range
            {
            if return_check_skill_target(c,inst,targType){
                if (targType==0){
                    inst=instance_create(xx,yy,oTempTarg);
                }
                alarm[0]=20
                return_item_eff(c,inst)
                menuSel2=-1
                menuSel=0
                phase=8
                 //skill usage range stuff   
            }else message_create("No valid target")
        }else message_create("Not iN raNge")
    }
    else if phase=10{//use skill
    var maxSkill=array_length_1d(selected.skill)
        if menuSel2=-1{//before use skill
            if mouse_wheel_up()||
            keyboard_check_pressed(keys[0])
                menuSel++
            else if mouse_wheel_down()||
            keyboard_check_pressed(keys[2])
                menuSel--
            //change item menu selection
            if controler=0
            /*if mouse_x-view_xview&gt;270
            &amp;&amp; mouse_y-view_yview&gt;219-70
            &amp;&amp; mouse_y-view_yview&lt;226*/
            {
            menuSel=floor(((point_direction(c.x+7,c.y+7,mouse_x,mouse_y)+view_angle))/(15))
           // menuSel=maxSkill-floor((mouse_y-view_yview-219+70)/7)
            }
            //else menuSel=0
            menuSel=clamp(menuSel,0,maxSkill-1)
        }else//selecting item action
        {
            //menuSel2 for range
            
        }
        
        if mouse_check_button_pressed(mb_left)
        ||keyboard_check_pressed(keys[4])
        {
            if return_skill_eff(selected,noone){
            if menuSel2=-1{
                //select skill
                if selected.skill[menuSel]&gt;0{
                    menuSel2=return_skill_range(selected.skill[menuSel])
                phase=11
                }
            }
            }
            else//cant use skill
            {
                message_create("CaN't use skill")
            }
        }
    }//end skill select
    else if phase=11//use skill
    {
        var skill_range=return_skill_range(c.skill[menuSel]);
        /*if skill_range=0{
            alarm[0]=30
            return_skill_eff(c,c)
            menuSel2=-1
            menuSel=0
            phase=8
        }*/
        var inst=instance_place(xx,yy,oUnit)
        var targType=return_skill_targ_type(c.skill[menuSel])
        if mouse_check_button_pressed(mb_left)
        ||keyboard_check_pressed(keys[4]){
        if ds_grid_get(gridF1,xx/15,yy/15)&gt;=0 
            {
                if (abs(xx-c.x)+abs(yy-c.y))/15&lt;=skill_range
                ||(abs(xx-c.x)/15&lt;=abs(skill_range)&amp;&amp;abs(yy-c.y)==0)
                ||(abs(yy-c.y)/15&lt;=abs(skill_range)&amp;&amp;abs(xx-c.x)==0)
                    {
                    if return_check_skill_target(c,inst,targType){
                        if (targType==0)
                        ||targType==4{
                            inst=instance_create(xx,yy,oTempTarg);
                        }
                        alarm[0]=30
                        return_skill_eff(c,inst)
                        menuSel2=-1
                        menuSel=0
                        phase=8
                         //skill usage range stuff   
                    }else message_create("No valid target")
                }else message_create("Not iN raNge")
            }else message_create("No target")
        }
    }
    else if phase==12{//shop phase
        var maxItem=array_length_1d(selected.item)
        var shopItem=array_length_1d(eventOver.item)
        if menuSel2=-1{
            if mouse_wheel_up()||
            keyboard_check_pressed(keys[0])
                menuSel++
            else if mouse_wheel_down()||
            keyboard_check_pressed(keys[2])
                menuSel--
            //change item menu selection
            /*if mouse_x-view_xview&gt;270
            &amp;&amp; mouse_y-view_yview&gt;219-70
            &amp;&amp; mouse_y-view_yview&lt;226*/
            if controler=0
            {
            menuSel=floor(((point_direction(c.x+7,c.y+7,mouse_x,mouse_y)+view_angle))/(15))
            //menuSel=shopItem-floor((mouse_y-view_yview-219+70)/7)
            }
            //else menuSel=0
            menuSel=clamp(menuSel,1,shopItem-1)
            //get item
            if mouse_check_button_pressed(mb_left)
            ||keyboard_check_pressed(keys[4])
            if eventOver.item[menuSel]&gt;0||(eventOver.team=selected.team){
                menuSel2=1
            }
        }else
        {//trading
            if mouse_wheel_up()||
            keyboard_check_pressed(keys[0])
                menuSel2++
            else if mouse_wheel_down()||
            keyboard_check_pressed(keys[2])
                menuSel2--
                //change item menu selection
            if controler=0
            /*if mouse_x-view_xview&gt;270-90
            &amp;&amp;mouse_x-view_xview&lt;270
            &amp;&amp; mouse_y-view_yview&gt;219-70
            &amp;&amp; mouse_y-view_yview&lt;226*/
            {
                menuSel2=floor(((point_direction(c.x+7,c.y+7,mouse_x,mouse_y)+view_angle))/(15))
                //menuSel2=maxItem-floor((mouse_y-view_yview-219+70)/7)
            }
            menuSel2=clamp(menuSel2,1,maxItem-1)
            if mouse_check_button_pressed(mb_left)
            ||keyboard_check_pressed(keys[4])
            if selected.item[menuSel2]&gt;0||(eventOver.team=selected.team){
                if menuSel2==selected.wep
                    selected.wep=0
                if menuSel2==selected.arm
                    selected.arm=0
                var temp=eventOver.item[menuSel];
                eventOver.item[menuSel]=selected.item[menuSel2]
                selected.item[menuSel2]=temp
                menuSel2=-1
            }            
        }
    }//end shop phase
}
if phase=4{//damage step
var c=selected
//var inst=instance_place(xx,yy,oUnit);
if (frac(c.item[c.wep])&gt;0
||c.wep=0
)&amp;&amp;instance_exists(target){//check to see if there are uses left
//attacking "animation"
c.ax=cos(degtorad(point_direction(selected.x+7,selected.y+7,target.x+7,target.y+7)))*5
c.ay=-sin(degtorad(point_direction(selected.x+7,selected.y+7,target.x+7,target.y+7)))*5
c.alarm[0]=6
c.dir=round(point_direction(selected.x+7,selected.y+7,target.x+7,target.y+7)/90)
//timer before next action
//var k=return_multi_atk(c.item[c.wep]);
if (selected.draw=0
&amp;&amp; ds_grid_get(gridF1,target.x/15,target.y/15)&lt;0.2)
&amp;&amp;debugging=0{
    alarm[0]=1
    }
else
    alarm[0]=max(13)
//calculate dmg
var acc=return_wep_acc(c.item[c.wep],abs(c.x-target.x)+abs(c.y-target.y),c,target);
var multi=return_wep_crit(c.item[c.wep],abs(c.x-target.x)+abs(c.y-target.y),c,target);
//if (get_random()&lt;floor(100*(sqrt(c.stats[2,3]*0.75+c.stats[2,4]*0.25)/sqrt(250))))
    //multi*=2+(c.stats[2,3])*0.02*0.8
var dmg=return_dmg(return_wep_dmg(c.item[c.wep],c,abs(c.x-target.x)+abs(c.y-target.y)),c.stats[2,3],return_wep_type(c.item[c.wep]),c,target);
var xpgain=3;
if calculate_damage(c,target,dmg,acc,return_wep_type(c.item[c.wep]),3,multi)&gt;0{
    return_wep_onhit_eff(c.item[c.wep],c,target)
    //create eff
    if (!(c.draw=0
    &amp;&amp; ds_grid_get(gridF1,target.x/15,target.y/15)&lt;0.2)
    ||debugging){
        var eff=instance_create(target.x+7,target.y+7,oEff);
        eff.sprite_index=return_wep_sprite_eff(c.item[c.wep])
        eff.image_angle=point_direction(c.x,c.y,target.x,target.y)
        eff.rotate=false
        audio_play_sound(return_wep_sound(c.item[c.wep]),50,false)
    }
    return_stat_gain(c.item[c.wep],c)  
    return_wep_dur(c,1) 
}
else{
    return_wep_dur(c,0)
    if (!(c.draw=0
    &amp;&amp; ds_grid_get(gridF1,target.x/15,target.y/15)&lt;0.2)
    ||debugging)
        audio_play_sound(sMiss,50,false)
}
phase=5    
}
else{
    alarm[0]=1
    loop=1
    phase=5
}
}//end phase 4
else if phase=5{//before turn ends after attacking
    if loop&lt;=1{
        if selected.xp&gt;=selected.mxp
            with selected
                levelup()
    }
}//end phase 5
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#3 move controler
if menu=-1
{
//NEW!
xx=floor(xx/15)*15
yy=floor(yy/15)*15
if phase&lt;=0
||phase=3
||phase=7
||phase=11
||phase=9

if ds_map_find_value(aiTurns, currentTurn)&gt;=0||
(debugging=1&amp;&amp;eventScene){
room_speed=30
xx=clamp(xx,0,room_width-15)
yy=clamp(yy,0,room_height-15)
if controler=0{
xx=floor(mouse_x/15)*15
yy=floor(mouse_y/15)*15
}
var del=4
if !eventScene||debugging=1
{
if delay=0
{
        del=max(1,del-hold)
    if keyboard_check(keys[0]){
        yy-=15*round(dcos(-view_angle))
        xx-=15*round(dsin(-view_angle))
        controler=1
        delay=del
        hold++
        audio_play_sound(sMoveCruser,50,false)
        }
    else if keyboard_check_released(keys[0]){
        delay=0
    }
    if keyboard_check(keys[1]){
        xx-=15*round(dcos(-view_angle))
        yy+=15*round(dsin(-view_angle))
        controler=1
        delay=del
        hold++
        audio_play_sound(sMoveCruser,50,false)
        }
    else if keyboard_check_released(keys[1]){
        delay=0
    }
    if keyboard_check(keys[2]){
        yy+=15*round(dcos(-view_angle))
        xx+=15*round(dsin(-view_angle))
        controler=1
        delay=del
        hold++
        audio_play_sound(sMoveCruser,50,false)
        }
    else if keyboard_check_released(keys[2]){
        delay=0
    }
    if keyboard_check(keys[3]){
        xx+=15*round(dcos(-view_angle))
        yy-=15*round(dsin(-view_angle))
        controler=1
        delay=del
        hold++
        audio_play_sound(sMoveCruser,50,false)
        }
    else if keyboard_check_released(keys[3]){
        delay=0
    }
    if !keyboard_check(keys[0])
    if !keyboard_check(keys[1])
    if !keyboard_check(keys[2])
    if !keyboard_check(keys[3])
        hold=0
    if keyboard_check(keys[4])
    ||keyboard_check(keys[5]){
        controler=1
    }
}
else if delay&gt;0 delay--
}
if mouse_check_button_pressed(mb_left)
    controler=0
//view angle
}
if global.production=0{
if keyboard_check_pressed(keys[6])
    viewTurn--
else if keyboard_check_pressed(keys[7])
    viewTurn++
}

if view_angle!=viewTurn*90
    view_angle-=9*sign(view_angle-viewTurn*90)

if view_angle&gt;360&amp;&amp;viewTurn*90&gt;360{
    view_angle=0
    viewTurn=1
    }
else if view_angle&lt;0&amp;&amp;viewTurn&lt;0{
    view_angle=360
    viewTurn=3
    }
if abs(xx-x)&gt;1
   x+=(xx-x)/2
else
    x=xx
if abs(yy-y)&gt;1
   y+=(yy-y)/2
else
    y=yy

//select unit
if mouse_check_button_pressed(mb_left)
||keyboard_check_pressed(keys[4])
if phase=0
if selected=noone
if !eventScene
{
    var inst=instance_place(x,y,oChar)
    if inst!=noone
    if !object_is_ancestor(inst.object_index,oObj)
    if inst.team=currentTurn
    if inst.wait=0{
        selected=inst
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#4 ai
//speed up game
/*if ds_map_find_value(aiTurns, currentTurn)&lt;0
room_speed=1000
else
room_speed=30
*/
if ds_map_find_value(aiTurns, currentTurn)&lt;0
if menu=-1
//if alarm_get(0)&lt;=0
//if alarm_get(3)&lt;=0
//if alarm_get(9)=2
{
    if selected=noone
    if !eventScene
    {
        //var ct=currentTurn
        //var c=noone
        //show_debug_message(ds_list_size(unitList))
        instance_activate_all()
        for (var i=0;i&lt;ds_list_size(unitList);i++){
           var char=ds_list_find_value(unitList,i)
           //show_debug_message(char.wait)
           if char!=noone
           if instance_exists(char)
           if char.wait=0
           if char.hp&gt;0{
           if !instance_exists(char.link)||char.link.wait=1
           {
           // show_debug_message(object_get_name(char.object_index))
                selected=char
                //break
           }
           }
        }
        instance_deactivate_all(true)
        alarm[9]=2
        /*with oChar{
            if team=ct
            if wait=0{
                c=id
                break
                }
        }*/
        //selected=c
        if selected!=noone{
            var c=selected
            if !debugging{
            if selected.draw=0
                room_speed=1000
            else
                room_speed=30
            }
            else room_speed=30
            
            if selected.mov&gt;0
            phase=0
            else{ 
                phase=3
                if !ds_grid_get(gridF1,selected.x/15,selected.y/15)&lt;0.2||debugging=1
                if (selected.x&lt;view_xview+15*3
                || selected.x&gt;view_xview+view_wview-15*3
                || selected.y&lt;view_yview+15*3
                || selected.y&gt;view_yview+view_hview-15*3)
                //||debugging=1
                {
                    xx=selected.x
                    yy=selected.y
                    x=xx
                    y=yy
                    view_xview=xx-view_wview/2
                    view_yview=yy-view_hview/2
                }
            }
            instance_activate_region(view_xview-15,view_yview+view_hview/2-view_wview/2-15,view_wview+30,view_wview+30,true)
            instance_activate_region(selected.x-15-view_wview/2,selected.y+view_hview/2-view_wview/2-15,view_wview+30,view_wview+30,true)
            }
        else{
            check_turn_end()
            }
    }
    if selected!=noone
    if instance_exists(selected)
    //if alarm_get(0)&lt;=0
    //if alarm_get(9)&lt;=1
    if alarm[9]&lt;=1
    {
    //alarm[10]=30
    //instance_activate_all()
    instance_activate_region(view_xview-15,view_yview+view_hview/2-view_wview/2-15,view_wview+30,view_wview+30,true)
    instance_activate_region(selected.x-15-view_wview/2,selected.y+view_hview/2-view_wview/2-15,view_wview+30,view_wview+30,true)
    //boss heal
    if selected.marker=1
    if selected.combat&lt;=0
    {
        selected.hp=min(selected.hp+1,selected.mhp)
    }
    /*
    phase
    1
    3 attack
    */
    if phase=0{
        var close=noone
        var c=selected
        var toItem=false
        var command=-1;
        /*
        commands
        0 boss only, follow link, or become new lead
        1 moves in a straight line, turns when needed
        2 follows link, or moves to link's target
        3 follows link
        4 follows link, or moves to what link was last hit by, or fends of monster
        5 run
        */
        switch c.ai{
            case -1:command=0 break;
            case 1:command=1 break;
            case 2:command=2 break;
            case 3:command=3 break;
            case 4:command=4 break;
            case 5:command=1 break;
            case 6:
                //if hp&lt;50% run
                if c.hp/c.mhp&lt;=0.5
                    command=5
                //attacks
                else 
                    command=2
                //if near ally, follow
                if c.link=noone{
                    var dis=3
                    for(var i=-dis;i&lt;=dis;i+=1)
                    for(var j=-dis;j&lt;=dis;j+=1){
                        var in=instance_place(c.x+i*15,c.y+j*15,oChar)
                        if in!=noone
                        if in.team=c.team
                        if in.link==noone
                        if in!=c
                            c.link=in
                    }
                }
                break;
        }
        //get closest
        with (oChar){
            var u=id
            if oControler.allyMatrix[# c.team,team]&lt;0//team!=c.team
            //if (c.ai!=2||object_is_ancestor(object_index,oMonster))
            //abs(close.x-c.x)+abs(close.y-c.y)&gt;abs(x-c.x)+abs(y-c.y)
            {
                add_all_to_map()
                mp_grid_clear_cell(grid,c.x/15,c.y/15)
                mp_grid_clear_cell(grid,u.x/15,u.y/15)
                if mp_grid_path(grid,u.path,c.x+7.5,c.y+7.5,u.x+7.5,u.y+7.5,false)
                with oControler{
                    if close=noone||floor(path_get_length(c.path)/15)&gt;floor(path_get_length(u.path)/15){
                        close=u
                        mp_grid_path(grid,c.path,c.x+7.5,c.y+7.5,u.x+7.5,u.y+7.5,false)
                        }
                }
            }
        }
        
        switch command{
        //following ai for wurm boss
        case 0:{
            if instance_exists(c.link)
                close=c.link  
            else{
                c.link=noone
                c.ai=1
                c.marker=1
                c.close=noone
                //c.wait=1
                }
            }break;
        case 1:{
                //if there is an object in way
                if instance_place(c.x+15*cos(degtorad(c.dir*90)),c.y-15*sin(degtorad(c.dir*90)),oUnit)
                ||c.x+15*cos(degtorad(c.dir*90))&lt;0+15*3
                ||c.x+15*cos(degtorad(c.dir*90))&gt;room_width-15*3
                ||c.y-15*sin(degtorad(c.dir*90))&lt;0+15*3
                ||c.y-15*sin(degtorad(c.dir*90))&gt;room_height-15*3{
                    //turn 90 left or right
                    var rand=choose(1,-1)
                    if instance_place(c.x+15*cos(degtorad((c.dir+rand)*90)),c.y-15*sin(degtorad((c.dir+rand)*90)),oObj)
                        rand*=-1
                    close=instance_create(c.x+15*(c.mov+1)*cos(degtorad((c.dir+rand)*90)),c.y-15*(c.mov+1)*sin(degtorad((c.dir+rand)*90)),oTempTarg)
                }
                else{
                    close=instance_create(c.x+15*(c.mov+1)*cos(degtorad((c.dir)*90)),c.y-15*(c.mov+1)*sin(degtorad((c.dir)*90)),oTempTarg)
                    }
                }
                /*
                //move in a straight line ai for wurm boss
                else if c.ai=1{
                    //if there is an object in way
                    if instance_place(c.x+15*cos(degtorad(c.dir*90)),c.y-15*sin(degtorad(c.dir*90)),oObj){
                        //turn 90 left or right
                        var rand=choose(1,-1)
                        if instance_place(c.x+15*cos(degtorad((c.dir+rand)*90)),c.y-15*sin(degtorad((c.dir+rand)*90)),oObj)
                            rand*=-1
                        close=instance_create(c.x+30*cos(degtorad((c.dir+rand)*90)),c.y-30*sin(degtorad((c.dir+rand)*90)),oTempTarg)
                    }
                    else{
                        close=instance_create(c.x+30*cos(degtorad((c.dir)*90)),c.y-30*sin(degtorad((c.dir)*90)),oTempTarg)
                        }
                }*/
            break

        //linked ai that follows and attacks
        case 2:{
            if instance_exists(c.link){
                //NOTE aggro is reset at the start of each turn
                if c.link.aggro!=noone&amp;&amp;instance_exists(c.link.aggro){
                    close=c.link.aggro
                }
                else 
                    close=c.link
            }
            else{
                c.link=noone
            }
            }break
        case 3:{//just follows
            if instance_exists(c.link){
                close=c.link
            }
            else{
                c.link=noone
            }
            }break; 
        case 4:{//follows and revenge against last hit or targets nearest
            if instance_exists(c.link){
                //NOTE aggro is reset at the start of each turn
                if c.link.lastHitBy!=noone&amp;&amp;instance_exists(c.link.lastHitBy){
                    close=c.link.lastHitBy
                }
                else if (abs(c.link.x-c.x)/15+abs(c.link.y-c.y)/15&gt;=c.mov+1)||
                    close!=noone&amp;&amp;((abs(close.x-c.x)/15+abs(close.y-c.y)/15&gt;=c.mov+1)
                    ||!object_is_ancestor(close.object_index,oMonster))
                    close=c.link
            }
            else{
                c.link=noone
            }
        }break;
        case 5:
            if close!=noone&amp;&amp;instance_exists(close){
            var fx=close.x
            var fy=close.y
            var further=0
            for (var i=-c.mov;i&lt;=c.mov;i++)
            for (var j=-c.mov;j&lt;=c.mov;j++){
                if point_distance(c.x+i*15,c.y+j*15,close.x,close.y)&gt;further
                if !place_meeting(c.x+i*15,c.y+j*15,oUnit)
                    {
                        fx=c.x+i*15
                        fy=c.y+j*15
                        further=point_distance(c.x+i*15,c.y+j*15,close.x,close.y)
                    }
            }
            close=instance_create(fx,fy,oTempTarg);
            }
            break
        }
        if close!=noone{
            //move towards it
             add_all_to_map()
             mp_grid_clear_cell(grid,c.x/15,c.y/15)
             mp_grid_clear_cell(grid,close.x/15,close.y/15)
            if mp_grid_path(grid,c.path,c.x+7.5,c.y+7.5,close.x+7.5,close.y+7.5,false){//checks if can move there
                //compares mac movement to how much you need to move
                //if (abs(close.x-c.x)+abs(close.y-c.y))/15&gt;c.mov
                if !toItem{//not traveling towards an item
                    if floor(path_get_length(c.path)/15)&gt;c.mov
                    {//travels furthest
                        mp_grid_path(grid,c.path,c.x+7.5,c.y+7.5,path_get_point_x(c.path,c.mov),
                            path_get_point_y(c.path,c.mov),false)
                       }
                    else {//travels one before target
                    mp_grid_path(grid,c.path,c.x+7.5,c.y+7.5,
                        path_get_point_x(c.path,path_get_number(c.path)-2),
                        path_get_point_y(c.path,path_get_number(c.path)-2),false)
                    }
                }//travels towards an item
                else{//traveling towards an item
                    if floor(path_get_length(c.path)/15)&gt;c.mov
                    {//travels furthest
                        mp_grid_path(grid,c.path,c.x+7.5,c.y+7.5,path_get_point_x(c.path,c.mov),
                            path_get_point_y(c.path,c.mov),false)
                       }
                    else {//travels totarget
                    mp_grid_path(grid,c.path,c.x+7.5,c.y+7.5,
                        path_get_point_x(c.path,path_get_number(c.path)-1),
                        path_get_point_y(c.path,path_get_number(c.path)-1),false)
                    }
                }
                //start the path
                //see if visable or not
                if (c.draw=0
                &amp;&amp; ds_grid_get(gridF1,path_get_x(c.path,1)/15,path_get_y(c.path,1)/15)&lt;0.2
                &amp;&amp;!debugging)
                ||keyboard_check(vk_space)
                {
                    with c{
                       //path_start(path,999,path_action_stop,false)
                       x=floor(path_get_x(path,1)/15)*15
                       y=floor(path_get_y(path,1)/15)*15
                       }
                       phase=3
                       menuSel=0
                       add_all_to_map()
                   }
                else{
                    var cx
                   var cy
                    with c{
                   path_start(path,3,path_action_stop,false)
                   cx=floor(path_get_x(path,1)/15)*15
                   cy=floor(path_get_y(path,1)/15)*15
                   }
                   //if you cant see the ai, camera moves to ai
                   if debugging{
                        xx=cx
                        yy=cy
                   }
                   if (cx&lt;view_xview+15*3
                    || cx&gt;view_xview+view_wview-15*3
                    || cy&lt;view_yview+15*3
                    || cy&gt;view_yview+view_hview-15*3)
                    //||debugging=1
                    {
                        xx=cx
                        yy=cy
                        x=xx
                        y=yy
                        view_xview=xx-view_wview/2
                        view_yview=yy-view_hview/2
                    }
                   phase=1
                }
            }else phase=3
             
        
        }else{ 
            alarm[0]=1 
            phase=8}
    }//end phase 0
    if phase=1{
        var c=selected
        if (c.path_position=1)||path_get_length(c.path)&lt;1
            ||path_get_number(c.path)&lt;1
            {
                   phase=3
                   menuSel=0
                   add_all_to_map()
            }
    }
    else if phase=3{
        var command=-1;
        var c=selected
        option=return_priority(c,priorityLimit)
        /*
        0 - attack
        1-10 - item
        11-20 - skill
        */
        /*if c.ai=6{//great tree boss ai
            if c.lastHitBy=noone
                option=0
            else{ c.ai=7}
            }
        else if c.ai=7{
            if c.combat&lt;=0{
                c.ai=6
                c.lastHitBy=noone
                }
        }*/
        switch c.ai{
            case 2: break;
        }
        /*
        commands
        
        */
        
        
        if (option&gt;10)
        &amp;&amp;(!instance_exists(c.link)||c.ai!=-1)
            phase=11
        else{
            if (c.ai!=2||!instance_exists(c.link)||
            (c.link.aggro!=noone&amp;&amp;instance_exists(c.link.aggro)))
            &amp;&amp;(c.ai!=5)
            {//continue attack
                var range=return_wep_range(c.item[c.wep])
                var close=noone
                //get where you can attack
                    for (var i=-range*15;i&lt;=range*15;i+=15){
                        for (var j=-range*15;j&lt;=range*15;j+=15){
                        if abs(i/15)+abs(j/15)&lt;=range
                        if i!=0||j!=0{
                            var inst=instance_place(i+c.x,j+c.y,oUnit)
                            if inst!=noone
                            if !object_is_ancestor(inst.object_index,oObj)
                            if allyMatrix[# c.team,inst.team]&lt;0
                            if (c.ai!=2||object_is_ancestor(inst.object_index,oMonster))
                            if(c.ai!=3||object_is_ancestor(inst.object_index,oMonster))
                            if (c.ai!=4||object_is_ancestor(inst.object_index,oMonster))
                            if (c.ai!=5)
                            if close=noone||
                            abs(close.x-c.x)+abs(close.y-c.y)&gt;abs(inst.x-c.x)+abs(inst.y-c.y){
                                close=inst
                                }
                            }
                        }
                    }//end loop
                    if c.ai=2&amp;&amp;instance_exists(c.link)&amp;&amp;c.link.aggro!=noone&amp;&amp;instance_exists(c.link.aggro)
                    {
                        if abs((c.link.aggro.x-c.x)/15)+abs((c.link.aggro.y-c.y)/15)&lt;=range
                        {
                            close=c.link.aggro
                        }
                    }
                    else if c.ai=4&amp;&amp;instance_exists(c.link)&amp;&amp;c.link.lastHitBy!=noone&amp;&amp;instance_exists(c.link.lastHitBy)
                    {
                        if abs((c.link.lastHitBy.x-c.x)/15)+abs((c.link.lastHitBy.y-c.y)/15)&lt;=range
                        {
                            close=c.link.lastHitBy
                        }
                    }
                    
                    if c.ai=7//dont attack
                        close=noone
                        
                        
                    if close=noone
                    ||selected.ai=-1 {//no target
                        alarm[0]=1
                    }
                    else{//attack
                        loop=return_multi_atk(selected.item[selected.wep])
                        selected.dir=floor(point_direction(selected.x+7,selected.y+7,close.x+7,close.y+7)/90)
                        target=close
                        phase=4
                    }
                }alarm[0]=1//ai 2 no attack
            }
            //cancel and kill self if no link or link is not in combat
            if c.ai=8{
            if !instance_exists(c.link)//||c.link.combat&lt;=0
            {
                c.hp=0
                phase=0
                selected=noone
            }
            }
        }//end phase 3
        /*if phase=5{//before turn ends after attacking
            if loop&lt;=1{
                if selected.xp&gt;=selected.mxp
                    with selected
                        levelup()
            }
        }*/
        if phase=11//use skill
        {
            var c=selected
            menuSel=option-11
            if return_skill_eff(c,noone)//if you can use skill
            {
                var inst=return_skill_has_target(c.skill[menuSel],c)
                var targType=return_skill_targ_type(c.skill[menuSel])
                var range=return_skill_range(c.skill[menuSel])
                if inst&gt;0
                //if (abs(xx-c.x)+abs(yy-c.y))/15&lt;=range
                //||(abs(xx-c.x)/15&lt;=abs(range)&amp;&amp;abs(yy-c.y)==0)
                //||(abs(yy-c.y)/15&lt;=abs(range)&amp;&amp;abs(xx-c.x)==0)
                    {
                    if return_check_skill_target(c,inst,targType){
                        //if (targType==0){
                            //inst=instance_create(c.x+dcos(c.dir*90),c.y-dsin(c.dir*90),oTempTarg);
                        //}
                        if (c.draw=0
                        &amp;&amp; ds_grid_get(gridF1,path_get_x(c.path,1)/15,path_get_y(c.path,1)/15)&lt;0.2
                        &amp;&amp;!debugging)
                            alarm[0]=1
                        else 
                            alarm[0]=30
                        return_skill_eff(c,inst)
                        menuSel=0
                        phase=8
                         //skill usage range stuff   
                    }else phase=3//alarm[0]=1//else no valid targ
                }else phase=3//alarm[0]=1//else not in range
            }else phase=3
        menuSel=0
        }//end phase 11
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#5 ai debug Timer
if global.production=0
if currentTurn=2{
switch phase{
    case 0: timePhase0++; break;
    case 1: timePhase1++; break;
    case 3: timePhase3++; break;
    case 4: timePhase4++; break;
    case 5: timePhase5++; break;
    case 8: timePhase8++; break;
    case 11: timePhase11++; break;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///camera movement
if global.production=0{
/*if keyboard_check(vk_right)//||keyboard_check(keys[7])
    //camTurnDir=1
    view_angle+=2*/
if keyboard_check(ord('R')){
    view_angle=0
    viewTurn=0
    view_wview=360
    view_hview=240
    view_xview=xx-view_wview/2
    view_yview=yy-view_hview/2
    }
if keyboard_check(ord('N')){
    view_wview*=1.1
    view_hview*=1.1
}
if keyboard_check(ord('M')){
    view_wview/=1.1
    view_hview/=1.1
}
var io=instance_place(xx-15*dsin(view_angle),yy+15*dcos(view_angle),oObj)
if camTurnDir=0
if 1=0
if io!=noone
if io.sprite_height&gt;=26
if io.draw&gt;0{
    if xx+dsin(view_angle)&lt;x+dsin(view_angle)
    ||yy+dcos(view_angle)&lt;y+dcos(view_angle)
        camTurnDir=-1
    else //if xx&lt;x
        camTurnDir=1
}
if keyboard_check(ord('T')){
//add time
minu+=1;
if minu&gt;=6{
    minu=0;
    hour+=1
    if hour&gt;=24
        hour=0
}
}
if camTurnDir!=0
{
    view_angle+=5*camTurnDir
    if view_angle=0
    ||view_angle=90
    ||view_angle=180
    ||view_angle=270
    ||view_angle=360
    camTurnDir=0
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///generate map
if floor(menu)=99{
    generate_map(x,y,0)
    var rx= room_width/30
    var ry= room_height/30
    var inst=instance_create(rx*15,ry*15,return_unit(unitSelect[i],3,i));
    ds_list_add(unitList,inst)
    xx=inst.xx
    yy=inst.yy
    view_xview=inst.xx-view_wview/2
    view_yview=inst.yy-view_hview/2
    var temp=instance_create(inst.x,inst.y,oEff);
    temp.sprite_index=spawn_eff
    for (var k=0;k&lt;ds_list_size(unitList);k++){
        selected=ds_list_find_value(unitList,k)
        update_fog()
    }selected=noone
    menu=-1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(unitList)
ds_list_destroy(allUnits)
mp_grid_destroy(grid)
ds_grid_destroy(gridF1)
ds_grid_destroy(gridF2)
ds_map_destroy(aiTurns)
ds_grid_destroy(allyMatrix)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw mouse
/*if menu&gt;=0
||ds_map_find_value(aiTurns, currentTurn)&lt;0
||(ds_map_find_value(aiTurns, currentTurn)&gt;=0&amp;&amp;phase&gt;=2)
*/
draw_sprite(mouse,mouse_check_button(mb_left),device_mouse_x_to_gui(0),device_mouse_y_to_gui(0))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw shadow
///draw shadow
/*var px=x/15
var py=y/15
var p=0
var vx=view_xview[p]/15,vy=view_yview[p]/15;
var fx=floor(view_xview[p]/15),fy=floor(view_yview[p]/15);
var vh=view_wview[p]/15,vw=view_wview[p]/15
for (var i=max(vx-3,0);i&lt;min(24+vx+2,room_width/15+1);i++)
for (var j=max(vy-7,0);j&lt;min(24+vy+1,room_height/15+1);j++){
        if ds_grid_get(gridF1,i,j)&lt;1
        {
          draw_sprite_ext(hitbox,0,fx*15+(i-vx)*15,fy*15+(j-vy)*15,1,1,0,0,0.5-ds_grid_get(gridF1,i,j))
        }
        if ds_grid_get(gridF1,i,j)&gt;0
           ds_grid_multiply(gridF1,i,j,0.70)

//ds_grid_multiply_region(gridF1,0,0,100,100,min(-1,0.95))
}
draw_sprite_ext(sprite_index,image_index,x,y,1,1,image_angle,-1,0.5)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw shadow
/*
-1 cant see
0 visited
0&lt; visable
*/
var px=x/15
var py=y/15
var p=0
var vx=view_xview[p]/15,vy=view_yview[p]/15;
var fx=floor(view_xview[p]/15),fy=floor(view_yview[p]/15);
var vh=view_hview[p]/15,vw=view_wview[p]/15-16//0
for (var i=0;i&lt;room_width/15;i++)
for (var j=0;j&lt;room_height/15;j++){
        if ds_grid_get(gridF1,clamp(i,0,room_width/15),clamp(j,0,room_height/15))&lt;1
        if debugging=0
        {
          draw_sprite_ext(hitbox,0,(i)*15,(j)*15,1,1,0,0,0.5-ds_grid_get(gridF1,i,j))
        }
        /*if ds_grid_get(gridF1,i,j)&gt;0{
           ds_grid_multiply(gridF1,i,j,0.70)
           }
        else{
            //mp_grid_add_cell(grid,i,j)
        }*/

//ds_grid_multiply_region(gridF1,0,0,100,100,min(-1,0.95))
}
if ds_map_find_value(aiTurns, currentTurn)&gt;=0{
if ds_grid_get(gridF1,round(xx/15),round(yy/15))&lt;=0
    draw_sprite_ext(sprite_index,image_index,x,y,1,1,image_angle,-1,1)

draw_self()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw shadow old
/*
-1 cant see
0 visited
0&lt; visable
*/
/*
var px=x/15
var py=y/15
var p=0
var vx=view_xview[p]/15,vy=view_yview[p]/15;
var fx=floor(view_xview[p]/15),fy=floor(view_yview[p]/15);
var vh=view_hview[p]/15,vw=view_wview[p]/15-16//0
for (var i=max(vx-3,0);i&lt;min(25+ceil(vw)+vx+2,room_width/15);i++)
for (var j=max(vy-7,0);j&lt;min(25+ceil(vw)+vy+1,room_height/15);j++){
        if ds_grid_get(gridF1,clamp(i,0,room_width/15),clamp(j,0,room_height/15))&lt;1
        if debugging=0
        {
          draw_sprite_ext(hitbox,0,fx*15+(i-vx)*15,fy*15+(j-vy)*15,1,1,0,0,0.5-ds_grid_get(gridF1,i,j))
        }
        /*if ds_grid_get(gridF1,i,j)&gt;0{
           ds_grid_multiply(gridF1,i,j,0.70)
           }
        else{
            //mp_grid_add_cell(grid,i,j)
        }

//ds_grid_multiply_region(gridF1,0,0,100,100,min(-1,0.95))
}
if ds_map_find_value(aiTurns, currentTurn)&gt;=0{
if ds_grid_get(gridF1,round(xx/15),round(yy/15))&lt;=0
    draw_sprite_ext(sprite_index,image_index,x,y,1,1,image_angle,-1,1)

draw_self()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#2 draw info over unit
draw_set_alpha(1)
if selected!=noone
if ds_map_find_value(aiTurns, currentTurn)&gt;=0{
if phase=3{
    var c=selected
    var range=return_wep_range(c.item[c.wep])
    var inst=instance_place(xx,yy,oUnit)
    if inst!=noone
    if inst!=c
    if ds_grid_get(gridF1,round(xx)/15,round(yy)/15)&gt;0 {
    if abs(xx-c.x)/15+abs(yy-c.y)/15&lt;=range{
        if inst.combat&lt;=0&amp;&amp;(inst.marker=2||inst.team=selected.team)&amp;&amp;abs((inst.x-selected.x)/15)+abs((inst.y-selected.y)/15)&lt;=1
        {
            /*draw_set_font(pixelBlock)
            draw_set_halign(fa_center)
            draw_set_colour(c_blue)
            draw_text_transformed(x+7-17*dsin(-view_angle),y+7-17*dcos(view_angle),"trade",1,1,-view_angle)
            draw_set_halign(fa_left)*/
            ix=x
            iy=y
            itext="trade"
        }
        else if inst.combat&lt;=0&amp;&amp;allyMatrix[# inst.team,c.team]=0&amp;&amp;!object_is_ancestor(inst.object_index,oObj)&amp;&amp;abs((inst.x-selected.x)/15)+abs((inst.y-selected.y)/15)&lt;=1{
            /*draw_set_font(pixelBlock)
            draw_set_halign(fa_center)
            draw_set_colour(c_blue)
            draw_text_transformed(x+7-17*dsin(-view_angle),y+7-17*dcos(view_angle),"recruit",1,1,-view_angle)
            draw_set_halign(fa_left)*/
            ix=x
            iy=y
            itext="recruit"
        }
        else
        {
            /*draw_sprite_ext(atkInfo,0,x+7+10*dsin(view_angle),y+7-10*dcos(view_angle),1,1,-view_angle,-1,1)
            draw_set_colour(c_black)
            draw_set_halign(fa_center)
            draw_text_transformed(x+7-26*dsin(-view_angle),y+7-26*dcos(view_angle),string(floor(return_wep_acc(c.item[c.wep],abs(c.x-inst.x)+abs(c.y-inst.y),c,inst)))+"%",1,1,-view_angle)
            //if inst.weakness[return_wep_type(c.item[c.wep])]&gt;1
            //    draw_set_colour(c_orange)
            //else if inst.weakness[return_wep_type(c.item[c.wep])]&lt;1
            //    draw_set_colour(c_ltgray)
            var multi=return_wep_crit(c.item[c.wep],abs(c.x-inst.x)+abs(c.y-inst.y),c,inst);
            var text=""
            if return_multi_atk(c.item[c.wep])==1{
                text=string(multi*ceil(return_dmg(return_wep_dmg(c.item[c.wep],c,abs(c.x-inst.x)+abs(c.y-inst.y)),c.stats[2,3],return_wep_type(c.item[c.wep]),c,inst)))
            }
            else{
                text=string(multi*ceil(return_dmg(return_wep_dmg(c.item[c.wep],c,abs(c.x-inst.x)+abs(c.y-inst.y)),c.stats[2,3],return_wep_type(c.item[c.wep]),c,inst)))+"x"+string(return_multi_atk(c.item[c.wep]))
            }
            if multi&gt;1
                text+="!"
            draw_text_transformed(x+7-20*dsin(-view_angle),y+7-20*dcos(view_angle),
                text,1,1,-view_angle)
            draw_set_font(pixelBlock)
            draw_set_halign(fa_center)
            draw_set_colour(c_red)
            draw_text_transformed(x+7-37*dsin(-view_angle),y+7-37*dcos(view_angle),"attack",1,1,-view_angle)
            draw_set_halign(fa_left)*/
            
            ix=x
            iy=y
            itext="attack "
            var multi=return_wep_crit(c.item[c.wep],abs(c.x-inst.x)+abs(c.y-inst.y),c,inst);
            if return_multi_atk(c.item[c.wep])==1{
                itext+=string(multi*ceil(return_dmg(return_wep_dmg(c.item[c.wep],c,abs(c.x-inst.x)+abs(c.y-inst.y)),c.stats[2,3],return_wep_type(c.item[c.wep]),c,inst)))
            }
            else{
                itext+=string(multi*ceil(return_dmg(return_wep_dmg(c.item[c.wep],c,abs(c.x-inst.x)+abs(c.y-inst.y)),c.stats[2,3],return_wep_type(c.item[c.wep]),c,inst)))+"x"+string(return_multi_atk(c.item[c.wep]))
            }
            if multi&gt;1
                itext+="!"
                
            }
        }
    }
}
else if phase=7{
    var c=selected
    var range=ceil((ceil(sqrt(c.stats[2,0])*2)-return_item_wt(c.item[menuSel])/2)/2)
    var inst=instance_place(xx,yy,oUnit)
    if inst!=noone
    if inst!=c
    if ds_grid_get(gridF1,round(xx)/15,round(yy)/15)&gt;0 {
    if abs(xx-c.x)/15+abs(yy-c.y)/15&lt;=range{
        draw_sprite_ext(atkInfo,0,x+7+10*dsin(view_angle),y+7-10*dcos(view_angle),1,1,-view_angle,-1,1)
        draw_set_colour(c_black)
        draw_set_halign(fa_center)
        draw_text_transformed(x+7-26*dsin(-view_angle),y+7-26*dcos(view_angle),string(floor(90-(abs(c.x-inst.x)+abs(c.y-inst.y))/15*5+c.stats[2,3]))+"%",1,1,-view_angle)
        draw_text_transformed(x+7-20*dsin(-view_angle),y+7-20*dcos(view_angle),ceil(return_item_wt(c.item[menuSel])+c.stats[2,0]/2),1,1,-view_angle)
        draw_set_font(pixelBlock)
        draw_set_halign(fa_center)
        draw_set_colour(c_red)
        draw_text_transformed(x+7-37*dsin(-view_angle),y+7-37*dcos(view_angle),"throw",1,1,-view_angle)
        draw_set_halign(fa_left)
        }
    }
}
else if phase=11{
    var c=selected
    draw_skill_area_type(c.skill[menuSel],xx,yy,c,1)
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#3 draw menus
if selected!=noone{
var c=selected
    if phase=2{
        var menuOp;
        menuOp[0]=4
        //add menu options
        //action option
        if check_inventory_space(c)&gt;0{
            menuOp[array_length_1d(menuOp)]=3
            }
        if check_skill_space(c)&gt;0{
            menuOp[array_length_1d(menuOp)]=2
            }
        if return_unit_in_range(c,return_wep_range(c.item[c.wep]),0)!=noone{
            menuOp[array_length_1d(menuOp)]=1
            }
        
        infoTime=0
        
        for (var i=0;i&lt;array_length_1d(menuOp);i++){
            var index=0
            var angle=0
            switch menuOp[i]{
                case 1://action
                    angle=270
                    if 1=menuSel{
                        index=1
                        }
                    else index=0
                break
                case 2://skill
                    if 2=menuSel{
                        index=5
                        }
                    else index=4
                break
                case 3://item
                    angle=180
                    if 3=menuSel{
                        index=3
                        }
                    else index=2
                break
                case 4://end
                    angle=90
                    if 4=menuSel{
                        index=7
                        }
                    else index=6
                break
            }
            draw_sprite_ext(menuIcon,index,c.x+7+20*dcos(-view_angle-angle)
                ,c.y+7-20*dsin(-view_angle-angle),1,1,-view_angle,-1,1)
        }    
    }//end phase 2 menu
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///4 draw info on ground over tile
if ix!=-1&amp;&amp;iy!=-1
{
    draw_sprite_ext(infoSprite,0,ix+7,iy+7,1,1,-view_angle,-1,1)
    draw_set_font(pixelBlock)
    draw_set_colour(c_ltgray)
    draw_text_transformed(ix+7+15*dcos(45-view_angle),iy+7-15*dsin(45-view_angle),itext
        ,1,1,-view_angle)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#1background
draw_background_stretched(greenBackground,0,0,room_width,room_height)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw selected unit
image_blend=c_white
var bx=0,by=0
var over=instance_place(xx,yy,oUnit);
var temp=selected
if ds_grid_get(gridF1,round(xx/15),round(yy/15))&gt;0||debugging=1
/*if selected=noone
||phase=3
||phase=7
||phase=11*/
if (over!=noone
&amp;&amp;over.draw=1)
||debugging=1{
    selected=over;
    }
    
if menu=-1
if selected!=noone
if instance_exists(selected)
if ds_map_find_value(aiTurns, currentTurn)&gt;=0||debugging=1
{
    var cur=selected
    draw_set_font(pixelFont)
    /*if object_is_ancestor(object_index,oObj){
    }
    else*/
    {
    image_blend=playerColour[cur.team]
    /**
    if currentTurn=cur.team
        image_blend=playerColour[3]
    else if allyMatrix[# cur.team,currentTurn]&lt;0 image_blend=playerColour[2];
    else if allyMatrix[# cur.team,currentTurn]&gt;0
            image_blend=playerColour[1]
            **/
   var des=unit_description(cur.object_index)
   draw_set_colour(c_white)
   draw_rectangle(2+bx,203,75+bx,231,false)
   draw_rectangle(76+bx,197,135+bx,231,false)
   draw_rectangle(136+bx,203,208+bx,231,false)
   if des!="0"
   draw_rectangle(209+bx,197,311+bx,231,false)
   draw_set_colour(c_dkgray)
   draw_rectangle(3+bx,204,74+bx,230,false)
   draw_rectangle(77+bx,198,134+bx,230,false)
   draw_rectangle(137+bx,204,207+bx,230,false)
   if des!="0"
   draw_rectangle(210+bx,198,310+bx,230,false)
   draw_set_colour(c_ltgray)
   if des!="0"
   draw_text_ext(212+bx,200+bx,des,6,98)
   draw_sprite_ext(hpBar,0,5+bx,223,min((cur.xp/cur.mxp)*68,68),2.5,0,c_teal,1)
   var text=""
   if object_is_ancestor(cur.object_index,oObj)
        text=cur.name
   else
        text="LV:"+string(cur.lv)+" "+cur.name
   draw_text(5+bx,223,text)
   draw_sprite_ext(hpBar,0,5+bx,206,68,3.5,0,c_ltgray,1)
   draw_sprite_ext(hpBar,0,5+bx,214,68,3.5,0,c_ltgray,1)
   
    with cur{
        var shieldIndex=findStatus(id,1)
        var shieldValue=0
        if shieldIndex!=-1
            shieldValue=statusStr[shieldIndex]
        {
           if dmg&gt;=hp{
            draw_sprite_ext(hpBar,0,5+bx,206,(ceil(dmg)/ceil(mhp))*68,3.5,0,c_red,1)
            draw_sprite_ext(hpBar,0,5+bx,206,(ceil(hp)/ceil(mhp))*68,3.5,0,c_lime,1)}
            else{
            draw_sprite_ext(hpBar,0,5+bx,206,(ceil(hp)/ceil(mhp))*68,3.5,0,c_green,1)
            draw_sprite_ext(hpBar,0,5+bx,206,(ceil(dmg)/ceil(mhp))*68,3.5,0,c_lime,1)}
        }
        if shieldIndex!=-1{
            if shieldValue+hp&lt;=mhp
                draw_sprite_ext(hpBar,0,5+bx+(ceil(hp)/ceil(mhp))*68,206,(ceil(shieldValue)/ceil(mhp))*68,3.5,0,c_orange,1)
            else
                draw_sprite_ext(hpBar,0,5+bx+68,206,-(ceil(shieldValue)/ceil(mhp+shieldValue))*68,3.5,0,c_orange,1)
            }
       draw_set_colour(c_black)
       draw_text(6+bx,207,"HP:"+string(ceil(hp)+shieldValue)+"/"+string(ceil(mhp)));
       draw_sprite_ext(hpBar,0,5+bx,214,(floor(sp)/floor(msp))*68,3.5,0,c_blue,1)
       draw_text(6+bx,215,"SP:"+string(floor(sp))+"/"+string(floor(msp)));
       //draw other stats
       //draw red stats
       var in;
       for (var i=0;i&lt;3;i++){
            in=findStatus(id,i+10)
            if in!=-1
                draw_sprite_ext(hpBar,0,104+bx,200+i*6,((stats[2,i]+statusStr[in])/150)*26,2,0,c_red,1)
       }
       in=findStatus(id,13)
       if in!=-1
            draw_sprite_ext(hpBar,0,104+bx,200+3*6,((stats[2,4]+statusStr[in])/150)*26,2,0,c_red,1)
       in=findStatus(id,14)
       if in!=-1
            draw_sprite_ext(hpBar,0,104+bx,200+4*6,((stats[2,3]+statusStr[in])/150)*26,2,0,c_red,1)
 
       //draw current stats
       for (var i=0;i&lt;3;i++)
        draw_sprite_ext(hpBar,0,104+bx,200+i*6,(stats[2,i]/150)*26,2,0,c_white,1)
        draw_sprite_ext(hpBar,0,104+bx,200+3*6,(stats[2,4]/150)*26,2,0,c_white,1)
        draw_sprite_ext(hpBar,0,104+bx,200+4*6,(stats[2,3]/150)*26,2,0,c_white,1)
        //draw_sprite_ext(hpBar,0,102+bx,206,(luc/20)*26,2,0,c_white,1)
        
        //draw_orange stats
       for (var i=0;i&lt;3;i++){
            in=findStatus(id,i+15)
            if in!=-1{
                draw_sprite_ext(hpBar,0,104+bx,200+i*6,((stats[2,i])/150)*26,2,0,c_orange,1)
                draw_sprite_ext(hpBar,0,104+bx,200+i*6,((stats[2,i]+statusStr[in])/150)*26,2,0,c_white,1)
                }
       }
       in=findStatus(id,18)
       if in!=-1
       {    
            draw_sprite_ext(hpBar,0,104+bx,200+3*6,((stats[2,4])/150)*26,2,0,c_orange,1)
            draw_sprite_ext(hpBar,0,104+bx,200+3*6,((stats[2,4]+statusStr[in])/150)*26,2,0,c_white,1)
            }
       in=findStatus(id,19)
       if in!=-1{
            draw_sprite_ext(hpBar,0,104+bx,200+4*6,((stats[2,3])/150)*26,2,0,c_orange,1)
            draw_sprite_ext(hpBar,0,104+bx,200+4*6,((stats[2,3]+statusStr[in])/150)*26,2,0,c_white,1)
            }
            
       draw_set_colour(c_ltgray)
       if findStatus(id,10)!=-1
            draw_set_colour(c_red)
       else if findStatus(id,15)!=-1
            draw_set_colour(c_orange)
       draw_text(78+bx,200,"ATK:"+string(floor(stats[2,0])));
       draw_set_colour(c_ltgray)
       if findStatus(id,11)!=-1
            draw_set_colour(c_red)
       else if findStatus(id,16)!=-1
            draw_set_colour(c_orange)
       draw_text(78+bx,206,"InT:"+string(floor(stats[2,1])));
       draw_set_colour(c_ltgray)
       if findStatus(id,12)!=-1
            draw_set_colour(c_red)
       else if findStatus(id,17)!=-1
            draw_set_colour(c_orange)
       draw_text(78+bx,212,"DEF:"+string(floor(stats[2,2])));
       draw_set_colour(c_ltgray)
       if findStatus(id,13)!=-1
            draw_set_colour(c_red)
       else if findStatus(id,18)!=-1
            draw_set_colour(c_orange)
       draw_text(78+bx,218,"RES:"+string(floor(stats[2,4])));
       draw_set_colour(c_ltgray)
       if findStatus(id,14)!=-1
            draw_set_colour(c_red)
       else if findStatus(id,19)!=-1
            draw_set_colour(c_orange)
       draw_text(78+bx,224,"TEC:"+string(floor(stats[2,3])));
       //draw_text(78+bx,206,"luc:"+string(ceil(luc)));       
       draw_text(138+bx,212,return_item_name(item[wep]));
       draw_text(138+bx,224,return_power());//might be changed with luck or move etc
       draw_set_colour(c_orange)
       draw_text(138+bx,206,"WEAPON");
       draw_text(138+bx,218,"POWER");
       //draw_text(138+bx,190,"start "+string(xstart)+" "+string(ystart));
       draw_text(138+bx,190,"cur "+string(round(x/15))+" "+string(round(y/15)));
       //status
       var s=0;
       for (var i=0;i&lt;array_length_1d(status);i++){
            if status[i]!=0{
                var tx=""
                switch floor(status[i]){
                    case 1:tx+="SHIELD"break;
                    case 2:tx+="BOOST"break;
                    case 3:tx+="POISON"break;
                    case 4:tx+="BURN"break;
                    case 5:tx+="ROOTED"break;
                    case 6:tx+="SLOW"break;
                    case 7:break;
                    case 8:break;
                    case 9:break;
                    case 10:tx+="ATK DOWN"break;
                    case 11:tx+="INT DOWN"break;
                    case 12:tx+="DEF DOWN"break;
                    case 13:tx+="RES DOWN"break;
                    case 14:tx+="TEC DOWN"break;
                    case 15:tx+="ATK UP"break;
                    case 16:tx+="INT UP"break;
                    case 17:tx+="DEF UP"break;
                    case 18:tx+="RES UP"break;
                    case 19:tx+="TEC UP"break;
                }
                tx+=" "
                tx+=string(frac(status[i])*100)
                draw_text(2,196-s*7,tx+" "+string(abs(statusStr[i])))
                s++;
            }
       }
   }
   }
}
selected=temp
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#3 draw message
if logVisable&gt;0
{
    var vx=5;
    draw_set_font(pixelFont)
    draw_set_alpha(logVisable/4)
    draw_set_colour(c_dkgray)
    draw_set_alpha(0.6)
    var height=0
    for (var i=0;i&lt;array_length_1d(log);i++){
        height+=string_height_ext(log[i],6,110)+1
    }
    draw_rectangle(vx,190-height,vx+120,190,false)
    draw_set_alpha(logVisable)
    draw_set_colour(c_ltgray)
    height=0
    for (var i=0;i&lt;array_length_1d(log);i++){
        height+=string_height_ext(log[i],6,110)+1
        draw_text_ext(vx+4,191-height,log[i],6,110)
        }
    logVisable-=0.02
    draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#5 draw menus
draw_text(2,40,"FPS: "+string(fps))
turnTime++
var unitLeft=0;
for (var i=0;i&lt;ds_list_size(unitList);i++){
    var char=ds_list_find_value(unitList,i)
        instance_activate_object(char)
        if instance_exists(char)
        {
        if char.wait=0
            unitLeft++;
        }
}
if global.production=2{
draw_set_colour(c_fuchsia)
draw_set_font(pixelFont)
draw_set_alpha(1)
//draw_text(200,10,"loop: "+string(score))
draw_text(2,10,"time: "+string(hour)+":"+string(minu)+"0")
draw_text(2,20,"turNs survived: "+string(turnsSurvive))
draw_text(2,30,string("RNG: "+string(randNum[randPos])))
draw_text(2,50,"uNit to move: "+string(unitLeft)+"/"+string(ds_list_size(unitList)))
var over=instance_place(xx,yy,oUnit)
if over!=noone
    draw_text(2,60,"over : "+string(over.name)+" "+string(over))
draw_text(2,70,"AI Time: "+string((timePhase0+timePhase1
+timePhase3+timePhase4+timePhase5+timePhase8+timePhase11)/30))
draw_text(2,80,"Phase SelectiNg: "+string(timePhase0/30))
draw_text(2,90,"Phase MoviNg: "+string(timePhase1/30))
draw_text(2,100,"Phase AttackiNg: "+string(timePhase3/30))
draw_text(2,110,"AttackiNg1: "+string(timePhase4/30))
draw_text(2,120,"AttackiNg2: "+string(timePhase5/30))
draw_text(2,130,"Phase skill: "+string(timePhase11/30))
draw_text(2,140,"using skill: "+string(timePhase8/30))
}

draw_set_font(pixelBlock)
//draw compass
draw_sprite_ext(compassArrow,0,180,30,1,1,view_angle,-1,1)
draw_set_colour(c_red)
draw_text(178,28,"N")


draw_set_colour(c_white)
if ds_map_find_value(aiTurns, currentTurn)&lt;0
{
    var waitCount;
    waitCount=0
    var count=0
    while ds_map_find_value(aiTurns, currentTurn+count)&lt;0
        &amp;&amp;waitCount&lt;ds_list_size(aiTurns)
        {
        count++
        waitCount++;
        if currentTurn+count&gt;playerMax{
            count=-currentTurn
        }
    }
    waitCount--
draw_text(10,10,"wait")
draw_rectangle(10,20,10+(unitLeft/ds_list_size(unitList))*40+40*waitCount,23,false)
}
draw_set_halign(fa_right)
draw_text(358,10,"wasd: move coNtroler")
draw_text(358,22,"f: select")
draw_text(358,34,"g: back")
draw_set_halign(fa_left)
draw_set_font(pixelFont)
//draw_sprite(sprite_index,image_index,x-view_xview,y-view_yview)
if selected!=noone{
var c=selected
    if phase=2{
        /*var menuOp;
        menuOp[0]=4
        //add menu options
        //action option
        if check_inventory_space(c)&gt;0{
            menuOp[array_length_1d(menuOp)]=3
            }
        if check_skill_space(c)&gt;0{
            menuOp[array_length_1d(menuOp)]=2
            }
        if return_unit_in_range(c,return_wep_range(c.item[c.wep]),0)!=noone{
            menuOp[array_length_1d(menuOp)]=1
            }
        
        infoTime=0
        var xShift=(c.x-view_xview)//*dcos(-view_angle)//+(c.y-view_yview)*dsin(-view_angle)
        var yShift=(c.y-view_yview)//*dcos(-view_angle)+(c.x-view_xview)*dsin(-view_angle)
        for (var i=0;i&lt;array_length_1d(menuOp);i++){
            switch menuOp[i]{
                case 1://action
                    if 1=menuSel{
                        draw_sprite(menuIcon,1,xShift+12,yShift-16)
                        }
                    else draw_sprite(menuIcon,0,xShift+12,yShift-16)
                break
                case 2://skill
                    if 2=menuSel{
                        draw_sprite(menuIcon,5,xShift+33,yShift+7)
                        }
                    else draw_sprite(menuIcon,4,xShift+33,yShift+7)
                break
                case 3://item
                    if 3=menuSel{
                        draw_sprite(menuIcon,3,xShift-12,yShift+7)
                        }
                    else draw_sprite(menuIcon,2,xShift-12,yShift+7)
                break
                case 4://end
                    if 4=menuSel{
                        draw_sprite(menuIcon,7,xShift+12,yShift+29)
                        }
                    else draw_sprite(menuIcon,6,xShift+12,yShift+29)
                break
            }
        }   */ 
        }//end phase 2 menu
        else if phase=6//draw item
        {
            var maxItem = array_length_1d(selected.item)
            for (var i=1;i&lt;maxItem;i++){

                if i=menuSel{
                    draw_set_colour(c_dkgray)
                    draw_rectangle(270,220-i*7,359,226-i*7,false)
                    draw_set_colour(c_orange)
                }
                else{
                    draw_set_colour(c_ltgray)
                    draw_rectangle(270,220-i*7,359,226-i*7,false)
                    draw_set_colour(c_black)
                }
                draw_text_transformed(273,221-i*7,return_item_name(selected.item[i]),1,1,0,)
                if selected.wep=i
                {
                    draw_text(354,221-i*7,"E")
                }
                if selected.arm=i
                {
                    draw_text(354,221-i*7,"E")
                }
            }
            draw_set_colour(c_dkgray)
            draw_rectangle(270,140,359,153,false)
            draw_set_colour(c_orange)
            draw_text_transformed(273,142,"ITEM",2,2,0)
            infoTime++
            if infoTime&gt;30
            return_item_des(selected.item[menuSel],273,221-menuSel*7)
            if menuSel2&gt;=0
            {
                if menuSel2=0{
                    draw_set_colour(c_ltgray)
                    draw_rectangle(230,219-menuSel*7,266,226-menuSel*7,false)
                    draw_set_colour(c_dkgray)
                    draw_rectangle(230,219-menuSel*7-7,266,226-menuSel*7-7,false)
                    draw_set_colour(c_orange)
                    draw_text(231,220-menuSel*7-7,return_item_usage(selected.item[menuSel],menuSel=selected.wep||menuSel=selected.arm))
                    draw_set_colour(c_dkgray)
                    draw_text(231,221-menuSel*7,"THROW")
                }
                else{
                    draw_set_colour(c_dkgray)
                    draw_rectangle(230,219-menuSel*7,266,226-menuSel*7,false)
                    draw_set_colour(c_ltgray)
                    draw_rectangle(230,219-menuSel*7-7,266,226-menuSel*7-7,false)
                    draw_set_colour(c_dkgray)
                    draw_text(231,220-menuSel*7-7,return_item_usage(selected.item[menuSel],menuSel=selected.wep))
                    draw_set_colour(c_orange)
                    draw_text(231,221-menuSel*7,"THROW")
                }
            }
        }
        else if phase=10//draw skill
        {
            var maxSkill = array_length_1d(selected.skill)
            for (var i=0;i&lt;maxSkill;i++){

                if i=menuSel{
                    draw_set_colour(c_dkgray)
                    draw_rectangle(270,220-i*7,359,226-i*7,false)
                    draw_set_colour(c_orange)
                }
                else{
                    draw_set_colour(c_ltgray)
                    draw_rectangle(270,220-i*7,359,226-i*7,false)
                    draw_set_colour(c_black)
                }
                //so that you can show that skill is unusable
                var temp=menuSel
                menuSel=i
                if !return_skill_eff(selected,noone)
                    draw_set_colour(c_red)
                menuSel=temp
                
                draw_text_transformed(273,221-i*7,return_skill_name(selected.skill[i]),1,1,0,)
                draw_set_halign(fa_right)
                draw_text_transformed(356,221-i*7,return_skill_cost(selected.skill[i]),1,1,0,)
                draw_set_halign(fa_left)
                draw_set_colour(c_black)
            }
            draw_set_colour(c_dkgray)
            draw_rectangle(270,140,359,153,false)
            draw_set_colour(c_orange)
            draw_text_transformed(273,142,"SKILL",2,2,0)
            infoTime++
            if infoTime&gt;30
            return_skill_des(selected.skill[menuSel],273,221-menuSel*7)
            if menuSel2&gt;=0
            {
                
            }
        }
        else if phase=12{//trade
        var maxItem = array_length_1d(selected.item)
        var shopItem = array_length_1d(eventOver.item)
            for (var i=1;i&lt;shopItem;i++){
                if i=menuSel{
                    draw_set_colour(c_dkgray)
                    draw_rectangle(270,220-i*7,359,226-i*7,false)
                    draw_set_colour(c_orange)
                }
                else{
                    draw_set_colour(c_ltgray)
                    draw_rectangle(270,220-i*7,359,226-i*7,false)
                    draw_set_colour(c_black)
                }
                draw_text_transformed(273,221-i*7,return_item_name(eventOver.item[i]),1,1,0,)
            }
            draw_set_colour(c_dkgray)
            draw_rectangle(270,140,359,153,false)
            draw_set_colour(c_orange)
            draw_text_transformed(273,142,"trade",2,2,0)
            infoTime++
            if infoTime&gt;30
            return_item_des(eventOver.item[menuSel],273,221-menuSel*7)
            
            if menuSel2&gt;=0{
                var shift=91
                for (var i=1;i&lt;maxItem;i++){
                    if i=menuSel2{
                        draw_set_colour(c_dkgray)
                        draw_rectangle(270-shift,220-i*7,359-shift,226-i*7,false)
                        draw_set_colour(c_orange)
                    }
                    else{
                        draw_set_colour(c_ltgray)
                        draw_rectangle(270-shift,220-i*7,359-shift,226-i*7,false)
                        draw_set_colour(c_black)
                    }
                    draw_text_transformed(273-shift,221-i*7,return_item_name(selected.item[i]),1,1,0,)
                }
                draw_set_colour(c_dkgray)
                draw_rectangle(270-shift,140,359-shift,153,false)
                draw_set_colour(c_orange)
                draw_text_transformed(273-shift,142,"give",2,2,0)
                infoTime++
                if infoTime&gt;30
                return_item_des(selected.item[menuSel2],273-shift,221-menuSel2*7)
            }
        }//end draw trade menu
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///start menu
if menu=0{
    if keyboard_check_pressed(keys[0])
    ||keyboard_check_pressed(keys[1])
    ||keyboard_check_pressed(keys[2])
    ||keyboard_check_pressed(keys[3])
    ||keyboard_check_pressed(keys[4])
    ||keyboard_check_pressed(keys[5])
        controler=1
    
    draw_set_font(pixelBlock)
    draw_set_halign(fa_center)
    draw_set_color(c_ltgray)
    if controler=0
    if mouse_x-view_xview&gt;120
    if mouse_x-view_xview&lt;240
    if mouse_y-view_yview&gt;160
        menuSelect=floor((mouse_y-view_yview-160)/20)
    else menuSelect=-1
    if keyboard_check_pressed(keys[2]){
        menuSelect=min(3,menuSelect+1)
        }
    else if keyboard_check_pressed(keys[0]){
        menuSelect=max(0,menuSelect-1)
        }
    draw_text_transformed(180,160,"New game",2,2,0)
    draw_text_transformed(180,180,"stats",2,2,0)
    draw_text_transformed(180,200,"optioNs",2,2,0)
    draw_text_transformed(180,220,"quit",2,2,0)
    draw_set_colour(c_white)
    switch menuSelect{
        case 0: draw_text_transformed(180,160,"-New game-",2,2,0)
            if mouse_check_button(mb_left)
            ||keyboard_check_pressed(keys[4]){
            menu=1
            }
            break;
        case 1: draw_text_transformed(180,180,"-stats-",2,2,0)break;
        case 2: draw_text_transformed(180,200,"-optioNs-",2,2,0)break;
        case 3: draw_text_transformed(180,220,"-quit-",2,2,0)
            if mouse_check_button(mb_left)
            ||keyboard_check_pressed(keys[4])
                game_end()
            break;
    }
    draw_set_halign(fa_left)
}
else if menu=1{
 draw_set_halign(fa_center)
 var i=0
 var m=0;
 var p=0
 var cc=4
 if controler=0
 if mouse_x-view_xview&gt;(1+i)*(view_wview/5)-31
 if mouse_x-view_xview&lt;(1+i)*(view_wview/5)+30
 if mouse_y-view_yview&gt;view_hview-170
    menuSelect=floor((mouse_y-view_yview-090)/42)
 menuSelect=clamp(menuSelect,0,3)  
 if keyboard_check_pressed(keys[2]){
    menuSelect=menuSelect+1
    }
else if keyboard_check_pressed(keys[0]){
    menuSelect=menuSelect-1
    }
if menuSelect&gt;3
    menuSelect=0
else if menuSelect&lt;0
    menuSelect=3
 switch menuSelect{
    case 0: 
        if mouse_check_button_pressed(mb_left)
        ||keyboard_check_pressed(keys[4])
        ||keyboard_check_pressed(keys[3]){
            unitSelect[i]++
        }
        else if keyboard_check_pressed(keys[1]){
            unitSelect[i]--
        }
        break;
    case 3:
        if mouse_check_button(mb_left)
        ||keyboard_check_pressed(keys[4]){
            menu=99//generate map
            }
        break;
}   
//set limit
if unitSelect[i]&gt;=cc
    unitSelect[i]=0
else if unitSelect[i]&lt;0
    unitSelect[i]=cc-1
 draw_set_colour(c_dkgray)
 draw_rectangle((1+i)*(view_wview/5)-31,10,(1+i)*(view_wview/5)+30,view_hview-10,false)
 draw_set_colour(c_ltgray)
 draw_rectangle((1+i)*(view_wview/5)-27,15,(1+i)*(view_wview/5)+26,65,false)
 draw_sprite_ext(return_unit(unitSelect[i],1,0),0,(1+i)*(view_wview/5),60,2,2,0,-1,1)
 draw_sprite_ext(return_face(return_unit(unitSelect[i],1,0),0),0,(1+i)*(view_wview/5),60,2,2,0,-1,1)
 draw_set_colour(c_orange)
 draw_text_transformed((1+i)*(view_wview/5)+6,view_hview-170,"CLASS ",2,2,0)
 draw_text_transformed((1+i)*(view_wview/5),view_hview-84,"SKILL",2,2,0)
 draw_text_transformed((1+i)*(view_wview/5),view_hview-60,"WEAPON",2,2,0)
 draw_set_colour(c_ltgray)
 if menuSelect!=0
 draw_text_transformed((1+i)*(view_wview/5),view_hview-158,return_unit(unitSelect[i],0,0),1,1,0)
 draw_text((1+i)*(view_wview/5),view_hview-151,string(unitSelect[i]+1)+"/"+string(cc))
 //draw_text((1+i)*(view_wview/5),view_hview-90,returnSkill(unitSkill[i],0,0,unitSelect[i]))
 //draw_text((1+i)*(view_wview/5),view_hview-61,return_Wep(unitWep[i],0,0,unitSelect[i]))
 //var m=returnSkill(unitSkill[i],3,0,unitSelect[i])
 //var p=return_Wep(unitWep[i],3,0,unitSelect[i])
 draw_text((1+i)*(view_wview/5),view_hview-73,string(unitFace[i])+"/"+string(m))
 draw_text((1+i)*(view_wview/5),view_hview-44,string(unitWep[i]+1)+"/"+string(p+1))
 draw_text_transformed((1+i)*(view_wview/5),view_hview-25,"READY",2,2,0)
 draw_set_colour(c_white)
 return_unit(unitSelect[i],2,i)
 var ab=a[i],ib=int[i],db=d[i],tb=t[i],lb=l[i]
 //returnSkill(unitSkill[i],2,i,unitSelect[i])
 //return_Wep(unitWep[i],2,i,unitSelect[i])
 //draw stats
 draw_text((1+i)*(view_wview/5),view_hview-143,"HP:"+string(hp[i]));
 draw_text((1+i)*(view_wview/5),view_hview-136,"SP:"+string(sp[i]));
 //with bonus
 draw_sprite_ext(hpBar,0,(1+i)*(view_wview/5)-9,view_hview-129,a[i]*2,2,0,c_orange,1)
 draw_sprite_ext(hpBar,0,(1+i)*(view_wview/5)-9,view_hview-123,int[i]*2,2,0,c_orange,1)
 draw_sprite_ext(hpBar,0,(1+i)*(view_wview/5)-9,view_hview-117,d[i]*2,2,0,c_orange,1)
 draw_sprite_ext(hpBar,0,(1+i)*(view_wview/5)-9,view_hview-111,l[i]*2,2,0,c_orange,1)
 draw_sprite_ext(hpBar,0,(1+i)*(view_wview/5)-9,view_hview-105,t[i]*2,2,0,c_orange,1)
 //base stats
 draw_sprite_ext(hpBar,0,(1+i)*(view_wview/5)-9,view_hview-129,ab*2,2,0,c_white,1)
 draw_sprite_ext(hpBar,0,(1+i)*(view_wview/5)-9,view_hview-123,ib*2,2,0,c_white,1)
 draw_sprite_ext(hpBar,0,(1+i)*(view_wview/5)-9,view_hview-117,db*2,2,0,c_white,1)
 draw_sprite_ext(hpBar,0,(1+i)*(view_wview/5)-9,view_hview-111,lb*2,2,0,c_white,1)
 draw_sprite_ext(hpBar,0,(1+i)*(view_wview/5)-9,view_hview-105,tb*2,2,0,c_white,1)
 draw_set_colour(c_ltgray)
 draw_text((1+i)*(view_wview/5)-17,view_hview-129,"ATK:");
 draw_text((1+i)*(view_wview/5)-17,view_hview-123,"INT:");
draw_text((1+i)*(view_wview/5)-17,view_hview-117,"DEF:");
draw_text((1+i)*(view_wview/5)-17,view_hview-111,"RES:");
draw_text((1+i)*(view_wview/5)-17,view_hview-105,"TEC:");
 draw_set_colour(c_white)
 switch menuSelect{
     case 0: draw_text((1+i)*(view_wview/5),view_hview-158,"-"+return_unit(unitSelect[i],0,0)+"-")break;
     //case 1: draw_text((1+i)*(view_wview/5),view_hview-90,"-"+returnSkill(unitSkill[i],0,0,unitSelect[i])+"-")break;
    // case 2: draw_text((1+i)*(view_wview/5),view_hview-61,"-"+return_Wep(unitWep[i],0,0,unitSelect[i])+"-")break;
     case 3: draw_text_transformed((1+i)*(view_wview/5),view_hview-25,"-READY-",2,2,0)break;
 }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///unit shadow and reset some variables
draw_set_colour(c_black)
draw_set_alpha(0.5)
with (oUnit)
{
    if draw&gt;0
    if visible
    if object_index!=oGreatTree{
        draw_ellipse(ax+x+6.5-sprite_get_width(sprite_index)/2,ay+y+7-sprite_get_width(sprite_index)/2,
        ax+x+6.5+sprite_get_width(sprite_index)/2,ay+y+7+sprite_get_width(sprite_index)/2,false)
    }
    else{
        draw_ellipse(ax+x+15-sprite_get_width(sprite_index)/2,ay+y+15-sprite_get_width(sprite_index)/2,
        ax+x+15+sprite_get_width(sprite_index)/2,ay+y+15+sprite_get_width(sprite_index)/2,false)
    }
}
draw_set_alpha(1)

//reset info tile
ix=-1
iy=-1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#2 draw tile and grid
draw_set_alpha(gridAlpha)
draw_set_colour(c_black)
for (var i=floor(view_yview/15)*15-15*5;i&lt;floor(view_yview/15)*15+view_wview+15;i+=15)
    draw_line(0,i-1,room_width,i-1)
for (var i=floor(view_xview/15)*15-15;i&lt;floor(view_xview/15)*15+view_wview+15;i+=15)
    draw_line(i-1,0,i-1,room_height)
draw_set_alpha(1)
//draw selected
if selected!=noone
if phase=0
if ds_map_find_value(aiTurns, currentTurn)&gt;=0{
    /*draw_set_colour(c_yellow)
    draw_set_alpha(0.5)
    draw_rectangle(selected.x,selected.y,selected.x+13,selected.y+13,false)
    draw_set_alpha(1)*/
var c=selected
var path=path_add()
mp_grid_clear_cell(grid,c.x/15,c.y/15)
//show where you can move
    for (var i=-c.mov*15;i&lt;=c.mov*15;i+=15){
        for (var j=-c.mov*15;j&lt;=c.mov*15;j+=15){
        if mp_grid_path(grid,path,c.x+7,c.y+7,c.x+i+7,c.y+j+7,false)
        if path_get_number(path)-1&lt;=c.mov{
            draw_set_colour(c_aqua)
            draw_set_alpha(0.5)
            draw_rectangle(i+c.x,j+c.y,i+c.x+13,j+c.y+13,false)
            draw_set_alpha(1)
            if xx=i+c.x
            if yy=j+c.y{
                    ix=xx
                    iy=yy
                    itext="move"
                }
            }
        }
    }

path_delete(path)

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw move dist over unit when not selecting any
if menu=-1
if ds_map_find_value(aiTurns, currentTurn)&gt;=0
if selected=noone{
    add_all_to_map()
    selected=instance_place(xx,yy,oUnit);
    if selected!=noone
    if selected.draw&gt;0{
        var c=selected
        var path=path_add()
        mp_grid_clear_cell(grid,c.x/15,c.y/15)
        //show where you can move
        //draw_set_colour(c_teal)
        //draw_set_alpha(0.5)
        var range=c.mov
        for (var i=-range*15;i&lt;=range*15;i+=15){
            for (var j=-range*15;j&lt;=range*15;j+=15){
            if mp_grid_path(grid,path,c.x+7,c.y+7,c.x+i+7,c.y+j+7,false)
            if path_get_number(path)-1&lt;=c.mov{
                draw_sprite_ext(box7x7,0,i+c.x+3,j+c.y+3,1,1,0,c_aqua,0.5)
                //draw_rectangle(i+c.x,j+c.y,i+c.x+13,j+c.y+13,false)
                }
            }
        }
        //draw_set_alpha(1)
        path_delete(path)
        //special Cases
        if c.object_index=oCampfire
            draw_sprite_ext(AOE_range1s,0,c.x,c.y,1,1,0,c_lime,0.5)
    }
    selected=noone
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw where you can attack
if selected!=noone
if phase=3
if ds_map_find_value(aiTurns, currentTurn)&gt;=0{
var c=selected
var range=return_wep_range(c.item[c.wep])
//show where you can attack
    for (var i=-range*15;i&lt;=range*15;i+=15){
        for (var j=-range*15;j&lt;=range*15;j+=15){
        if abs(i/15)+abs(j/15)&lt;=range
        if i!=0||j!=0{
            draw_set_colour(c_orange)
            var inst=instance_place(i+c.x,j+c.y,oUnit)
            if inst!=noone{
                if inst.combat&lt;=0&amp;&amp;(inst.marker=2||inst.team=c.team)&amp;&amp;abs(i/15)+abs(j/15)&lt;=1{
                    draw_set_colour(c_blue)
                    }
                else if inst.combat&lt;=0&amp;&amp;allyMatrix[#inst.team,c.team]=0&amp;&amp;!object_is_ancestor(inst.object_index,oObj)&amp;&amp;abs(i/15)+abs(j/15)&lt;=1{
                    draw_set_colour(c_blue)
                }
                else{
                    draw_set_colour(c_red)
                    }
            }
            draw_set_alpha(0.7)
            draw_rectangle(i+c.x,j+c.y,i+c.x+13,j+c.y+13,false)
            draw_set_alpha(1)
            }
        }
    }

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw where you can throw
if selected!=noone
if phase=7
if ds_map_find_value(aiTurns, currentTurn)&gt;=0{
var c=selected
var range=ceil((ceil(sqrt(c.stats[2,0])*2)-return_item_wt(c.item[menuSel])/2)/2)
//show where you can move
    for (var i=-range*15;i&lt;=range*15;i+=15){
        for (var j=-range*15;j&lt;=range*15;j+=15){
        if abs(i/15)+abs(j/15)&lt;=range
        if !place_meeting(i+c.x,j+c.y,oObj)
       // if i!=0||j!=0
        {
            draw_set_colour(c_orange)
            draw_set_alpha(0.7)
            draw_rectangle(i+c.x,j+c.y,i+c.x+13,j+c.y+13,false)
            draw_set_alpha(1)
            if xx=i+c.x
            if yy=j+c.y{
                    ix=xx
                    iy=yy
                    itext="throw"
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw where you can use skill
if selected!=noone
if phase=11
if ds_map_find_value(aiTurns, currentTurn)&gt;=0{
var c=selected
var range = abs(return_skill_range(c.skill[menuSel]))
var area_type= return_skill_area_type(c.skill[menuSel])
switch area_type{
    case 0: 
            for (var i=-range*15;i&lt;=range*15;i+=15){
                for (var j=-range*15;j&lt;=range*15;j+=15){
                if abs(i/15)+abs(j/15)&lt;=range
                if i!=round(xx/15)*15&amp;&amp;j!=round(yy/15)*15{
                    draw_set_colour(c_orange)
                    draw_set_alpha(0.7)
                    draw_rectangle(i+c.x,j+c.y,i+c.x+13,j+c.y+13,false)
                    draw_set_alpha(1)
                    }
                }
            }break;
    case 1:
        for (var i=-range*15;i&lt;=range*15;i+=15){
            for (var j=-range*15;j&lt;=range*15;j+=15){
            if abs(i/15)+abs(j/15)&lt;=abs(range)
            if (i==0||j==0)
            if i!=round(xx/15)*15&amp;&amp;j!=round(yy/15)*15{
                draw_set_colour(c_orange)
                draw_set_alpha(0.7)
                draw_rectangle(i+c.x,j+c.y,i+c.x+13,j+c.y+13,false)
                draw_set_alpha(1)
                }
            }
        }break;
    case 2:
        for (var i=-range*15;i&lt;=range*15;i+=15){
            for (var j=-range*15;j&lt;=range*15;j+=15){
            if (i&lt;=15&amp;&amp;i&gt;=-15)||(j&lt;=15&amp;&amp;j&gt;=-15)
            if i!=round(xx/15)*15&amp;&amp;j!=round(yy/15)*15{
                draw_set_colour(c_orange)
                draw_set_alpha(0.7)
                draw_rectangle(i+c.x,j+c.y,i+c.x+13,j+c.y+13,false)
                draw_set_alpha(1)
                }
            }
        }break;
    case 3: 
            for (var i=-range*15;i&lt;=range*15;i+=15){
                for (var j=-range*15;j&lt;=range*15;j+=15){
                if abs(i/15)+abs(j/15)&lt;=range
                if i!=round(xx/15)*15&amp;&amp;j!=round(yy/15)*15{
                    draw_set_colour(c_orange)
                    draw_set_alpha(0.7)
                    draw_rectangle(i+c.x,j+c.y,i+c.x+13,j+c.y+13,false)
                    draw_set_alpha(1)
                    }
                }
            }break;
        }//end switch
    draw_skill_area_type(c.skill[menuSel],xx,yy,c,0)
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw where you can use item
if selected!=noone
if phase=9
if ds_map_find_value(aiTurns, currentTurn)&gt;=0{
var c=selected
var range = return_item_range(c.item[menuSel])
var area_type= 0
switch area_type{
    case 0: 
            for (var i=-range*15;i&lt;=range*15;i+=15){
                for (var j=-range*15;j&lt;=range*15;j+=15){
                if abs(i/15)+abs(j/15)&lt;=range
                if i!=round(xx/15)*15&amp;&amp;j!=round(yy/15)*15{
                    draw_set_colour(c_orange)
                    draw_set_alpha(0.7)
                    draw_rectangle(i+c.x,j+c.y,i+c.x+13,j+c.y+13,false)
                    draw_set_alpha(1)
                    }
                }
            }break;
    }//end switch
    //draw_skill_area_type(1,xx,yy,c)
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///last
//draw_self()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debugging, make objects
if global.production=0
{
if keyboard_check_pressed(ord('K'))
    randPos++
else if keyboard_check_pressed(ord('L'))
    randPos--
if randPos&gt;999
    randPos=0
if randPos&lt;0
    randPos=999
if keyboard_check(vk_up)
    debugObj++
if keyboard_check_pressed(vk_down)
    debugObj--
/*if keyboard_check(vk_left)//||keyboard_check(keys[6])
    view_angle-=2
    //camTurnDir=-1*/
debugObj=clamp(debugObj,0,object47-oUnit-1)
var obj=noone
if debugObj&gt;0
var obj=oUnit+debugObj
if obj!=noone{
draw_sprite_ext(object_get_sprite(obj),0,x+7,y+7,1,1,-view_angle,-1,0.5)
if keyboard_check_pressed(vk_enter)
if !place_meeting(x,y,oUnit){
    var inst=instance_create(floor(x/15)*15,floor(y/15)*15,obj);
    if obj&gt;=oJuicebox&amp;&amp;obj&lt;oBuilding
        inst.use=return_item_usage_default(inst.item)
    else{
    inst.team=currentTurn
    //inst.dir=round(-view_angle/90)
    }
    var temp=instance_create(x+7,y+7,oEff);
    temp.sprite_index=spawn_eff
    }
}
if keyboard_check(ord('I'))//&amp;&amp;selected=noone
    eventScene=true
else
    eventScene=false
if selected=noone
if keyboard_check_pressed(vk_backspace)
{
    var inst=instance_place(x,y,oUnit)
    if inst=noone
        inst=instance_place(x,y,oItem)
    if inst!=noone{
        with inst
            instance_destroy()
        alarm[10]=1
    }
}

if keyboard_check_pressed(ord('I')){
    var inst=instance_place(x,y,oUnit)
        if inst!=noone
            //inst.item[array_length_1d(inst.item)]=0
        
            with inst{
                xp=mxp
                levelup()
            }
}

//cnage grid apha
if keyboard_check(ord('O'))
if gridAlpha&gt;0
    gridAlpha-=0.1
if keyboard_check_pressed(ord('P'))
if gridAlpha&lt;1
    gridAlpha+=0.1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="48">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.production=0{
if debugging=1
    debugging=0
else
    debugging=1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
