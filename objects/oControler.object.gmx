<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>cruser</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bossList = ds_list_create()
//ds_list_add(bossList,oDragon1)
ds_list_add(bossList,oWurm)

difficulty = 0//max 2
warningTurn = 5
dangerTurn = 10

instance_create(x-view_wview/2,y-view_hview/2,oCamera)
psudoRight = 0
mouse_xprevious = mouse_x
mouse_yprevious = mouse_y
image_speed=0.1
var width=room_width/15;
var height=room_height/15;
map=ds_grid_create(width,height)
moveAtkArea=ds_grid_create(12*2+1,12*2+1)
atkArea=ds_grid_create(6*2+1,6*2+1)
level = 1
playerColour[0]=make_colour_hsv(163, 240, 250);//close to blue
playerColour[1]=c_lime
playerColour[2]=c_red
playerColour[3]=c_yellow

for (var i =0 ; i &lt;4;i++)
    playerGold[i]=0

global.colourSwitch[0]=0
global.colourSwitch[1]=0
global.colourSwitch[2]=0
global.colourSwitch[3]=0

window_set_size(view_wview*3,view_hview*3+3)
playerMax=4
playerMin=0

maxChar = 8

unitStarted=0

logVisable=0
for (var i=0;i&lt;20;i++)
    log[i]=""

window_set_cursor( cr_none)

for (var i=0;i&lt;playerMax;i++){
    unitSelect[i]=-1
    hp[i]=0
    pow[i]=0
    mov[i]=0
    range[i]=0
    des[i]=0
    }
    
viewW = view_wview
viewH = view_hview
    
hit=0
miss=0
cur=0
hold=0
delay=0
viewTurn=0
turnTime=0
timePhase0=0//selecting
timePhase1=0//moving
timePhase3=0//to attack
timePhase4=0//attacking 1
timePhase5=0//attacking 2
timePhase8=0//using skill
timePhase11=0//skill
currentNumber=0
globalvar pixelFont,pixelBlock,pixelSquish;
pixelFont=font_add_sprite_ext(letters,"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.?![]()/\&lt;&gt;:-+'%",true,1)
pixelBlock=font_add_sprite_ext(lettersBlock,"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.?![]()/\&lt;&gt;:-+'%",true,1)
pixelSquish=font_add_sprite_ext(lettersBlock,"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.?![]()/\&lt;&gt;:-+'%",true,-1)
unitList=ds_list_create()
allUnits=ds_list_create()
aiTurns=ds_map_create()
//mapped to -1 is ai
ds_map_add(aiTurns,0,0)
ds_map_add(aiTurns,1,-1)
ds_map_add(aiTurns,2,-1)

xx=x
yy=y

//info stuff
ix=-1
iy=-1
itext=""

controler=0
camTurnDir=0
eventScene=0
selected=noone
eventOver=noone
keys[0]=ord('W')
keys[1]=ord('A')
keys[2]=ord('S')
keys[3]=ord('D')
keys[4]=ord('F')
keys[5]=ord('G')
keys[6]=ord('Q')
keys[7]=ord('E')
display_set_gui_size(360,240);
globalvar grid;
grid = mp_grid_create(0,0,(room_width)/15+2,(room_height)/15+1,15,15);
//used to determain what actions you can take
phase=0
menuSel=0
menuSel2=-1
loop=0
//ai
priorityLimit=-1
option=0

currentTurn=0
turnsSurvive=0
gridF1= ds_grid_create((room_width)/15+1,(room_height)/15+1);
ds_grid_clear(gridF1,-1)
gridF2= ds_grid_create((room_width)/15+1,(room_height)/15+1);
ds_grid_clear(gridF2,-1)
infoTime=0
target=noone
globalvar hour,minu;//1 turn = 10 min
hour=7
minu=0

globalvar randNum,randPos;
randPos=0;
for (var i=0;i&lt;1000;i++){
    randNum[i]=irandom(99)
}
//for sprite idle
globalvar udg,ch;
udg=1
ch=0
var inst,inst2;
/*
inst=instance_create(x,y,oFighter);
ds_list_add(unitList,inst)
xx=inst.xx
yy=inst.yy
view_xview=inst.xx-view_wview/2
view_yview=inst.yy-view_hview/2
//inst.xp=100
inst=instance_create(x+15,y,oArcher);
ds_list_add(unitList,inst)
inst=instance_create(x+15,y+15,oHealer);
ds_list_add(unitList,inst)
inst=instance_create(x,y+15,oMage);
ds_list_add(unitList,inst)*/
//inst=instance_create(x,y,oCampfire);
//inst.ai=0 
var sx=15;
var sy=15;
/*inst=instance_create(x-15*sx,y+15*sy,oMerchant)
inst.team=1
inst.ai=5
inst.xp=40
inst.marker=2
inst2=instance_create(x-15*(sx+1),y+15*sy,oHealer)
inst2.team=1
inst2.ai=3
inst2.link=inst
inst2.xp=40
inst2=instance_create(x-15*(sx+2),y+15*sy,oFighter)
inst2.team=1
inst2.ai=4
inst2.link=inst
inst2.xp=40
/*
inst=instance_create(x+15*36,y-15*17,oDragon1)
inst.team=2
inst.marker=1

create_boss_area(x-15*20,y-15*15,0,0)
inst=instance_create(x-15*19,y-12*15,oWurm)
inst.team=2
inst.ai=1
inst.marker=1
inst.dir=3
for(var i=1;i&lt;=2;i++){
inst2=instance_create(x-(19)*15,y-(12+1)*15,oWurm)
inst2.team=2
inst2.ai=-1
inst2.link=inst
inst=inst2
}
for(var i=0;i&lt;=6;i++){
inst2=instance_create(x-(19-i)*15,y-(14)*15,oWurm)
inst2.team=2
inst2.ai=-1
inst2.link=inst
inst=inst2
}
create_city_dungeon(x+15*12,y+15*10)
add_all_to_map()
show_debug_overlay(true)*/
/*
for (var i=0;i&lt;ds_list_size(unitList);i++){
    selected=ds_list_find_value(unitList,i)
    update_fog()
}selected=noone*/
alarm[9]=1//activation cycle
//update_view_zone()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///menu stuff
menu=0
menuSelect=0
playerSelect=0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debugging
globalvar debugging;
global.production=0
global.mobile=0
global.vertical = 0//(room == room3)
debugging=0
debugObj=0
debug1=0;
if global.production=1
    randomize()
else
    {
    show_debug_overlay(1)
    }

if global.vertical = 1{
    view_hview = 180
    view_wview= 120
    view_hport = 180
    view_wview = 120
    display_set_gui_size(240,360);
}

if global.mobile{
    instance_create(view_wview-56,view_hview-36,oBackButton)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// options
option_zoom = true
gridAlpha=0.1
// Quick end
// 0 - end when you attack
// 1 - end after move/attack
// 2 -  same as 0, but also ends after you move if there are no further actions
quickEnd = 1 &amp;&amp; global.mobile
warningZone = false || !global.mobile
global.outline = true
global.musicVol=0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///tutorial
global.tutSel = 1
global.tutStairs = 0
global.tutMov = 0
global.tutAct = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///buttonpresses
button[0]=0 //w
button[1]=0 //a
button[2]=0 //s
button[3]=0 //d
button[4]=0 //sel
button[5]=0 //back
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///surfaces
var ratio = 1
globalvar mapRatio;
mapRatio = ratio/15;
map_surface = surface_create(room_width*mapRatio+1,room_height*mapRatio+1)
mapSize = 2
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///global variable
global.shaderAlpha = 0
global.cur_score=0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// auto turn
autoTurn = false
//tells if the user/ai gives an input
actionFlag = false
autoTargx = x
autoTargy = y
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Documentation
/*
oUnit.wepAOE
-------------------
x = where it can hit
...= indefinite
o = oObject
-------------------
0 - x

    xx
1 - xx
    xx

2 - x...xo

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check end turn
//show_debug_message("control alarm 10")
if selected=noone{
phase=0
//update_fog()
//selected=noone
check_turn_end()
add_all_to_map()
}
//alarm[10]=30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///activate things
if menu = -1{
instance_deactivate_all(true)
var radius = max(view_wview,view_hview)
instance_activate_region(xx-15-view_wview/2,yy+view_hview/2-view_wview/2-15,radius+30,radius+30,true)
instance_activate_region(view_xview-15,view_yview+view_hview/2-view_wview/2-15,radius+30,radius+30,true)
if selected!=noone
    instance_activate_region(selected.x-15-view_wview/2,selected.y+view_hview/2-view_wview/2-15,radius+30,radius+30,true)
}
else 
instance_activate_all()
/*
    instance_deactivate_all(true)
instance_activate_region(xx-view_wview,yy-view_wview,view_wview*2,view_wview*2,true)
instance_activate_region(view_xview-view_wview,view_yview-view_wview,view_wview*2,view_wview*2,true)
if selected!=noone
    instance_activate_region(selected.x-view_wview,selected.y-view_wview,view_wview*2,view_wview*2,true)
*/
//alarm[8]=1*/
alarm[9]=2

//always activate
instance_activate_object(oBackButton)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///end turn

if selected!=noone{
    //instance_activate_all()
    //alarm[9]=3
    //alarm[4]=2
    with selected{
    wait=1

    xx=x
    yy=y
    //move_camera(x,y)
    }
    
    //end of turn effects
    get_eff(selected,selected,selected.skillEnd)
    
    //events  
    var inst = instance_place(selected.x,selected.y,oKey)
    if inst!=noone
    if findStatus(selected,1)&lt;0{
        with inst
            instance_destroy()
        addStatus(1,selected,1,1)
    }
    
    inst = instance_place(selected.x,selected.y,oCoin)
    if inst!=noone
    if findStatus(selected,2)&lt;0{
        with inst
            instance_destroy()
            audio_play_sound(sCoin,50,false)
        addStatus(1,selected,2,1)
    }
    
    inst = instance_place(selected.x,selected.y,oHealthPack)
    if inst!=noone{
        with inst
            instance_destroy()
            audio_play_sound(sHeal,50,false)
        selected.hp=min(selected.hp+1,selected.mhp)
        var txt=instance_create(selected.x+7-23*dsin(-view_angle),selected.y+7-23*dcos(-view_angle),DmgWord);
        txt.text="1"
        txt.colour=c_lime
    }
    
    //stairs
    if floor(selected.team)=0
    if place_meeting(selected.x,selected.y,oStairs){
        audio_play_sound(sStairs,50,false)
        global.cur_score+=level
        level++;
        menu = NEXTFLOORMENU;
        instance_create(x,y,oNextFloor)
        x=0
        y=0
        xx=0
        yy=0
        for (var i=0;i&lt;ds_list_size(unitList);i++){
            var char=ds_list_find_value(unitList,i)
            if instance_exists(char){
                instance_activate_object(char)
                if findStatus(char,2)&gt;=0{
                    playerGold[0]+=1
                    global.cur_score += 5
                }
            }
        }
    }
    
    inst = instance_place(selected.x,selected.y,oTeleporter)
    var c = selected
    if inst!=noone{
        with (oTeleporter){
            if id != inst
            if !place_meeting(x,y,oUnit)
            if colourId = inst.colourId{
                audio_play_sound(sHeal,50,false)
                c.x = x
                c.y = y
                c.xx=c.x
                c.yy=c.y
                if c.draw&gt;0
                    move_camera(c.xx,c.yy)
                oControler.x = c.x
                oControler.y = c.y
                oControler.xx = c.x
                oControler.yy =c.y
            }
        }
    }
       
    
    phase=0
    if menu =-1{
    instance_activate_all()
    update_fog()
    selected=noone
    check_turn_end()
    add_all_to_map()
    }
}
//for ai
priorityLimit=-1
option=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#-1 other button press getters
if keyboard_check_pressed(vk_backspace){
    keyboard_key_press(oControler.keys[5])
    }
/*
if instance_exists(oBackButton){
    if oBackButton.over  
    {
        if mouse_check_button_released(mb_left){
            keyboard_key_press(keys[5])
        }else{
            if button[5]&gt;1{
                keyboard_key_release(keys[5])
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#0 Button presses
var changed;
for (var i=0;i&lt;6;i++){
    changed[i] = 0
}

if controler = 1||global.mobile // keyboard
{
    for (var i = 0;i&lt;6;i++){
        button[i] = keyboard_check(keys[i]) + min(1,button[i])
        changed[i] = keyboard_check(keys[i])
        }
}
if controler = 0{
    for (var i = 0;i&lt;4;i++){
        changed[i] = 0
    }
    if ds_grid_get(gridF1,clamp(floor(mouse_x/15),0,room_width/15),clamp(floor(mouse_y/15),0,room_height/15))&gt;-1
    {    
        button[4] = mouse_check_button_released(mb_left) + min(1,button[4]) 
        button[5] = mouse_check_button_released(mb_right) + min(1,button[5])
        changed[4] = mouse_check_button_released(mb_left) 
        changed[5] = mouse_check_button_released(mb_right) 
    }
}
for (var i=0;i&lt;6;i++){
    if !changed[i]
        button[i]=0
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#1 move to unit on current turn
var i=0
if !eventScene
if menu=-1
if ds_map_find_value(aiTurns, currentTurn)&gt;=0
if selected=noone
if button[5] == 1{
    if !ds_list_empty(unitList){
        var inst=ds_list_find_value(unitList,currentNumber)
        instance_activate_object(inst)
        if instance_exists(inst)
        {
            if xx=inst.x
            &amp;&amp; yy=inst.y{
                currentNumber++
                if currentNumber&gt;=ds_list_size(unitList)
                    currentNumber=0
                inst=ds_list_find_value(unitList,currentNumber)
                var lim=0;
                while (lim&lt;ds_list_size(unitList)&amp;&amp;instance_exists(inst)&amp;&amp;inst.wait=1){
                    currentNumber++
                    if currentNumber&gt;=ds_list_size(unitList)
                        currentNumber=0
                    inst=ds_list_find_value(unitList,currentNumber)
                    lim++
                }
                x=inst.xx
                y=inst.yy
                xx=x
                yy=y
                move_camera(xx,yy)
            }else{
                var lim=0;
                while (lim&lt;ds_list_size(unitList)&amp;&amp;instance_exists(inst)&amp;&amp;inst.wait=1){
                    currentNumber++
                    if currentNumber&gt;=ds_list_size(unitList)
                        currentNumber=0
                    inst=ds_list_find_value(unitList,currentNumber)
                    lim++
                }
                x=inst.xx
                y=inst.yy
                xx=x
                yy=y
                move_camera(xx,yy)
            }
        }
        /*var inst=ds_list_find_value(unitList,0)
        while(i&lt;ds_list_size(unitList)&amp;&amp;inst.wait!=0){
            i++
            inst=ds_list_find_value(unitList,i)
        }
        {
            x=inst.xx
            y=inst.yy
            xx=x
            yy=y
            view_xview=inst.xx-view_wview/2
            view_yview=inst.yy-view_hview/2
        }*/
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#2 when a unit is selected
if selected!=noone
if menu=-1
if !actionFlag
{
selected.shader=shaderSelect
if ds_map_find_value(aiTurns, currentTurn)&gt;=0{
    //instance_deactivate_all(true)
    instance_activate_region(view_xview,view_yview,view_wview,view_hview,true)
    instance_activate_region(selected.x-view_wview/2,selected.y-view_hview/2,view_wview,view_hview,true)
    var c=selected
    getMoveAndAttackRange(c)
    if c.mov&lt;=0
    if phase=0
        phase=2
    //movement
    if button[4] == 1
    if phase=0
    {
        var mGridW=ceil(ds_grid_width(moveAtkArea)/2)
        var gridValue = ds_grid_get(moveAtkArea,(xx-c.x)/15+mGridW,(yy-c.y)/15+mGridW)
        if (gridValue &gt; 0)
        {
            if global.mobile{
                if autoTargx==xx&amp;&amp;autoTargy=yy{
                    actionFlag = true;
                }else{
                    autoTargx = xx
                    autoTargy = yy
                }
            }
            else
            {
                actionFlag = true;
                autoTargx = xx
                autoTargy = yy
            }
        }
    }
    if button[5] == 1{//go back
        if phase!=0{
            move_camera(c.x,c.y)
        }
        if phase=0{
            phase=0
            add_all_to_map()
            {
            xx=selected.xx
            yy=selected.yy
            }
            selected=noone
            }
        else if phase=3{
            with selected{
            x=xx
            y=yy
            xprevious=x
            yprevious=y
            move_camera(x,y)
            }
            phase=0
            {
            xx=selected.xx
            yy=selected.yy
            }
            add_all_to_map()
            if selected.mov&lt;=0
                selected=noone
            }
    }
    
    else if phase=1{
        menuSel=0
    }
    else if phase=3{//attack   
        if (button[4] == 1){
            var mGridW=ceil(ds_grid_width(moveAtkArea)/2)
            var gridValue = ds_grid_get(moveAtkArea,(xx-c.x)/15+mGridW,(yy-c.y)/15+mGridW)
            if (gridValue &gt; 0)
            {
                {
                    actionFlag = true;
                    autoTargx = xx
                    autoTargy = yy
                }
            }
        }
    }//end phase 3
    
}

if phase=4{//damage step

}//end phase 4
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#3 move controler
if menu=-1
{
//NEW!
xx=floor(xx/15)*15
yy=floor(yy/15)*15
if phase&lt;=0
||phase=3
||phase=7
||phase=11
||phase=9

if (ds_map_find_value(aiTurns, currentTurn)&gt;=0&amp;&amp;!eventScene)||
(debugging=1){
room_speed=30
xx=clamp(xx,0,room_width-15)
yy=clamp(yy,0,room_height-15)
if controler=0{
if !global.mobile||mouse_check_button(mb_left){
    if ds_grid_get(gridF1,clamp(floor(mouse_x/15),0,room_width/15),clamp(floor(mouse_y/15),0,room_height/15))&gt;-1
    ||debugging=1
        {
        xx=floor(mouse_x/15)*15
        yy=floor(mouse_y/15)*15
        }
    }
}
var del=4
if !eventScene||debugging=1
{
if delay=0
{
    var xpre = xx
    var ypre = yy
    del=max(1,del-hold)
    if keyboard_check(keys[0]){
        yy-=15*round(dcos(-view_angle))
        xx-=15*round(dsin(-view_angle))
        controler=1
        delay=del
        hold++
        audio_play_sound(sMoveCruser,50,false)
        }
    else if keyboard_check_released(keys[0]){
        delay=0
    }
    if keyboard_check(keys[1]){
        xx-=15*round(dcos(-view_angle))
        yy+=15*round(dsin(-view_angle))
        controler=1
        delay=del
        hold++
        audio_play_sound(sMoveCruser,50,false)
        }
    else if keyboard_check_released(keys[1]){
        delay=0
    }
    if keyboard_check(keys[2]){
        yy+=15*round(dcos(-view_angle))
        xx+=15*round(dsin(-view_angle))
        controler=1
        delay=del
        hold++
        audio_play_sound(sMoveCruser,50,false)
        }
    else if keyboard_check_released(keys[2]){
        delay=0
    }
    if keyboard_check(keys[3]){
        xx+=15*round(dcos(-view_angle))
        yy-=15*round(dsin(-view_angle))
        controler=1
        delay=del
        hold++
        audio_play_sound(sMoveCruser,50,false)
        }
    else if keyboard_check_released(keys[3]){
        delay=0
    }
    if !keyboard_check(keys[0])
    if !keyboard_check(keys[1])
    if !keyboard_check(keys[2])
    if !keyboard_check(keys[3])
        hold=0
    if keyboard_check(keys[4])
    ||keyboard_check(keys[5]){
        controler=1
    }
    if ds_grid_get(gridF1,clamp(floor(xx/15),0,room_width/15),clamp(floor(yy/15),0,room_height/15))&lt;=-1
    if debugging=0
    {
        xx = xpre
        yy = ypre
    }
}
else if delay&gt;0 delay--
}
if mouse_check_button_released(mb_left)
|| mouse_check_button_released(mb_right)
    controler=0
//view angle
}

//if global.production=0{
if keyboard_check_pressed(keys[6])
    viewTurn--
else if keyboard_check_pressed(keys[7])
    viewTurn++
//}

if view_angle!=viewTurn*90
    view_angle-=9*sign(view_angle-viewTurn*90)

if view_angle&gt;360&amp;&amp;viewTurn*90&gt;360{
    view_angle=0
    viewTurn=1
    }
else if view_angle&lt;0&amp;&amp;viewTurn&lt;0{
    view_angle=360
    viewTurn=3
    }
if abs(xx-x)&gt;1
   x+=(xx-x)/2
else
    x=xx
if abs(yy-y)&gt;1
   y+=(yy-y)/2
else
    y=yy


//select unit
if button[4] == 1
if phase=0
if selected=noone
if !eventScene
{
    var inst=instance_place(xx,yy,oChar)
    if inst!=noone
    if !object_is_ancestor(inst.object_index,oObj)
    if inst.team=currentTurn
    if inst.wait=0{
        selected=inst
        autoTargx = xx
        autoTargy = yy
        actionFlag = false
        if controler=1 || global.mobile=1
        move_camera(selected.x,selected.y)
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#4 ai
if ds_map_find_value(aiTurns, currentTurn)&lt;0
if menu=-1
if !actionFlag
if oCamera.idle&gt;5
{
    if selected=noone
    if !eventScene
    {
        instance_activate_all()
        for (var i=0;i&lt;ds_list_size(unitList);i++){
           var char=ds_list_find_value(unitList,i)
           if char!=noone
           if instance_exists(char)
           if char.wait=0
           if char.hp&gt;0{
           if !instance_exists(char.link)||char.link.wait=1
           {
                selected=char
           }
           }
        }
        instance_deactivate_all(true)
        alarm[9]=2
        if selected!=noone{
            var c=selected
            if !debugging{
            if selected.draw=0
                room_speed=1000
            else
                room_speed=30
            }
            else room_speed=30
            
            if selected.mov&gt;0
            phase=0
            else{ 
                phase=3
                if !ds_grid_get(gridF1,selected.x/15,selected.y/15)&lt;0.2||debugging=1
                if (selected.x&lt;view_xview+15
                || selected.x&gt;view_xview+view_wview-15
                || selected.y&lt;view_yview+15
                || selected.y&gt;view_yview+view_hview-15)
                {
                    xx=selected.x
                    yy=selected.y
                    x=xx
                    y=yy
                    move_camera(xx,yy)
                }
            }
            instance_activate_region(view_xview-15,view_yview+view_hview/2-view_wview/2-15,view_wview+30,view_wview+30,true)
            instance_activate_region(selected.x-15-view_wview/2,selected.y+view_hview/2-view_wview/2-15,view_wview+30,view_wview+30,true)
            }
        else{
            check_turn_end()
            }
    }
    if oCamera.idle&gt;5
    if selected!=noone
    if instance_exists(selected)
    if alarm[9]&lt;=1
    {
    
    //speed up the room
    if !debugging{
    if selected.draw=0
        room_speed=1000
    else
        room_speed=30
    }
    else room_speed=30
    
    instance_activate_region(view_xview-15,view_yview+view_hview/2-view_wview/2-15,view_wview+30,view_wview+30,true)
    instance_activate_region(selected.x-15-view_wview/2,selected.y+view_hview/2-view_wview/2-15,view_wview+30,view_wview+30,true)
    //boss heal
    if selected.marker=1
    if selected.combat&lt;=0
    {
        //selected.hp=min(selected.hp+1,selected.mhp)
    }
    /*
    phase
    1
    3 attack
    */
    if phase=0{
        var close=noone
        var c=selected
        //get closest
        var dis = 0
        
        with (oChar){
            var u=id
            if (c.team !=team &amp;&amp; c.pow&gt;0)|| (c.team == team &amp;&amp; c.pow&lt;0 &amp;&amp; id!=c)
            {
                //mp_grid_clear_cell(grid,u.x/15,u.y/15)
                //if mp_grid_path(grid,u.path,c.x+7.5,c.y+7.5,u.x+7.5,u.y+7.5,false)
                {
                    var disFrom = (abs(c.x-x)+abs(c.y-y))/15
                    if close==noone||disFrom&lt;=dis
                    if disFrom&gt;0{
                        close = u
                        dis = disFrom
                    }
                }
                //mp_grid_add_cell(grid,u.x/15,u.y/15)
            }
        }
        
        switch c.ai{
        //follow linked 
        case -1:{
            if instance_exists(c.link) 
            &amp;&amp; (abs(c.link.x - c.x) + abs(c.link.y - c.y))/15 &lt;= 2
                close=c.link  
            else{
                c.link=noone
                //c.ai=1
                c.ai=0
                c.marker=1
                c.close=noone
                //c.wait=1
                }
            }break;

        //linked ai that follows and attacks
        case 2:
            if instance_exists(c.link){
                //NOTE aggro is reset at the start of each turn
                if c.link.aggro!=noone&amp;&amp;instance_exists(c.link.aggro){
                    close=c.link.aggro
                }
                else 
                    close=c.link
            }
            else{
                c.link=noone
            }
            break
        }
        
        //check if should move
        if close!=noone{
            actionFlag = true;
            autoTargx = close.x
            autoTargy = close.y
        }
        else{ 
            alarm[0]=1 
            phase=8}
    }//end phase 0
    else if phase=3{
        var c=selected
        option=0
        /*
        0 - attack
        */
        switch c.ai{
            case 2: break;
        }
        
        
        {
            if (c.ai!=2||!instance_exists(c.link)||
            (c.link.aggro!=noone&amp;&amp;instance_exists(c.link.aggro)))
            &amp;&amp;(c.ai!=5)
            {//continue attack
                var range=c.range
                var close=noone
                //get where you can attack
                    for (var i=-range*15;i&lt;=range*15;i+=15){
                        for (var j=-range*15;j&lt;=range*15;j+=15){
                        if abs(i/15)+abs(j/15)&lt;=range
                        if i!=0||j!=0{
                            var inst=instance_place(i+c.x,j+c.y,oUnit)
                            if inst!=noone
                            if !object_is_ancestor(inst.object_index,oObj)
                            if c.team!=inst.team
                            if close=noone||
                            abs(close.x-c.x)+abs(close.y-c.y)&gt;abs(inst.x-c.x)+abs(inst.y-c.y){
                                close=inst
                                }
                            }
                        }
                    }//end loop
                    
                    if c.ai=2&amp;&amp;instance_exists(c.link)&amp;&amp;c.link.aggro!=noone&amp;&amp;instance_exists(c.link.aggro)
                    {
                        if abs((c.link.aggro.x-c.x)/15)+abs((c.link.aggro.y-c.y)/15)&lt;=range
                        {
                            close=c.link.aggro
                        }
                    }
                    else if c.ai=4&amp;&amp;instance_exists(c.link)&amp;&amp;c.link.lastHitBy!=noone&amp;&amp;instance_exists(c.link.lastHitBy)
                    {
                        if abs((c.link.lastHitBy.x-c.x)/15)+abs((c.link.lastHitBy.y-c.y)/15)&lt;=range
                        {
                            close=c.link.lastHitBy
                        }
                    }
                    
                    if c.ai=7//dont attack
                        close=noone
                        
                        
                    if close=noone
                    ||selected.ai=-1 {//no target
                        alarm[0]=1
                    }
                    else{//attack
                        actionFlag = true;
                        autoTargx = xx
                        autoTargy = yy
                    }
                }else alarm[0]=1//ai 2 no attack
            }
            //cancel and kill self if no link or link is not in combat
            if c.ai=8{
            if !instance_exists(c.link)//||c.link.combat&lt;=0
            {
                c.hp=0
                phase=0
                selected=noone
            }
            }
        }//end phase 3
       
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#5 actual action move and attack
//autoTargx = x
//autoTargy = y
if selected!=noone
if menu=-1
//if actionFlag
{
    var c = selected
    var aiTurn = (ds_map_find_value(aiTurns, currentTurn)&gt;0)
    mp_grid_clear_cell(grid,c.x/15,c.y/15)
    
    //switch phase
    {
        if phase = 0{//select and move
            if !actionFlag &amp;&amp; ! global.mobile{
                autoTargx = xx
                autoTargy = yy
            }
                    
            var inst = instance_place(autoTargx,autoTargy,oUnit);
            var startPath = false
            add_all_to_map();
            //clear ally and self
            mp_grid_clear_cell(grid,c.x/15,c.y/15)
            for (var i=0;i&lt;ds_list_size(unitList);i++){
            var char=ds_list_find_value(unitList,i)
                if instance_exists(char){
                    mp_grid_clear_cell(grid,char.x/15,char.y/15)
                }
            }

            //if ds_grid_get(gridF1,clamp(floor(xx/15),0,room_width/15),clamp(floor(yy/15),0,room_height/15))&gt;-1 //not shadow
            if !place_meeting(autoTargx,autoTargy,oUnit)
            {
                mp_grid_path(grid,c.path,c.x+7.5,c.y+7.5,autoTargx+7.5,autoTargy+7.5,false) // can move there
                if floor(path_get_length(c.path)/15)&lt;=c.mov
                    startPath = true
                else
                {//travels furthest
                    mp_grid_path(grid,c.path,c.x+7.5,c.y+7.5,path_get_point_x(c.path,c.mov),
                        path_get_point_y(c.path,c.mov),false)
                    while(floor(path_get_length(c.path)/15)&gt;=2&amp;&amp;
                    place_meeting(path_get_point_x(c.path,path_get_number(c.path)-1)-7.5
                    ,path_get_point_y(c.path,path_get_number(c.path)-1)-7.5,oUnit)){
                    mp_grid_path(grid,c.path,c.x+7.5,c.y+7.5,
                        path_get_point_x(c.path,path_get_number(c.path)-2),
                        path_get_point_y(c.path,path_get_number(c.path)-2),false)
                    }
                    //if floor(path_get_length(c.path)/15)&gt;=2
                    startPath = true
                }
            }
            else if inst!=noone//if targeting a unit
            &amp;&amp; !object_is_ancestor(inst.object_index,oBlock)
            //&amp;&amp;((c.pow&gt;0 &amp;&amp; inst.team!=c.team)|| (c.pow&lt;0 &amp;&amp; inst.team ==c.team))
            {            
                //mp_grid_clear_cell(grid,autoTargx/15,autoTargy/15)// clear targeted cell
                
                var mGridW=ceil(ds_grid_width(moveAtkArea)/2)
                var aGridW=ceil(ds_grid_width(atkArea)/2)
                var movX = c.x
                var movY = c.y
                
                getMoveAndAttackRange(c)
                    
                if ds_grid_get(moveAtkArea,mGridW+(autoTargx-c.x)/15,mGridW+(autoTargy - c.y)/15)&gt;0
                &amp;&amp; inst!=c
                {   
                //targ is in atk range
                //atk range is reletive to targ
                    var prevX = path_get_point_x(c.path,path_get_number(c.path)-1)
                    var prevY = path_get_point_y(c.path,path_get_number(c.path)-1) 
                    var weight = 99
                    var moveDis = c.mov+1
                    var pathDis = c.mov+1
                    setAtkRange(c)
                    setMoveRangeNeg(c)
                    //based area around targ
                    ds_grid_multiply_grid_region(atkArea,moveAtkArea,0,0,ds_grid_width(moveAtkArea),ds_grid_height(moveAtkArea),
                    (c.x - autoTargx)/15 + aGridW - mGridW ,(c.y - autoTargy)/15 + aGridW - mGridW) 
                    {
                        for (var i=0;i&lt;ds_grid_width(atkArea);i++){
                        var s = ""
                            for (var j=0;j&lt;ds_grid_width(atkArea);j++){
                                var gridValue;
                                var xOff =(i-aGridW)*15
                                var yOff =(j-aGridW)*15
                                var dis = (abs(autoTargx+xOff-c.x) + abs(autoTargy+yOff-c.y))/15//c.mov
                                var disTarg = (abs(xOff)+abs(yOff))/15//return_wep_range(c.unit)
                                var disPath = (abs(autoTargx+xOff-prevX) + abs(autoTargy+yOff-prevY))/15
                                var try = disPath 
                                //* global.mobile
                                //+ (return_wep_range(c.unit) - disTarg
                                //) * !global.mobile
                                gridValue = ds_grid_get(atkArea,i,j)
                                s = s  + string(gridValue)
                                if (gridValue &lt; 0)//make sure you can move there
                                //if (disTarg&gt;=weight)//make it furthest atk range
                                if try &lt;= weight
                                if !place_meeting(autoTargx+xOff,autoTargy+yOff,oUnit)
                                ||instance_place(autoTargx+xOff,autoTargy+yOff,oUnit)==c
                                {
                                    if (aiTurn)||1{
                                        weight = try
                                        movX = autoTargx+xOff
                                        movY = autoTargy+yOff
                                    }
                                    else{
                                        if disTarg &gt; weight// found new furthest
                                            dis = moveDis
                                        if dis &lt;= moveDis{
                                                moveDis = dis
                                                movX = autoTargx+xOff
                                                movY = autoTargy+yOff
                                            }
                                        weight = disTarg
                                    }
                                    //pathDis = disPath
                                    //moveDis = dis
                                }
                            }
                            //show_debug_message(s)
                        }
                    }
                }
                else if  inst!=c
                {
                //move closer to target
                    mp_grid_clear_cell(grid,autoTargx/15,autoTargy/15)// clear targeted cell
                    mp_grid_path(grid,path0,c.x+7,c.y+7,autoTargx+7,autoTargy+7,false)    
                    var pathLen = path_get_length(path0)
                    setMoveRangeNeg(c)
                    var s = ""
                    for (var i=0;i&lt;ds_grid_width(moveAtkArea);i++){
                        for (var j=0;j&lt;ds_grid_width(moveAtkArea);j++){
                            var gridValue;
                            var xOff =(i-mGridW)*15
                            var yOff =(j-mGridW)*15
                            gridValue = ds_grid_get(moveAtkArea,i,j)
                            s= s + string(gridValue)
                            if (gridValue &lt; 0){
                                if !place_meeting(c.x+xOff,c.y+yOff,oUnit){
                                    if mp_grid_path(grid,path0,c.x+xOff+7,c.y+yOff+7,autoTargx+7,autoTargy+7,false){
                                        if path_get_length(path0)&lt;=pathLen{
                                            pathLen = path_get_number(path0)
                                            movX = c.x+xOff
                                            movY = c.y+yOff
                                            autoTargx = movX
                                            autoTargy = movY
                                        }
                                    }
                                }
                            }
                        }
                        //if actionFlag
                        //show_debug_message(s)
                        s = ""
                    }
                }
                if !place_meeting(movX,movY,oUnit)
                {
                    mp_grid_path(grid,c.path,c.x+7.5,c.y+7.5,movX+7.5,movY+7.5,false)
                    startPath = true
                    //show_d
                }
                else{
                    mp_grid_path(grid,c.path,c.x+7.5,c.y+7.5,c.x+7.5,c.y+7.5,false)
                    startPath = true
                }
            }
            else
            {
                actionFlag=false
            }
            
            if actionFlag
            &amp;&amp;(startPath)
            {
                if quickEnd || ds_map_find_value(aiTurns, currentTurn)&lt;0
                    actionFlag++;
                if place_meeting(autoTargx,autoTargy,oUnit) 
                &amp;&amp; instance_place(autoTargx,autoTargy,oUnit)!=c
                &amp;&amp; !quickEnd
                    actionFlag++
                if (c.draw=0
                &amp;&amp; ds_grid_get(gridF1,path_get_x(c.path,1)/15,path_get_y(c.path,1)/15)&lt;0.2
                &amp;&amp;!debugging)
                ||keyboard_check(vk_space)
                {
                    with c{
                       x=floor(path_get_x(path,1)/15)*15
                       y=floor(path_get_y(path,1)/15)*15
                       }
                       phase=3
                       menuSel=0
                       add_all_to_map()
                   }
                else{
                    var cx
                   var cy
                    with c{
                   path_start(path,3,path_action_stop,false)
                   cx=floor(path_get_x(path,1)/15)*15
                   cy=floor(path_get_y(path,1)/15)*15
                   }
                   //if you cant see the ai, camera moves to ai
                   if debugging{
                        xx=cx
                        yy=cy
                   }
                   if (cx&lt;view_xview+15
                    || cx&gt;view_xview+view_wview-15
                    || cy&lt;view_yview+15
                    || cy&gt;view_yview+view_hview-15)
                    //if !ds_grid_get(gridF1,selected.x/15,selected.y/15)&lt;0.2||debugging=1
                    //||debugging=1
                    {
                        xx=cx
                        yy=cy
                        x=xx
                        y=yy
                        move_camera(xx,yy)
                    }
                   phase=1
                }
            }else{
                actionFlag = 0
                //if ds_map_find_value(aiTurns, currentTurn)&lt;0
                //    show_debug_message("Error in moving")
            }
        }//break;
        if phase = 1{//://move -&gt; attack
            if global.mobile{
                move_camera(c.x,c.y)
                }
            if (c.path_position=1)||path_get_length(c.path)&lt;1
                ||path_get_number(c.path)&lt;1
                {
                       phase=3
                       add_all_to_map()
                       move_camera(c.x,c.y)
                       actionFlag--;
                }
            }//break;
        if phase= 3{//://attack
            var atk_type = return_attack_type(c.unit)
            var inst = instance_place(autoTargx,autoTargy,oUnit);
            var normalAttack = 1
            if actionFlag &gt; 0
            {
            
                //check if self
                if (inst = c){                    
                    alarm[0]=2
                    phase=2.1
                    normalAttack = 0
                }
                // check if door
                if inst!=noone
                &amp;&amp; inst.object_index == oLockDoor
                &amp;&amp; ((abs(inst.x-c.x)+abs(inst.y-c.y))/15&lt;=1){
                    show_debug_message("door")
                    if (c.statusStr[findStatus(c,1)]&gt;0){
                        addStatus(1,c,1,-1)
                        alarm[0]=2
                        phase=2.1
                        with inst
                            instance_destroy()
                        normalAttack = 0
                    } else message_create("Need Key")
                } 
                
                if normalAttack
                    {//normal attack
                        setAtkRange(c)
                        var aGridW=ceil(ds_grid_width(atkArea)/2)
                        var inRange = ds_grid_get(atkArea,
                                    (autoTargx-c.x)/15+aGridW,
                                    (autoTargy-c.y)/15+aGridW)&gt;0
                        switch atk_type{
                            case 0:
                                if inst!=noone
                                &amp;&amp; inRange
                                &amp;&amp; inst!=selected
                                &amp;&amp; !object_is_ancestor(inst.object_index,oBlock)
                                &amp;&amp; (inst.team!=c.team &amp;&amp; return_attack_target(c.unit) == 0
                                ||inst.team ==c.team &amp;&amp; return_attack_target(c.unit) == 1){
                                    //good target
                                }
                                else
                                    inst = noone
                                break;
                            case 1: //no move, attack anywhere
                                if (c.x != c.xx || c.y != c.yy){//moved
                                    inst = noone
                                }else if inst!=noone{
                                    if inRange
                                    &amp;&amp; inst!=selected
                                    &amp;&amp; !object_is_ancestor(inst.object_index,oBlock)
                                    &amp;&amp; (inst.team!=c.team &amp;&amp; return_attack_target(c.unit) == 0
                                    ||inst.team ==c.team &amp;&amp; return_attack_target(c.unit) == 1){
                                        //good target
                                    }
                                    else inst = noone//target the ground
    
                                }
                                else {
                                    inst = instance_create(xx,yy,oTempTarg)
                                    phase=4
                                    loop=1
                                    selected.dir=floor(point_direction(selected.x+7,selected.y+7,autoTargx+7,autoTargy+7)/90)
                                    target=inst
                                    }
                                break;
                            case 2: //no move
                                if (c.x != c.xx || c.y != c.yy){//moved
                                    inst = noone
                                }else if inst!=noone
                                    &amp;&amp; inRange
                                    &amp;&amp; inst!=selected
                                    &amp;&amp; !object_is_ancestor(inst.object_index,oBlock)
                                    &amp;&amp; (inst.team!=c.team &amp;&amp; return_attack_target(c.unit) == 0
                                    ||inst.team ==c.team &amp;&amp; return_attack_target(c.unit) == 1){
                                        //good target
                                }
                                else {
                                    inst = noone//not in range
                                    }
                                break
                            case 3: //attack anywhere
                                if inst!=noone{
                                    if inRange
                                    &amp;&amp; inst!=selected
                                    &amp;&amp; !object_is_ancestor(inst.object_index,oBlock)
                                    &amp;&amp; (inst.team!=c.team &amp;&amp; return_attack_target(c.unit) == 0
                                    ||inst.team ==c.team &amp;&amp; return_attack_target(c.unit) == 1){
                                        //good target
                                    }
                                    else 
                                        inst = noone 
                                }
                                else {
                                    inst = instance_create(xx,yy,oTempTarg)
                                    phase=4
                                    loop=1
                                    selected.dir=floor(point_direction(selected.x+7,selected.y+7,autoTargx+7,autoTargy+7)/90)
                                    target=inst
                                    }
                                break;
                        }//end switch
                    
                        if inst!=noone
                        {
                            phase=4
                            loop=1
                            selected.dir=floor(point_direction(selected.x+7,selected.y+7,autoTargx+7,autoTargy+7)/90)
                            target=inst
                        }else{
                            if ds_map_find_value(aiTurns, currentTurn)&lt;0{
                                alarm[0]=2
                                phase=2.1
                            }
                            actionFlag=false
                        }
                    }
                }
                
            }//break;
        if phase = 4{//://damage calculation
            var c=selected
            if instance_exists(target){
            //attacking "animation"
            c.ax=cos(degtorad(point_direction(selected.x+7,selected.y+7,target.x+7,target.y+7)))*5
            c.ay=-sin(degtorad(point_direction(selected.x+7,selected.y+7,target.x+7,target.y+7)))*5
            c.alarm[0]=6
            c.dir=round(point_direction(selected.x+7,selected.y+7,target.x+7,target.y+7)/90)
            if (selected.draw=0
            &amp;&amp; ds_grid_get(gridF1,target.x/15,target.y/15)&lt;0.2)
            &amp;&amp;debugging=0{
                alarm[0]=1
                }
            else{
                alarm[0]=max(13)
                }
            //calculate dmg
            
            var atk_area=instance_create(target.x,target.y,oTempTarg);
            atk_area.depth=10000//-y*cos(degtorad(view_angle))+x*sin(degtorad(view_angle))
            var targ = target
            if c.wepAOE&gt;0{
                atk_area.x = c.x+7
                atk_area.y = c.y+7
                atk_area.sprite_index = return_wep_sprite_eff(c)
                atk_area.mask_index = return_wep_sprite_eff(c)
                atk_area.image_angle=round(point_direction(c.x,c.y,target.x,target.y)/90)*90
            
                var eff=instance_create(c.x+7,c.y+7,oEff);
                eff.sprite_index=return_wep_sprite_eff(c)
                eff.image_angle=round(point_direction(c.x,c.y,target.x,target.y)/90)*90+view_angle
                eff.rotate=!no_rotate_attack(eff.sprite_index)
                audio_play_sound(return_wep_sound(c),50,false)
                
                with (atk_area)
                    targ = instance_place(x,y,oChar)
            }
            while (targ!=noone){
                //path_clear_points(path2)
                if (targ!=c)
                if calculate_damage(c,targ,0)&gt;0||true
                {
                    //create eff
                    if (!(c.draw=0
                    &amp;&amp; ds_grid_get(gridF1,targ.x/15,targ.y/15)&lt;0.2)
                    ||debugging)
                    if c.wepAOE=0{
                        var eff=instance_create(targ.x+7,targ.y+7,oEff);
                        eff.sprite_index=return_wep_sprite_eff(c)
                        eff.image_angle=point_direction(c.x,c.y,
                                targ.x,targ.y)+view_angle
                        eff.rotate=!no_rotate_attack(eff.sprite_index)
                        audio_play_sound(return_wep_sound(c),50,false)
                    }
                }
                else{
                    //if (!(c.draw=0
                    //&amp;&amp; ds_grid_get(gridF1,targ.x/15,targ.y/15)&lt;0.2)
                    //||debugging)
                    //    audio_play_sound(sMiss,50,false)
                }
                instance_deactivate_object(targ)
                with (atk_area)
                    targ = instance_place(x,y,oChar)
            }
            instance_activate_all()
            
            //end damage calc
            phase=5  
            actionFlag=false  
            return_end_of_damage_eff(c)
            }
            else{
                alarm[0]=2
                loop=1
                phase=5
                actionFlag=false
            }
        }
        /*default: 
            actionFlag = false
            break;*/
    }
    getMoveAndAttackRange(c)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///camera movement
if global.production=0{

if viewW = 180{
    if view_wview &gt; viewW{
        view_wview-=(view_wview-viewW)/2
        view_hview-=(view_hview-viewH)/2
        eventScene = true
    }
    else{
        view_wview = 180
        view_hview = 120
        eventScene = false
    }  
}
else{
    if view_wview &lt; viewW{
        view_wview-=(view_wview-viewW)/2
        view_hview-=(view_hview-viewH)/2
        eventScene = true
    }
    else{
        view_wview = 360
        view_hview = 240
        eventScene = false
    }
}

if option_zoom &amp;&amp; !global.mobile &amp;&amp; debugging=0{
    if selected!=noone&amp;&amp;ds_map_find_value(aiTurns, currentTurn)&gt;=0{
         viewW = 180
         viewH = 120
    }else{
        viewW = 360
        viewH = 240
    }
}

if keyboard_check(ord('R')){
    view_angle=0
    viewTurn=0
    view_wview=360
    view_hview=240
    view_xview=xx-view_wview/2
    view_yview=yy-view_hview/2
    }
if keyboard_check(ord('N')){
    view_wview*=1.1
    view_hview*=1.1
}
if keyboard_check(ord('M')){
    view_wview/=1.1
    view_hview/=1.1
}
var io=instance_place(xx-15*dsin(view_angle),yy+15*dcos(view_angle),oObj)
if camTurnDir=0
if 1=0
if io!=noone
if io.sprite_height&gt;=26
if io.draw&gt;0{
    if xx+dsin(view_angle)&lt;x+dsin(view_angle)
    ||yy+dcos(view_angle)&lt;y+dcos(view_angle)
        camTurnDir=-1
    else //if xx&lt;x
        camTurnDir=1
}
if keyboard_check(ord('T')){
//add time
minu+=1;
if minu&gt;=6{
    minu=0;
    hour+=1
    if hour&gt;=24
        hour=0
}
}
if camTurnDir!=0
{
    view_angle+=5*camTurnDir
    if view_angle=0
    ||view_angle=90
    ||view_angle=180
    ||view_angle=270
    ||view_angle=360
    camTurnDir=0
}
}
//if !ds_map_find_value(aiTurns, currentTurn)&lt;0
//if menu=-1
{
    var bound = min(view_hview, view_wview)/2
    if x &lt;= view_xview + view_wview/2 - bound + 15
        move_camera(oCamera.xx-15,oCamera.yy)
    else if x &gt;= view_xview + view_wview/2 + bound - 15
        move_camera(oCamera.xx+15,oCamera.yy)
    if y &lt;= view_yview + view_hview/2 - bound + 15
        move_camera(oCamera.xx,oCamera.yy-15)
    else if y &gt;= view_yview + view_hview/2 + bound - 15
        move_camera(oCamera.xx,oCamera.yy+15)
}
/*if keyboard_check_released(oControler.keys[5])
||mouse_check_button_released(mb_right){
oCamera.xx = x
oCamera.yy = y
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///generate map
if floor(menu)=99{
    var rx= room_width/30
    var ry= room_height/30
    generate_map(rx*15,ry*15,unitList)
    var inst;
    for (i=0;i&lt;4;i++){
    if unitSelect[i]&gt;=0{
        unitStarted++
        inst=instance_create((rx+(i%2))*15,(ry+floor(i/2))*15,
            return_unit(unitSelect[i],3,i));
        ds_list_add(unitList,inst)
        }
    }
    playerGold[0] = 4-unitStarted
    //inst=instance_create((rx+(i%2))*15,(ry+floor(i/2))*15,
    //    return_unit(unitSelect[i],3,i));
    //ds_list_add(unitList,inst)
    xx=inst.xx
    yy=inst.yy
    move_camera(xx,yy)
    var temp=instance_create(inst.x,inst.y,oEff);
    temp.sprite_index=spawn_eff
    for (var k=0;k&lt;ds_list_size(unitList);k++){
        selected=ds_list_find_value(unitList,k)
        update_fog()
    }selected=noone
    menu=-1
    audio_play_sound(TempBGM3,100,true)

}
if menu=-1
if (mouse_check_button(mb_left)||keyboard_check(keys[4])
)&amp;&amp;!place_meeting(x,y,oChar)&amp;&amp;selected=noone{
    psudoRight+=1
}
else
    psudoRight=0
if abs(mouse_x-mouse_xprevious)&gt;1||abs(mouse_y-mouse_yprevious)&gt;1{
    psudoRight=0
}
mouse_xprevious = mouse_x
mouse_yprevious = mouse_y
if psudoRight=30{
    if phase = 0{
        psudoRight=0
        for (var i=0;i&lt;ds_list_size(unitList);i++){
        var char=ds_list_find_value(unitList,i)
            if instance_exists(char){
            instance_activate_object(char)
            if char.hp&gt;0
                char.wait=1
            }
        }
        instance_activate_all()
        update_fog()
        selected=noone
        check_turn_end()
        add_all_to_map()
    }
    //end turn
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///audio
if level%5 = 0{
    if audio_is_playing(TempBGM3){
        audio_stop_sound(TempBGM3)
        audio_play_sound(TempBGM2,100,true)
    }
}else if audio_is_playing(TempBGM2){
    audio_stop_sound(TempBGM2)
    audio_play_sound(TempBGM3,100,true)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///global variable
global.shaderAlpha++
if global.shaderAlpha&gt;120
    global.shaderAlpha = 0
    
if global.production=0
if ds_map_find_value(aiTurns, currentTurn)&lt;0{
switch phase{
    case 0: timePhase0++; break;
    case 1: timePhase1++; break;
    case 3: timePhase3++; break;
    case 4: timePhase4++; break;
    case 5: timePhase5++; break;
}
}
warningTurn = 5 + floor(level/5) - difficulty*3
dangerTurn = 8 + floor(level/5) - difficulty*3
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(unitList)
ds_list_destroy(bossList)
ds_list_destroy(allUnits)
mp_grid_destroy(grid)
ds_grid_destroy(gridF1)
ds_grid_destroy(gridF2)
ds_grid_destroy(map)
ds_grid_destroy(moveAtkArea)
ds_grid_destroy(atkArea)
ds_map_destroy(aiTurns)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw mouse
if !global.mobile
||!global.production
draw_sprite(mouse,mouse_check_button(mb_left),device_mouse_x_to_gui(0),device_mouse_y_to_gui(0))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///1 draw self
if ds_map_find_value(aiTurns, currentTurn)&gt;=0{
if ds_grid_get(gridF1,round(xx/15),round(yy/15))&lt;=0
    draw_sprite_ext(sprite_index,image_index,x,y,1,1,image_angle,-1,1)

draw_self()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#2 draw info over unit
draw_set_alpha(1)
if selected!=noone
if ds_map_find_value(aiTurns, currentTurn)&gt;=0
if phase=3{
    var c=selected
    var range=c.range
    var inst=instance_place(xx,yy,oUnit)
    if inst!=noone
    &amp;&amp; inst.object_index = oLockDoor
    &amp;&amp; abs(xx-c.x)/15+abs(yy-c.y)/15&lt;=1
    &amp;&amp; c.statusStr[findStatus(c,1)]&gt;0{
        ix=x
        iy=y
        itext="uNlock"
    }
    else if ds_grid_get(gridF1,round(xx)/15,round(yy)/15)&gt;0 {
        if abs(xx-c.x)/15+abs(yy-c.y)/15&lt;=0
        { 
            ix=x
            iy=y
            itext="wait"
        }
    else if abs(xx-c.x)/15+abs(yy-c.y)/15&lt;=range
        { 
            if (inst!=noone&amp;&amp; inst!=c &amp;&amp; !object_is_ancestor(inst.object_index,oBlock))
            || (inst = noone &amp;&amp;return_attack_type(c.unit)=1)
            || (inst = noone &amp;&amp;return_attack_type(c.unit)=3)
            if inst = noone
            ||(inst.team!=c.team &amp;&amp; return_attack_target(c.unit) == 0
            ||inst.team ==c.team &amp;&amp; return_attack_target(c.unit) == 1)
            {
                ix=x
                iy=y
                itext =return_atk_name(c.unit)
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///3 draw turn ender
draw_set_alpha(1)
if phase=0{
    if psudoRight&gt;5{
    draw_sprite(healthBar,sprite_get_number(healthBar)*psudoRight/30,x,y)
    ix=x
    iy=y
    itext="eNd turN"
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///4 draw info on ground over tile
if ix!=-1&amp;&amp;iy!=-1
{
    draw_sprite_ext(infoSprite,0,ix+7,iy+7,1,1,-view_angle,-1,1)
    draw_set_font(pixelBlock)
    draw_set_colour(c_white)
    draw_text_transformed(ix+7+15*dcos(45-view_angle),iy+7-15*dsin(45-view_angle),itext
        ,1,1,-view_angle)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#1background
draw_background_stretched(greenBackground,0,0,room_width,room_height)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw selected unit
var temp=selected
var count=0
selected = noone
    
if menu=-1
if ds_map_find_value(aiTurns, currentTurn)&gt;=0||debugging=1
{
    var over=instance_place(xx,yy,oUnit);
    if ds_grid_get(gridF1,round(xx/15),round(yy/15))&gt;0||debugging=1
    if (over!=noone
    &amp;&amp;over.draw=1)
    ||debugging=1{
        selected=over;
        }
    if selected = noone{
        over=instance_place(xx,yy,oItem);
        if ds_grid_get(gridF1,round(xx/15),round(yy/15))&gt;0||debugging=1
        if (over!=noone
        &amp;&amp;over.visible)
        ||debugging=1{
            selected=over;
            }
    }
    if selected = noone{
        over=instance_place(xx,yy,oEvent);
        if ds_grid_get(gridF1,round(xx/15),round(yy/15))&gt;0||debugging=1
        if (over!=noone
        &amp;&amp;over.visible)
        ||debugging=1{
            selected=over;
            }
    }
    while (selected !=noone &amp;&amp; instance_exists(selected)){
        var c=selected
        draw_set_font(pixelFont)
    
        //image_blend=playerColour[c.team]
    
       draw_set_colour(c_dkgray)
       var String = ""
       if object_is_ancestor(c.object_index,oChar){
        String = c.name + " - "
                +"HP:"+string(c.hp)
                +" POW:"+string(c.pow)
                +" RANGE:"+string(c.range)
                +" MOV:"+string(c.mov)
                +" "+unit_default_values(c.object_index,-1)
       }
       else if object_is_ancestor(c.object_index,oItem)
            String = c.name + " - " + string(unit_default_values(c.object_index,-1))
       else
        String = c.name
       draw_rectangle(2,view_hport-14-count*11,
            string_width(String)+5,view_hport-3-count*11,false)
       draw_set_colour(c_white)
       draw_text_transformed(3,view_hport-11-count*11,string_upper(String),1,1,0)
       
       instance_deactivate_object(selected)
       
       selected=noone
        over=instance_place(xx,yy,oUnit);
        if ds_grid_get(gridF1,round(xx/15),round(yy/15))&gt;0||debugging=1
        if (over!=noone
        &amp;&amp;over.draw=1)
        ||debugging=1{
            selected=over;
            }
        if selected = noone{
            over=instance_place(xx,yy,oItem);
            if ds_grid_get(gridF1,round(xx/15),round(yy/15))&gt;0||debugging=1
            if (over!=noone
            &amp;&amp;over.visible)
            ||debugging=1{
                selected=over;
                }
        }
        if selected = noone{
            over=instance_place(xx,yy,oEvent);
            if ds_grid_get(gridF1,round(xx/15),round(yy/15))&gt;0||debugging=1
            if (over!=noone
            &amp;&amp;over.visible)
            ||debugging=1{
                selected=over;
                }
        }
       count++
   }
   instance_activate_all()
}
selected=temp
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw_map
if surface_exists(map_surface){
    surface_set_target(map_surface);
    if alarm_get(9)=1
        draw_clear_alpha(c_white,0);
        //draw_clear_alpha(c_black,0.3);

    with (oObj){
        if ds_grid_get(oControler.gridF1,x/15,y/15)&gt;=0{
            draw_set_colour(c_white)
            draw_rectangle(x*mapRatio,y*mapRatio,x*mapRatio+15*mapRatio-1,y*mapRatio+15*mapRatio-1,false)
        }
    }
    with (oEvent){
        if ds_grid_get(oControler.gridF1,x/15,y/15)&gt;=0{
            draw_set_colour(c_aqua)
            draw_rectangle(x*mapRatio,y*mapRatio,x*mapRatio+15*mapRatio-1,y*mapRatio+15*mapRatio-1,false)
        }
    }
    with (oItem){
        if ds_grid_get(oControler.gridF1,x/15,y/15)&gt;=1{
            draw_set_colour(c_orange)
            draw_rectangle(x*mapRatio,y*mapRatio,x*mapRatio+15*mapRatio-1,y*mapRatio+15*mapRatio-1,false)
        }
    }
    with (oChar){
        if ds_grid_get(oControler.gridF1,x/15,y/15)&gt;=1{
            draw_set_colour(oControler.playerColour[team])
           draw_rectangle(x*mapRatio,y*mapRatio,x*mapRatio+15*mapRatio-1,y*mapRatio+15*mapRatio-1,false)
        }
    }
    surface_reset_target()
}else{
    map_surface = surface_create(room_width*mapRatio+1,room_height*mapRatio+1)
}
var dist = point_distance(0,0,room_width/15,room_height/15)
draw_surface_ext(map_surface,display_get_gui_width()-surface_get_width(map_surface)*2-2-dcos(view_angle)*dist*0,
                            2+surface_get_height(map_surface)/2+dsin(view_angle)*dist*0,
                            mapSize,mapSize,view_angle*0,-1,1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#3 draw message
if logVisable&gt;0
if global.production=0
{
    var vx=5;
    draw_set_halign(fa_left)
    draw_set_font(pixelFont)
    draw_set_alpha(logVisable/4)
    draw_set_colour(c_dkgray)
    draw_set_alpha(0.6)
    var height=0
    for (var i=0;i&lt;array_length_1d(log);i++){
        height+=string_height_ext(log[i],6,110)+1
    }
    draw_rectangle(vx,190-height,vx+120,190,false)
    draw_set_alpha(logVisable)
    draw_set_colour(c_ltgray)
    height=0
    for (var i=0;i&lt;array_length_1d(log);i++){
        height+=string_height_ext(log[i],6,110)+1
        draw_text_ext(vx+4,191-height,log[i],6,110)
        }
    logVisable-=0.02
    draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#5 draw menus
turnTime++
var unitLeft=0;
for (var i=0;i&lt;ds_list_size(unitList);i++){
    var char=ds_list_find_value(unitList,i)
        instance_activate_object(char)
        if instance_exists(char)
        {
        if char.wait=0
            unitLeft++;
        }
}

if turnsSurvive &gt; dangerTurn
    draw_set_colour(c_red)
else if turnsSurvive &gt; warningTurn
    draw_set_colour(c_orange)
else
    draw_set_colour(c_fuchsia)
draw_set_font(pixelFont)
draw_set_halign(fa_left)
draw_set_alpha(1)
draw_text(2,40,"FPS: "+string(fps))

draw_text(2,10,"Floor: "+string(level))
draw_text(2,20,"TURN: "+string(turnsSurvive))
draw_sprite(coin,0,5,32)
draw_text(13,30,string(playerGold[0]))
draw_text(2,50,"uNit to move: "+string(unitLeft)+"/"+string(ds_list_size(unitList)))
if global.production=0{
draw_set_colour(c_fuchsia)
draw_set_font(pixelFont)
draw_set_alpha(1)
draw_text(2,130,"Current Phase" +string(phase))

var over=instance_place(xx,yy,oUnit)
if over!=noone
    draw_text(2,60,"over : "+string(over.name)+" "+string(over))
draw_text(2,70,"AI Time: "+string((timePhase0+timePhase1
+timePhase3+timePhase4+timePhase5+timePhase8+timePhase11)/30))
draw_text(2,80,"Phase SelectiNg: "+string(timePhase0/30))
draw_text(2,90,"Phase MoviNg: "+string(timePhase1/30))
draw_text(2,100,"Phase AttackiNg: "+string(timePhase3/30))
draw_text(2,110,"AttackiNg1: "+string(timePhase4/30))
draw_text(2,120,"AttackiNg2: "+string(timePhase5/30))
draw_text(2,140,"action flag: "+string(actionFlag))
draw_set_halign(fa_right)
draw_text(display_get_gui_width()-3,40,"Option zoom: "+string(option_zoom))
draw_text(display_get_gui_width()-3,50,"gridAlpha: "+string(gridAlpha))
draw_text(display_get_gui_width()-3,60,"quickEnd: "+string(quickEnd))
draw_text(display_get_gui_width()-3,70,"warningZone: "+string(warningZone))
draw_text(display_get_gui_width()-3,80,"outline: "+string(global.outline))
draw_text(display_get_gui_width()-3,90,"difficulty: "+string(difficulty))

}
draw_set_halign(fa_right)
draw_text(display_get_gui_width()-3,30,"Score: "+string(global.cur_score))
draw_set_halign(fa_left)
draw_set_font(pixelBlock)
//draw compass
if global.production=0{
    draw_sprite_ext(compassArrow,0,180,30,1,1,view_angle,-1,1)
    draw_set_colour(c_red)
    draw_text(178,28,"N")
    }


draw_set_colour(c_white)
if ds_map_find_value(aiTurns, currentTurn)&lt;0
{
    var waitCount;
    waitCount=0
    var count=0
    while ds_map_find_value(aiTurns, currentTurn+count)&lt;0
        &amp;&amp;waitCount&lt;ds_list_size(aiTurns)
        {
        count++
        waitCount++;
        if currentTurn+count&gt;playerMax{
            count=-currentTurn
        }
    }
    waitCount--
draw_text(10,10,"wait")
draw_rectangle(10,20,10+(unitLeft/ds_list_size(unitList))*40+40*waitCount,23,false)
}
/*
draw_set_halign(fa_right)
draw_text(358,10,"wasd: move coNtroler")
draw_text(358,22,"f: select")
draw_text(358,34,"g: back")
draw_set_halign(fa_left)
draw_set_font(pixelFont)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///start menu
if menu&lt;50{
    if mouse_check_button_pressed(mb_left)
    || mouse_check_button_pressed(mb_right){
        controler=0
    }
    
    if keyboard_check_pressed(keys[0])
    ||keyboard_check_pressed(keys[1])
    ||keyboard_check_pressed(keys[2])
    ||keyboard_check_pressed(keys[3])
    ||keyboard_check_pressed(keys[4])
    ||keyboard_check_pressed(keys[5])
        controler=1
}
if menu=0{    
    draw_set_font(pixelBlock)
    draw_set_halign(fa_center)
    draw_set_color(c_ltgray)
    if controler=0
    if mouse_x-view_xview&gt;120
    if mouse_x-view_xview&lt;240
    if mouse_y-view_yview&gt;160
        menuSelect=floor((mouse_y-view_yview-160)/20)
    else menuSelect=-1
    if keyboard_check_pressed(keys[2]){
        menuSelect=min(3,menuSelect+1)
        }
    else if keyboard_check_pressed(keys[0]){
        menuSelect=max(0,menuSelect-1)
        }
    draw_text_transformed(view_wview/2,view_hview-80,"New game",2,2,0)
    draw_text_transformed(view_wview/2,view_hview-60,"stats",2,2,0)
    draw_text_transformed(view_wview/2,view_hview-40,"optioNs",2,2,0)
    draw_text_transformed(view_wview/2,view_hview-20,"quit",2,2,0)
    draw_set_colour(c_white)
    switch menuSelect{
        case 0: draw_text_transformed(view_wview/2,view_hview-80,"-New game-",2,2,0)
            if mouse_check_button_released(mb_left)
            ||keyboard_check_pressed(keys[4]){
            //instance_create((1+0)*(view_wview/5),
            //    view_hview-30,oCharCreation)
            menu=1
            }
            break;
        case 1: draw_text_transformed(view_wview/2,view_hview-60,"-stats-",2,2,0)break;
        case 2: draw_text_transformed(view_wview/2,view_hview-40,"-optioNs-",2,2,0)
            if mouse_check_button_released(mb_left)
            ||keyboard_check_pressed(keys[4]){
            menu=2
            }
            break;
        case 3: draw_text_transformed(view_wview/2,view_hview-20,"-quit-",2,2,0)
            if mouse_check_button_released(mb_left)
            ||keyboard_check_pressed(keys[4])
                game_end()
            break;
    }
    draw_set_halign(fa_left)
}
else if menu=1{
 draw_set_halign(fa_center)
 draw_set_font(pixelFont)
     var j=playerSelect
     var m=0;
     var p=0
     var cc=maxChar
     if keyboard_check_pressed(keys[1])
        playerSelect--
    else if keyboard_check_pressed(keys[3])
        playerSelect++    
    if controler=0
        playerSelect = round((mouse_x-view_xview-50) /(view_wview/5))
    playerSelect = clamp(playerSelect,0,3)  
     if unitSelect[j]&gt;=0
         {
         if controler=0
         if mouse_x-view_xview&gt;(1+j)*(view_wview/5)-31
         if mouse_x-view_xview&lt;(1+j)*(view_wview/5)+30
         if mouse_y-view_yview&gt;view_hview-170
            menuSelect=floor((mouse_y-view_yview-090)/42)
         menuSelect=clamp(menuSelect,0,3)  
         if keyboard_check_pressed(keys[2]){
            menuSelect=menuSelect+1
            }
        else if keyboard_check_pressed(keys[0]){
            menuSelect=menuSelect-1
            }
        if menuSelect&gt;3
            menuSelect=0
        else if menuSelect&lt;0
            menuSelect=3
         switch menuSelect{
            case 0: 
                if mouse_check_button_released(mb_left)
                ||keyboard_check_pressed(keys[4])
                ||keyboard_check_pressed(keys[6]){
                    unitSelect[j]++
                    while find_char_in_menu_list(return_unit(unitSelect[j],1,0),j)
                        &amp;&amp;unitSelect[j]&lt;cc
                        unitSelect[j]++
                    if unitSelect[j]&gt;=cc
                        unitSelect[j]=0
                    while find_char_in_menu_list(return_unit(unitSelect[j],1,0),j)
                        &amp;&amp;unitSelect[j]&lt;cc
                        unitSelect[j]++
                }
               /* else if keyboard_check_pressed(keys[7]){
                    unitSelect[j]--
                }*/
                
                //set limit
                if unitSelect[j]&gt;=cc
                    unitSelect[j]=0
                else if unitSelect[j]&lt;0
                    unitSelect[j]=cc-1
                
                break;
            case 2:
                if mouse_check_button_released(mb_left)
                ||keyboard_check_pressed(keys[4])
                    unitSelect[j]=-1
                break;
            case 3:
                if mouse_check_button_released(mb_left)
                ||keyboard_check_pressed(keys[4]){
                    menu=99//generate map
                    with(oCharCreation)
                        instance_destroy()
                    if global.mobile{
                        if global.vertical = 1{
                            view_wview[0] = 120
                            view_hview[0] = 180
                        }else{
                            view_wview[0] = 180
                            view_hview[0] = 120
                            //view_wport=view_wview[0]
                            //view_hport =view_hport[0]
                        }
                        }
                    }
                break;
        } 
     }else{//no unit yet
        if mouse_check_button_released(mb_left)
        ||keyboard_check_pressed(keys[4]){
            unitSelect[j]=0
            while find_char_in_menu_list(return_unit(unitSelect[j],1,0),j)
                &amp;&amp;unitSelect[j]&lt;cc
                unitSelect[j]++
        }
     }
     
     //visuals
      for (var i = 0;i&lt;playerMax;i++)
      {  
        if unitSelect[i]&gt;=0
        {
         draw_set_colour(c_dkgray)
         draw_rectangle((1+i)*(view_wview/5)-31,10,(1+i)*(view_wview/5)+30,view_hview-10,false)
         draw_set_colour(c_ltgray)
         draw_rectangle((1+i)*(view_wview/5)-27,15,(1+i)*(view_wview/5)+26,65,false)
         draw_sprite_ext(return_unit(unitSelect[i],1,0),0,(1+i)*(view_wview/5),60,2,2,0,-1,1)
         draw_set_colour(c_orange)
         draw_text_transformed((1+i)*(view_wview/5)+6,view_hview-170,"CLASS ",2,2,0)
         draw_set_colour(c_ltgray)
         draw_text_ext((1+i)*(view_wview/5),view_hview-120,unit_description(return_unit(unitSelect[i],3,i)),7,40)
         if menuSelect!=0
         ||i!=j
         draw_text_transformed((1+i)*(view_wview/5),view_hview-158,return_unit(unitSelect[i],0,0),1,1,0)
         draw_text((1+i)*(view_wview/5),view_hview-151,string(unitSelect[i]+1)+"/"+string(cc))
         draw_text_transformed((1+i)*(view_wview/5),view_hview-45,"REMOVE",2,2,0)
         draw_text_transformed((1+i)*(view_wview/5),view_hview-25,"START",2,2,0)
         draw_set_colour(c_white)
         return_unit(unitSelect[i],2,i)
         //draw stats
         draw_text((1+i)*(view_wview/5),view_hview-143,"HP:"+string(hp[i]));
         if i  == j
         switch menuSelect{
             case 0: draw_text((1+i)*(view_wview/5),view_hview-158,"-"+return_unit(unitSelect[i],0,0)+"-")break;
             //case 1: draw_text((1+i)*(view_wview/5),view_hview-90,"-"+returnSkill(unitSkill[i],0,0,unitSelect[i])+"-")break;
             case 2: draw_text_transformed((1+i)*(view_wview/5),view_hview-45,"-REMOVE-",2,2,0)break;
             case 3: draw_text_transformed((1+i)*(view_wview/5),view_hview-25,"-START-",2,2,0)break;
         }
       }else{// no unit yet
         draw_set_colour(c_dkgray)
         draw_rectangle((1+i)*(view_wview/5)-31,view_hview-40,(1+i)*(view_wview/5)+30,view_hview-10,false)
         if j = i{
            draw_set_colour(c_white)
            draw_text_transformed((1+i)*(view_wview/5),view_hview-25,"+UNIT",2,2,0)
            }
         else{
            draw_set_colour(c_ltgray)
            draw_text_transformed((1+i)*(view_wview/5),view_hview-25," UNIT",2,2,0)
            }
       } 
     
    }
}
else if menu=2{

    draw_set_font(pixelFont)
    draw_set_halign(fa_center)
    draw_set_color(c_ltgray)
    if controler=0
    if mouse_x-view_xview&gt;120
    if mouse_x-view_xview&lt;240
    if mouse_y-view_yview&gt;100
        menuSelect=floor((mouse_y-view_yview-100)/20)
    else menuSelect=-1
    if keyboard_check_pressed(keys[2]){
        menuSelect=min(6,menuSelect+1)
        }
    else if keyboard_check_pressed(keys[0]){
        menuSelect=max(0,menuSelect-1)
        }
        
    /// options
    var options;
    if option_zoom
        options[0] = "Zoom When Select: True"
    else
        options[0] = "Zoom When Select: False"
    options[1] ="Grid Alpha: " + string(gridAlpha)
    if warningZone
        options[2] = "Warning Zone: True"
    else
        options[2] = "Warning Zone: False"
    if quickEnd
        options[3] = "Quick End: True"
    else
        options[3] = "Quick End: False"   
    if global.outline
        options[4] = "Outline: True"
    else
        options[4] = "Outline: False" 
    if difficulty = 0
        options[5] = "Difficulty: Casual" 
    else if difficulty = 1
        options[5] = "Difficulty: Normal" 
    else   
        options[5] = "Difficulty: Hard" 
    draw_text_transformed(180,100,options[0],2,2,0)
    draw_text_transformed(180,120,options[1],2,2,0)
    draw_text_transformed(180,140,options[2],2,2,0)
    draw_text_transformed(180,160,options[3],2,2,0)
    draw_text_transformed(180,180,options[4],2,2,0)
    draw_text_transformed(180,200,options[5],2,2,0)
    draw_text_transformed(180,220,"Back",2,2,0)
    draw_set_colour(c_white)
    switch menuSelect{
        case 0: draw_text_transformed(180,100,"-"+options[0]+"-",2,2,0)
            if mouse_check_button_released(mb_left)
            ||keyboard_check_pressed(keys[4])
                option_zoom=!option_zoom
            break;
        case 1: draw_text_transformed(180,120,"-"+options[1]+"-",2,2,0)
            if mouse_check_button_released(mb_left)
            ||keyboard_check_pressed(keys[4]){
                gridAlpha+=0.1
                if gridAlpha&gt;1
                    gridAlpha = 0
                }
                break
        case 2: draw_text_transformed(180,140,"-"+options[2]+"-",2,2,0)
            if mouse_check_button_released(mb_left)
            ||keyboard_check_pressed(keys[4]){
                warningZone=!warningZone
            }
            break;
        case 3: draw_text_transformed(180,160,"-"+options[3]+"-",2,2,0)
            if mouse_check_button_released(mb_left)
            ||keyboard_check_pressed(keys[4]){
                quickEnd=!quickEnd
            }
            break;
        case 4: draw_text_transformed(180,180,"-"+options[4]+"-",2,2,0)
            if mouse_check_button_released(mb_left)
            ||keyboard_check_pressed(keys[4]){
                global.outline=!global.outline
            }
            break;
        case 5: draw_text_transformed(180,200,"-"+options[5]+"-",2,2,0)
            if mouse_check_button_released(mb_left)
            ||keyboard_check_pressed(keys[4]){
                difficulty++
                if difficulty&gt;2
                    difficulty=0
            }
            break;
        case 6: draw_text_transformed(180,220,"-Back-",2,2,0)
            if mouse_check_button_released(mb_left)
            ||keyboard_check_pressed(keys[4]){
                menu=0
                menuSelect=2
                }
            break;
    }
    draw_set_halign(fa_left)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///tutorial
var message = ""
if menu=-1{
    if global.tutSel = 1{
        message= "Click a UNIT to select it."
        if (selected!=noone){
            global.tutSel = 2
            global.tutMov = 1
        }
    }else if global.tutMov = 1{
        message="Click a BLUE tile to move."
        if (phase = 3){
            global.tutMov = 2
            global.tutAct = 1
        }
    }
    else if global.tutAct = 1{
        message="Click a RED tile to attack. Click a GREEN tile to support."
        +" Click the selected UNIT to wait."
        if (phase = 2.1||phase=4){
            global.tutAct = 2
            global.tutStairs = 1
        }
    }
    else if global.tutStairs = 1{
        message="Get to STAIRS to go to the next floor."
        if (level &gt;1 ){
            global.tutStairs = 2
        }
    }
}
if message != ""{
    draw_set_colour(c_dkgray)
    draw_set_font(pixelFont)
    draw_rectangle(view_wview-105,5,view_wview-5,7+string_height_ext(message,7,95),false)
    draw_set_colour(c_white)
    draw_text_ext(view_wview-103,7,message
    ,7,95)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///unit shadow and reset some variables
draw_set_colour(c_black)
draw_set_alpha(0.5)
with (oUnit)
{
    if draw&gt;0
    if visible
    if object_index!=oGreatTree{
        if object_is_ancestor(id.object_index,oChar){
            draw_ellipse(ax+x+6.5-sprite_get_width(unit+1)/2,ay+y+7-sprite_get_width(unit+1)/2,
            ax+x+6.5+sprite_get_width(unit+1)/2,ay+y+7+sprite_get_width(unit+1)/2,false)
        }else
            draw_ellipse(ax+x+6.5-sprite_get_width(sprite_index)/2,ay+y+7-sprite_get_width(sprite_index)/2,
            ax+x+6.5+sprite_get_width(sprite_index)/2,ay+y+7+sprite_get_width(sprite_index)/2,false)
    }
    else{
        draw_ellipse(ax+x+15-sprite_get_width(sprite_index)/2,ay+y+15-sprite_get_width(sprite_index)/2,
        ax+x+15+sprite_get_width(sprite_index)/2,ay+y+15+sprite_get_width(sprite_index)/2,false)
    }
}
draw_set_alpha(1)

//reset info tile
ix=-1
iy=-1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#2 draw tile and grid
draw_set_alpha(gridAlpha)
draw_set_colour(c_black)
for (var i=floor(view_yview/15)*15-15*5;i&lt;floor(view_yview/15)*15+view_wview+15;i+=15)
    draw_line(0,i-1,room_width,i-1)
for (var i=floor(view_xview/15)*15-15;i&lt;floor(view_xview/15)*15+view_wview+15;i+=15)
    draw_line(i-1,0,i-1,room_height)
draw_set_alpha(1)
//draw selected path
if selected!=noone{
path_drawer(selected.path)
}

if selected!=noone
if phase=0
if ds_map_find_value(aiTurns, currentTurn)&gt;=0||debugging==1
{
// clear ally and self
var c=selected
mp_grid_clear_cell(grid,c.x/15,c.y/15)

for (var i=0;i&lt;ds_list_size(unitList);i++){
    var char=ds_list_find_value(unitList,i)
        if instance_exists(char){
            mp_grid_clear_cell(grid,char.x/15,char.y/15)
        }
    }

draw_set_alpha(0.7)
//show where you can move
var mGridW=ceil(ds_grid_width(moveAtkArea)/2)
for (var j=0;j&lt;ds_grid_width(moveAtkArea);j++)
{
    for (var i=0;i&lt;ds_grid_width(moveAtkArea);i++){
        var gridValue;
        var xOff =(i-mGridW)*15
        var yOff =(j-mGridW)*15
        gridValue = ds_grid_get(moveAtkArea,i,j)
        if (gridValue &gt; 0)
        {
            var inst = instance_place(c.x+xOff,c.y+yOff,oUnit)
            if(gridValue%2 ==0)//attack only
            {
                if !place_meeting(c.x+xOff,c.y+yOff,oBlock){
                    if c.pow&gt;0{
                        if (inst=noone||inst.team!=c.team){
                            draw_set_colour(c_red)
                            draw_rectangle(xOff+c.x,yOff+c.y,xOff+c.x+13,yOff+c.y+13,false)
                            if inst!=noone
                            inst.shader=shaderAttack
                        }
                    }
                    else{
                        if (inst=noone||inst.team == c.team){
                            if inst!=noone
                            inst.shader=shaderSupport
                            draw_set_colour(c_lime)
                            draw_rectangle(xOff+c.x,yOff+c.y,xOff+c.x+13,yOff+c.y+13,false)
                        }
                    }
                }
            }
            else if !place_meeting(c.x+xOff,c.y+yOff,oUnit)||inst=c//move or move and attack
            {
                draw_set_colour(c_aqua)
                draw_rectangle(xOff+c.x,yOff+c.y,xOff+c.x+13,yOff+c.y+13,false)
            }
        }
    }
}
draw_set_alpha(1)
path_drawer(c.path)
/*    for (var i=-c.mov*15;i&lt;=c.mov*15;i+=15){
        for (var j=-c.mov*15;j&lt;=c.mov*15;j+=15){
        if mp_grid_path(grid,path,c.x+7,c.y+7,c.x+i+7,c.y+j+7,false)
        if path_get_number(path)-1&lt;=c.mov
        if!place_meeting(c.x+i,c.y+j,oUnit)||instance_place(c.x+i,c.y+j,oUnit)=c{
            draw_set_colour(c_aqua)
            draw_set_alpha(0.5)
            draw_rectangle(i+c.x,j+c.y,i+c.x+13,j+c.y+13,false)
            draw_set_alpha(1)
            if xx=i+c.x
            if yy=j+c.y{
                    ix=xx
                    iy=yy
                    itext="move"
                }
            }
        }
    }
*/

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw move dist over unit when not selecting any
if menu=-1
if ds_map_find_value(aiTurns, currentTurn)&gt;=0
if selected=noone
if warningZone{
    add_all_to_map()
    selected=instance_place(xx,yy,oUnit);
    if selected!=noone
    if selected.draw&gt;0{
        var c=selected
        getMoveAndAttackRange(c)
        mp_grid_clear_cell(grid,c.x/15,c.y/15)
        
        for (var i=0;i&lt;ds_list_size(unitList);i++){
            var char=ds_list_find_value(unitList,i)
                if instance_exists(char){
                    mp_grid_clear_cell(grid,char.x/15,char.y/15)
                }
            }
          
        draw_set_alpha(0.7)
        //show where you can move
        var mGridW=ceil(ds_grid_width(moveAtkArea)/2)
        for (var j=0;j&lt;ds_grid_width(moveAtkArea);j++)
        {
            for (var i=0;i&lt;ds_grid_width(moveAtkArea);i++){
                var gridValue;
                var xOff =(i-mGridW)*15
                var yOff =(j-mGridW)*15
                gridValue = ds_grid_get(moveAtkArea,i,j)
                if (gridValue &gt; 0)
                {
                    var inst = instance_place(c.x+xOff,c.y+yOff,oUnit)
                    if(gridValue%2 ==0)//attack only
                    {
                        if !place_meeting(c.x+xOff,c.y+yOff,oBlock){
                            if c.pow&gt;0{
                                if (inst=noone||inst.team!=c.team){
                                    draw_sprite_ext(box7x7,0,xOff+c.x+3,yOff+c.y+3,1,1,0,c_red,0.5)    
                                    //inst.shader=shaderAttack
                                }
                            }
                            else{
                                if (inst=noone||inst.team == c.team){
                                    //inst.shader=shaderSupport
                                    draw_sprite_ext(box7x7,0,xOff+c.x+3,yOff+c.y+3,1,1,0,c_lime,0.5)    
                                }
                            }
                        }
                    }
                    else if !place_meeting(c.x+xOff,c.y+yOff,oUnit)||inst=c//move or move and attack
                    {
                        draw_sprite_ext(box7x7,0,xOff+c.x+3,yOff+c.y+3,1,1,0,c_aqua,0.5) 
                    }
                }
            }
        }
        //draw_set_alpha(1)
        //special Cases
        if c.object_index=oCampfire
            draw_sprite_ext(AOE_range1s,0,c.x,c.y,1,1,0,c_lime,0.5)
    }
    selected=noone
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw where you can attack
if selected!=noone
if phase=3
if ds_map_find_value(aiTurns, currentTurn)&gt;=0{
var c=selected
var range=c.range

var atk_type = return_attack_type(c.unit)
switch atk_type{
    case 1:
        if (c.x!=c.xx || c.y!=c.yy)
            range = 0
        break;
    case 2:
        if (c.x!=c.xx || c.y!=c.yy)
            range = 0
        break;
}
//setAtkRange(c)
draw_set_alpha(0.7)
//show where you can attack
var aGridW=ceil(ds_grid_width(atkArea)/2)
for (var j=0;j&lt;ds_grid_width(atkArea);j++)
{
    for (var i=0;i&lt;ds_grid_width(atkArea);i++){
        var gridValue;
        var xOff =(i-aGridW)*15
        var yOff =(j-aGridW)*15
        gridValue = ds_grid_get(atkArea,i,j)
        if (gridValue &gt; 0)
        {
            var inst = instance_place(c.x+xOff,c.y+yOff,oUnit)
            if !place_meeting(c.x+xOff,c.y+yOff,oBlock)
            &amp;&amp;inst!=noone{
                if c.pow&gt;0{
                    if (inst.team!=c.team){
                        draw_set_colour(c_red)
                        draw_rectangle(xOff+c.x,yOff+c.y,xOff+c.x+13,yOff+c.y+13,false)
                        if inst!=noone
                        inst.shader=shaderAttack
                    }
                }
                else{
                    if (inst.team == c.team){
                        inst.shader=shaderSupport
                        draw_set_colour(c_lime)
                        draw_rectangle(xOff+c.x,yOff+c.y,xOff+c.x+13,yOff+c.y+13,false)
                    }
                }
            }
            else{
                draw_set_colour(c_orange)
                draw_rectangle(xOff+c.x,yOff+c.y,xOff+c.x+13,yOff+c.y+13,false)
            }
        }
    }
}
draw_set_alpha(1)
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw Area Of Attack Effect
var fadeTime=5
if selected!=noone
if phase = 4 || phase = 5
if selected.draw&gt;0
if selected.visible{
var c=selected
var atk_area=c.wepAOE
switch atk_area{
    case 0:
        var inst = noone
        if target!=noone
        &amp;&amp; instance_exists(target)
            inst = instance_create(floor(target.x/15)*15,floor(target.y/15)*15-3,oFade);
        else inst = instance_create(floor(xx/15)*15,floor(yy/15)*15-3,oFade);
            inst.sprite_index=squareEff
            inst.depth = 1000
            inst.alpha=fadeTime
            if c.pow&gt;0
                inst.image_blend= c_red
            else 
                inst.image_blend= c_lime
        break
    case 1:
        var inst = instance_create(floor(selected.x/15)*15,floor(selected.y/15)*15-3,oFade2);
        inst.sprite_index=AOE_rangeBreath
        inst.image_angle = c.dir*90
            inst.depth = 1000
            inst.alpha=fadeTime
            if c.pow&gt;0
                inst.image_blend= c_red
            else 
                inst.image_blend= c_lime
        break;
    case 2:
        var inst = instance_create(floor(selected.x/15)*15,floor(selected.y/15)*15-3,oFade2);
        inst.sprite_index=AOE_laserBeam
        inst.image_angle = c.dir*90
            inst.depth = 1000
            inst.alpha=fadeTime
            if c.pow&gt;0
                inst.image_blend= c_red
            else 
                inst.image_blend= c_lime
        break;
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw shadow
/*
-1 cant see
0 visited
0&lt;; visable
*/
var px=x/15
var py=y/15
var p=0
var vx=view_xview[p]/15,vy=view_yview[p]/15;
var fx=floor(view_xview[p]/15),fy=floor(view_yview[p]/15);
var vh=view_hview[p]/15,vw=view_wview[p]/15-16//0
for (var i=0;i&lt;room_width/15;i++)
for (var j=0;j&lt;room_height/15;j++){
        if ds_grid_get(gridF1,clamp(i,0,room_width/15),clamp(j,0,room_height/15))&lt;1
        if debugging=0
        {
          draw_sprite_ext(hitbox,0,(i)*15,(j)*15,1,1,0,0,0.5-ds_grid_get(gridF1,i,j))
        }
        /*if ds_grid_get(gridF1,i,j)&amp;gt;0{
           ds_grid_multiply(gridF1,i,j,0.70)
           }
        else{
            //mp_grid_add_cell(grid,i,j)
        }*/

//ds_grid_multiply_region(gridF1,0,0,100,100,min(-1,0.95))
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debugging, make objects
if global.production=0
{
if keyboard_check_pressed(ord('1'))
    option_zoom = !option_zoom
if keyboard_check_pressed(ord('2'))
    gridAlpha+=0.1
if gridAlpha&gt;1
    gridAlpha=0
if keyboard_check_pressed(ord('3'))
    quickEnd = !quickEnd
if keyboard_check_pressed(ord('4'))
    warningZone = !warningZone
if keyboard_check_pressed(ord('5'))
    global.outline = !global.outline
if keyboard_check_pressed(ord('6'))
    difficulty++
if difficulty&gt;2
    difficulty=0

if keyboard_check_pressed(ord('K'))
    randPos++
else if keyboard_check_pressed(ord('L'))
    randPos--
if randPos&gt;999
    randPos=0
if randPos&lt;0
    randPos=999
if keyboard_check(vk_up)
    debugObj++
if keyboard_check_pressed(vk_down)
    debugObj--
if debugObj &gt; object47-oUnit-1
    debugObj = 0
debugObj=clamp(debugObj,0,object47-oUnit-1)
var obj=noone
if debugObj&gt;0
    obj=oUnit-1+debugObj
if obj!=noone{
draw_sprite_ext(object_get_sprite(obj),0,x+7,y+7,1,1,-view_angle,-1,0.5)
if keyboard_check_pressed(vk_enter)
if !place_meeting(x,y,oUnit){
    var inst=instance_create(floor(x/15)*15,floor(y/15)*15,obj);
    inst.team=currentTurn
    var temp=instance_create(x+7,y+7,oEff);
    temp.sprite_index=spawn_eff
    }
}
if keyboard_check(ord('I'))//&amp;&amp;selected=noone
    eventScene=true
else
    eventScene=false
if selected=noone
if keyboard_check_pressed(vk_backspace)
{
    var inst=instance_place(x,y,oUnit)
    if inst=noone
        inst=instance_place(x,y,oItem)
    if inst=noone
        inst=instance_place(x,y,oEvent)
    if inst!=noone{
        with inst
            instance_destroy()
        alarm[10]=1
    }
}

if keyboard_check_pressed(vk_tab){
    inst = instance_place(x,y,oUnit)
    if inst!=noone{
        inst.team+=1
        if inst.team&gt;3
            inst.team=0
        }
        
}

//cnage grid apha
if keyboard_check(ord('O'))
if gridAlpha&gt;0
    gridAlpha-=0.1
if keyboard_check_pressed(ord('P'))
if gridAlpha&lt;1
    gridAlpha+=0.1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="48">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.production=0{
if debugging=1
    debugging=0
else
    debugging=1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
