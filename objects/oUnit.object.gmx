<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>blank</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>hitbox</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ai=0
xx=x
yy=y
ax=0
ay=0
//bosses
phase=0
action=0

//unit type
summon=0

team=0

path=path_add()
dir=0
wait=0
xp=0
mxp=15
lv=1
alpha=0
draw=0

link=noone
aggro=noone;
lastHitBy=noone;

name=""

hp=1
mhp=1
sp=1
msp=1
slowHP=0

idle=0
combat=0

/*
0 - 
1 - PER LV
2 - BASE

0 - ATK
1 - INT
2 - DEF
3 - TEC
4 - RES
*/
for (var i=0;i&lt;=2;i++)
for (var j=0;j&lt;=4;j++)
    stats[i,j]=1
stats[2,0]=1
stats[2,1]=1
stats[2,2]=1
stats[2,3]=1
stats[2,4]=1

mov=1
mmov=mov

view=0
wep=0
arm=0
unit=0
face=0
//per level
hpp=0
spp=0
//bonus
hpg=0
spg=0
strg=0
intg=0
defg=0
tecg=0
resg=0
movg=0
image_speed=0

item[1]=0
item[2]=0
item[3]=0
skill[0]=0

status[0]=0
statusStr[0]=0
/*
xx.yy
yy= duration
xx= type
1 - shield
2 - boost
3 - posion
4 - burn
5 - bind
6 - slow
7 - regen
8 - stun
9 - rage
10 - Atk down
11 - Int down
12 - def down
13 - res down
14 - tec down
15 - Atk up
16 - Int up
17 - def up
18 - res up
19 - tec up
*/
item[0]=0//weapon/arm default
//skill[0]=1
if !object_is_ancestor(object_index,oObj){
}
c=0
ud=1
wave=0
lr=1
stCt=0//for looping through the status
wm=irandom(3)+5
marker=0
size=1

//shaders stuff
/*upixelH = shader_get_uniform(shader1, "pixelH");
upixelW = shader_get_uniform(shader1, "pixelW");
texelW = texture_get_texel_width(sprite_get_texture(sprite_index,0));
texelH = texture_get_texel_height(sprite_get_texture(sprite_index,0));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i=1;i&lt;array_length_1d(item);i++)
{
if item[i]!=0{
    var inst=instance_create(x,y,return_item_obj(item[i]));
    inst.xx=xx
    inst.yy=yy
    inst.use=frac(item[i])
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reset colour
image_blend=c_white
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ax=0
ay=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sprite direction
if xprevious!=x
||yprevious!=y
{
   image_speed=1
   if x&gt;xprevious
    dir=0
   else if x&lt;xprevious
    dir=2
   else if y&gt;yprevious
    dir=3
   else if y&lt;yprevious
    dir=1
}
if path_position=1||path_position=0
{
    if dir&gt;3
        dir-=4
    if idle=0{
   image_speed=0
   if !object_is_ancestor(object_index,oObj)
   image_index=0
   }
   else
    image_speed=0.2
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///visibility
if x&gt;=view_xview
&amp;&amp; x&lt;=view_xview+view_wview
&amp;&amp; y&gt;=view_yview
&amp;&amp; y&lt;=view_yview+view_hview
{
if object_is_ancestor(object_index,oObj){
    var cx=x
    var cy=y
    var d=1
    with oControler
    if ds_grid_get(gridF1,cx/15,cy/15)&lt;0
        d=0
    draw=d
}
visible=true

//idle movement
if !object_is_ancestor(object_index,oObj)
{
//c=ch
c+=0.01*ud
if c&gt;=0.15
    ud=-1
else if c&lt;0
    ud=1
}
if object_is_ancestor(object_index,oNature)
{
wave+=lr*0.1
if wave&gt;=wm
    lr=-1
else if wave&lt;=0
    lr=1
}

}else{ //visible=false
//instance_deactivate_object(id)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set depth
depth=-y*cos(degtorad(view_angle))+x*sin(degtorad(view_angle))
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check if dead
if hp&lt;=0{
    var inst=instance_create(x,y,oFade);
    inst.sprite_index=sprite_index
    if face&gt;0{
    inst=instance_create(x,y,oFade);
    inst.sprite_index=face
    }
    instance_destroy()
}
if dmg!=hp{
   if image_blend!=c_red{
      alpha=5
   if abs(dmg-hp)&gt;0.5
      dmg+=sign(hp-dmg)/2//5//round(((mhp/2)/(hp-dmg)))
   else dmg=hp
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw markers
if visible
if draw&gt;0
if marker&gt;0
if oControler.phase&lt;2||oControler.currentTurn&lt;0{
    var txt=""
    var col=c_white
    switch marker{
        case 1:      
            col=c_red
            txt="boss"
        break
        case 2:      
            col=c_blue
            txt="trade"
        break
    }
    draw_set_halign(fa_center)
    draw_set_colour(col)
    draw_set_font(pixelBlock);
    draw_text_transformed(x+7-28*dsin(-view_angle),y+7-28*dcos(view_angle),txt,1,1,-view_angle)
    draw_sprite_ext(unit_marker,0,x+7+13*dsin(view_angle),y+7-13*dcos(view_angle),1,1,-view_angle,col,1)
    draw_set_halign(fa_left)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw
if visible||debugging=1
{

if draw&gt;0
||debugging=1{
//if !object_is_ancestor(object_index,oObj)
{//draw curr turn
    //if oControler.phase=0
    if oControler.currentTurn=team
    if oControler.currentTurn&gt;=0
    if wait=0
    if oControler.selected=noone
    || oControler.selected=id
    //if oControler.phase=0
    {
        draw_sprite_ext(box14x14,0,x,y,1,1,0,c_yellow,0.5)
    }
}

//draw health bars
var colour;
if oControler.currentTurn=team
    colour=oControler.playerColour[3]
else if oControler.allyMatrix[# team,oControler.currentTurn]&lt;0 colour=oControler.playerColour[2];
else if oControler.allyMatrix[# team,oControler.currentTurn]&gt;0
    colour=oControler.playerColour[1]
else colour=oControler.playerColour[0];
    
if object_is_ancestor(object_index,oObj)
    colour=oControler.playerColour[0];
else
    draw_sprite_ext(marker1,0,x-7*(size-1),y-7*(size-1),size,size,0,colour,1)
/*if dmg!=hp{
   if image_blend!=c_red{
      alpha=5
   if abs(dmg-hp)&gt;0.5
      dmg+=sign(hp-dmg)/2//5//round(((mhp/2)/(hp-dmg)))
   else dmg=hp
   }
}*/
if floor(hp)&lt;floor(mhp){
    alpha=5
if wait!=0
    alpha=0.5
}
if alpha&gt;0
{
    if hp&lt;dmg{
    draw_sprite_ext(healthBar,58*(dmg/mhp),x-7*(size-1),y-7*(size-1),size,size,0,colour,alpha)
   //draw_sprite_ext(healthBar,58*(hp/mhp),x,y,1,1,0,colour,alpha)
   }
   else{
   //draw_sprite_ext(healthBar,58*(hp/mhp),x,y,1,1,0,c_green,alpha)
   draw_sprite_ext(healthBar,58*(dmg/mhp),x-7*(size-1),y-7*(size-1),size,size,0,colour,alpha)
   }
   
    //if hp&lt;dmg{
   //draw_sprite_ext(hpBar,0,x,y-11,(dmg/mhp)*13,1,0,c_red,alpha)
  // draw_sprite_ext(hpBar,0,x,y-11,(hp/mhp)*13,1,0,c_lime,alpha)}
   //else{
   //draw_sprite_ext(hpBar,0,x,y-11,(hp/mhp)*13,1,0,c_green,alpha)
   //draw_sprite_ext(hpBar,0,x,y-11,(dmg/mhp)*13,1,0,c_lime,alpha)}
   
   //if alarm_get(6)&lt;=0
      alpha-=0.1
}

//draw unit
//draw_set_colour(c_black)
//draw_set_alpha(0.5)
//draw_ellipse(ax+x+7-sprite_get_width(sprite_index)/2,ay+y+7-sprite_get_width(sprite_index)/2,
//ax+x+6.5+sprite_get_width(sprite_index)/2,ay+y+7+sprite_get_width(sprite_index)/2,false)
//draw_set_alpha(1)
if (object_is_ancestor(object_index,oObj)
||ai=-1)
&amp;&amp;!object_is_ancestor(object_index,oDeco4){
var viewSprite=dir
}
else{
var viewSprite=dir+round(view_angle/90)
if viewSprite&lt;0
    viewSprite+=4
viewSprite=viewSprite%4
}

var dir2=abs(dir+round(view_angle/90))
if dir2&gt;=4
    dir2-=4
if dir2=1||dir2=2
    draw_weapon()
if oControler.selected=id
{
   /* shader_set(shader1)
    texelW = texture_get_texel_width(sprite_get_texture(sprite_index,0));
    texelH = texture_get_texel_height(sprite_get_texture(sprite_index,0));
    shader_set_uniform_f(upixelW,texelW)
    shader_set_uniform_f(upixelH,texelH)
    draw_sprite_ext(sprite_index+viewSprite,image_index,x+7+ax,y+7+ay,1,1-c,-view_angle+wave,image_blend,1)
    shader_reset()*/
}
//else
draw_sprite_ext(sprite_index+viewSprite,image_index,x+7+ax,y+7+ay,1,1-c,-view_angle+wave,image_blend,1)
if face!=0
    draw_sprite_ext(face,viewSprite,x+7+ax,y+7+ay,1,1-c,-view_angle+wave,image_blend,1)
//draw inactive
{
    //if !object_is_ancestor(object_index,oObj)
    {//draw curr turn
        //if oControler.phase=0
        if oControler.currentTurn=team
        if oControler.currentTurn&gt;=0
        if wait=1
        //if oControler.selected=noone
        {
            draw_sprite_ext(sprite_index+viewSprite,image_index,x+7+ax,y+7+ay,1,1-c,-view_angle+wave,1,0.5)
            if face!=0
            draw_sprite_ext(face,viewSprite,x+7+ax,y+7+ay,1,1-c,-view_angle+wave,1,0.5)
        }
    }
}

if dir2!=1
if dir2!=2
    draw_weapon()
if findStatus(id,1)!=-1
    draw_sprite_ext(shieldSprite,0,x+7+ax,y+7+ay,size,size,-view_angle,-1,0.5)
//loop through the status
var sub=-1
switch floor(status[floor(stCt)]){
    case 4:sub=2 break;
    case 6:sub=3 break;
    case 10:sub=0 break;
    case 11:sub=0 break;
    case 12:sub=0 break;
    case 13:sub=0 break;
    case 14:sub=0 break;
    case 15:sub=1 break;
    case 16:sub=1 break;
    case 17:sub=1 break;
    case 18:sub=1 break;
    case 19:sub=1 break;
}
if floor(status[floor(stCt)])==0
    stCt++
stCt+=0.02
if stCt&gt;=array_length_1d(status)
    stCt=0
if sub!=-1
    draw_sprite_ext(statuses,sub,x+7+ax,y+7+ay,1,1,-view_angle,-1,0.5
        +place_meeting(x,y,oControler))
}//end draw
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
